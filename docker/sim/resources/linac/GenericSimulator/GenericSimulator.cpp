/*----- PROTECTED REGION ID(GenericSimulator.cpp) ENABLED START -----*/
static const char *RcsId = "$Id: GenericSimulator.cpp,v 1.2 2013-08-08 09:50:40 tappret Exp $";
//=============================================================================
//
// file :        GenericSimulator.cpp
//
// description : C++ source for the GenericSimulator class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               GenericSimulator are implemented in this file.
//
// project :     GenericSimulator
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author: tappret $
//
// $Revision: 1.2 $
// $Date: 2013-08-08 09:50:40 $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <GenericSimulator.h>
#include <GenericSimulatorClass.h>

/*----- PROTECTED REGION END -----*/	//	GenericSimulator.cpp

/**
 *  GenericSimulator class description:
 *    Generic Simulator for test what you want.
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name             |  Method name
//================================================================
//  State                    |  Inherited (no method)
//  Status                   |  Inherited (no method)
//  On                       |  on
//  Off                      |  off
//  Reset                    |  reset
//  GetInterlockState        |  get_interlock_state
//  GetInterlockDescription  |  get_interlock_description
//  SetInterlockState        |  set_interlock_state
//  StopPolling              |  stop_polling
//  StartPolling             |  start_polling
//  changeState              |  change_state
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  Rocknroll   |  Tango::DevDouble	Scalar
//  Frequency   |  Tango::DevDouble	Scalar
//  Value       |  Tango::DevDouble	Scalar
//  Position    |  Tango::DevDouble	Scalar
//  Current     |  Tango::DevDouble	Scalar
//  Interlocks  |  Tango::DevShort	Spectrum  ( max = 22)
//================================================================

namespace GenericSimulator_ns
{
/*----- PROTECTED REGION ID(GenericSimulator::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	GenericSimulator::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : GenericSimulator::GenericSimulator()
 *	Description : Constructors for a Tango device
 *                implementing the classGenericSimulator
 */
//--------------------------------------------------------
GenericSimulator::GenericSimulator(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(GenericSimulator::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	GenericSimulator::constructor_1
}
//--------------------------------------------------------
GenericSimulator::GenericSimulator(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(GenericSimulator::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	GenericSimulator::constructor_2
}
//--------------------------------------------------------
GenericSimulator::GenericSimulator(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(GenericSimulator::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	GenericSimulator::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : GenericSimulator::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void GenericSimulator::delete_device()
{
	DEBUG_STREAM << "GenericSimulator::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(GenericSimulator::delete_device) ENABLED START -----*/
	
	//	Delete device allocated objects
        delete myself;
	
	/*----- PROTECTED REGION END -----*/	//	GenericSimulator::delete_device
	delete[] attr_Rocknroll_read;
	delete[] attr_Frequency_read;
	delete[] attr_Value_read;
	delete[] attr_Position_read;
	delete[] attr_Current_read;
	delete[] attr_Interlocks_read;
}

//--------------------------------------------------------
/**
 *	Method      : GenericSimulator::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void GenericSimulator::init_device()
{
	DEBUG_STREAM << "GenericSimulator::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(GenericSimulator::init_device_before) ENABLED START -----*/
	
	//	Initialization before get_device_property() call
	
	/*----- PROTECTED REGION END -----*/	//	GenericSimulator::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	
	attr_Rocknroll_read = new Tango::DevDouble[1];
	attr_Frequency_read = new Tango::DevDouble[1];
	attr_Value_read = new Tango::DevDouble[1];
	attr_Position_read = new Tango::DevDouble[1];
	attr_Current_read = new Tango::DevDouble[1];
	attr_Interlocks_read = new Tango::DevShort[22];
	/*----- PROTECTED REGION ID(GenericSimulator::init_device) ENABLED START -----*/
	
	//	Initialize device
        *attr_Frequency_read = init_Frequency;
        *attr_Value_read = init_Value;
        *attr_Position_read = init_Position;
        *attr_Current_read = init_Current;
        
        
        cpt = 0;
        cptReset = 0;
        
        for(int i = 0 ; i < 22 ; ++i){
            attr_Interlocks_read[i] = i;
        }
        
        struct timeval tv;
        gettimeofday(&tv, NULL);
        last_time = (tv.tv_sec) * 1000 + (tv.tv_usec) / 1000 ;
        
        set_state(Tango::ON);
        
        myself = new Tango::DeviceProxy(this->device_name);
	
	/*----- PROTECTED REGION END -----*/	//	GenericSimulator::init_device
}

//--------------------------------------------------------
/**
 *	Method      : GenericSimulator::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void GenericSimulator::get_device_property()
{
	/*----- PROTECTED REGION ID(GenericSimulator::get_device_property_before) ENABLED START -----*/
	
	//	Initialize property data members
	
	/*----- PROTECTED REGION END -----*/	//	GenericSimulator::get_device_property_before


	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("init_Frequency"));
	dev_prop.push_back(Tango::DbDatum("init_Value"));
	dev_prop.push_back(Tango::DbDatum("init_Position"));
	dev_prop.push_back(Tango::DbDatum("init_Current"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on GenericSimulatorClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		GenericSimulatorClass	*ds_class =
			(static_cast<GenericSimulatorClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize init_Frequency from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  init_Frequency;
		else {
			//	Try to initialize init_Frequency from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  init_Frequency;
		}
		//	And try to extract init_Frequency value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  init_Frequency;

		//	Try to initialize init_Value from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  init_Value;
		else {
			//	Try to initialize init_Value from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  init_Value;
		}
		//	And try to extract init_Value value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  init_Value;

		//	Try to initialize init_Position from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  init_Position;
		else {
			//	Try to initialize init_Position from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  init_Position;
		}
		//	And try to extract init_Position value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  init_Position;

		//	Try to initialize init_Current from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  init_Current;
		else {
			//	Try to initialize init_Current from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  init_Current;
		}
		//	And try to extract init_Current value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  init_Current;

	}

	/*----- PROTECTED REGION ID(GenericSimulator::get_device_property_after) ENABLED START -----*/
	
	//	Check device property data members init
	
	/*----- PROTECTED REGION END -----*/	//	GenericSimulator::get_device_property_after
}

//--------------------------------------------------------
/**
 *	Method      : GenericSimulator::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void GenericSimulator::always_executed_hook()
{
	DEBUG_STREAM << "GenericSimulator::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(GenericSimulator::always_executed_hook) ENABLED START -----*/
	
	//	code always executed before all requests
        struct timeval tv;
        gettimeofday(&tv, NULL);
        double diff_time = ((tv.tv_sec) * 1000 + (tv.tv_usec) / 1000) - last_time;
        if(diff_time >= 1000){
            last_time = last_time + 1000 ;
            
            if(cpt > UINT_MAX){
                cpt = 0;
            }
            
            ++cpt;
            
            *attr_Rocknroll_read = cpt;
            
        }
	
	/*----- PROTECTED REGION END -----*/	//	GenericSimulator::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : GenericSimulator::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void GenericSimulator::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "GenericSimulator::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(GenericSimulator::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	GenericSimulator::read_attr_hardware
}
//--------------------------------------------------------
/**
 *	Method      : GenericSimulator::write_attr_hardware()
 *	Description : Hardware writing for attributes
 */
//--------------------------------------------------------
void GenericSimulator::write_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "GenericSimulator::write_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(GenericSimulator::write_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	GenericSimulator::write_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute Rocknroll related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void GenericSimulator::read_Rocknroll(Tango::Attribute &attr)
{
	DEBUG_STREAM << "GenericSimulator::read_Rocknroll(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(GenericSimulator::read_Rocknroll) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_Rocknroll_read);
	
	/*----- PROTECTED REGION END -----*/	//	GenericSimulator::read_Rocknroll
}
//--------------------------------------------------------
/**
 *	Write attribute Rocknroll related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void GenericSimulator::write_Rocknroll(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "GenericSimulator::write_Rocknroll(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(GenericSimulator::write_Rocknroll) ENABLED START -----*/
	*attr_Rocknroll_read = w_val;
        cpt = (Tango::DevULong)w_val;
	
	/*----- PROTECTED REGION END -----*/	//	GenericSimulator::write_Rocknroll
}
//--------------------------------------------------------
/**
 *	Read attribute Frequency related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void GenericSimulator::read_Frequency(Tango::Attribute &attr)
{
	DEBUG_STREAM << "GenericSimulator::read_Frequency(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(GenericSimulator::read_Frequency) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_Frequency_read);
	
	/*----- PROTECTED REGION END -----*/	//	GenericSimulator::read_Frequency
}
//--------------------------------------------------------
/**
 *	Write attribute Frequency related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void GenericSimulator::write_Frequency(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "GenericSimulator::write_Frequency(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(GenericSimulator::write_Frequency) ENABLED START -----*/
	*attr_Frequency_read = w_val;
	
	/*----- PROTECTED REGION END -----*/	//	GenericSimulator::write_Frequency
}
//--------------------------------------------------------
/**
 *	Read attribute Value related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void GenericSimulator::read_Value(Tango::Attribute &attr)
{
	DEBUG_STREAM << "GenericSimulator::read_Value(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(GenericSimulator::read_Value) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_Value_read);
	
	/*----- PROTECTED REGION END -----*/	//	GenericSimulator::read_Value
}
//--------------------------------------------------------
/**
 *	Write attribute Value related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void GenericSimulator::write_Value(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "GenericSimulator::write_Value(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(GenericSimulator::write_Value) ENABLED START -----*/
	*attr_Value_read = w_val;
	
	/*----- PROTECTED REGION END -----*/	//	GenericSimulator::write_Value
}
//--------------------------------------------------------
/**
 *	Read attribute Position related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void GenericSimulator::read_Position(Tango::Attribute &attr)
{
	DEBUG_STREAM << "GenericSimulator::read_Position(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(GenericSimulator::read_Position) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_Position_read);
	
	/*----- PROTECTED REGION END -----*/	//	GenericSimulator::read_Position
}
//--------------------------------------------------------
/**
 *	Write attribute Position related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void GenericSimulator::write_Position(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "GenericSimulator::write_Position(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(GenericSimulator::write_Position) ENABLED START -----*/
	*attr_Position_read = w_val;
	
	/*----- PROTECTED REGION END -----*/	//	GenericSimulator::write_Position
}
//--------------------------------------------------------
/**
 *	Read attribute Current related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void GenericSimulator::read_Current(Tango::Attribute &attr)
{
	DEBUG_STREAM << "GenericSimulator::read_Current(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(GenericSimulator::read_Current) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_Current_read);
	
	/*----- PROTECTED REGION END -----*/	//	GenericSimulator::read_Current
}
//--------------------------------------------------------
/**
 *	Write attribute Current related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void GenericSimulator::write_Current(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "GenericSimulator::write_Current(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(GenericSimulator::write_Current) ENABLED START -----*/
	*attr_Current_read = w_val;
	
	/*----- PROTECTED REGION END -----*/	//	GenericSimulator::write_Current
}
//--------------------------------------------------------
/**
 *	Read attribute Interlocks related method
 *	Description: 
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Spectrum max = 22
 */
//--------------------------------------------------------
void GenericSimulator::read_Interlocks(Tango::Attribute &attr)
{
	DEBUG_STREAM << "GenericSimulator::read_Interlocks(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(GenericSimulator::read_Interlocks) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_Interlocks_read, 22);
	
	/*----- PROTECTED REGION END -----*/	//	GenericSimulator::read_Interlocks
}

//--------------------------------------------------------
/**
 *	Method      : GenericSimulator::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void GenericSimulator::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(GenericSimulator::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
	/*----- PROTECTED REGION END -----*/	//	GenericSimulator::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command On related method
 *	Description: set on
 *
 */
//--------------------------------------------------------
void GenericSimulator::on()
{
	DEBUG_STREAM << "GenericSimulator::On()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(GenericSimulator::on) ENABLED START -----*/
	
	//	Add your own code
        set_state(Tango::ON);
	
	/*----- PROTECTED REGION END -----*/	//	GenericSimulator::on
}
//--------------------------------------------------------
/**
 *	Command Off related method
 *	Description: set off
 *
 */
//--------------------------------------------------------
void GenericSimulator::off()
{
	DEBUG_STREAM << "GenericSimulator::Off()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(GenericSimulator::off) ENABLED START -----*/
	
	//	Add your own code
        set_state(Tango::OFF);
	
	/*----- PROTECTED REGION END -----*/	//	GenericSimulator::off
}
//--------------------------------------------------------
/**
 *	Command Reset related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void GenericSimulator::reset()
{
	DEBUG_STREAM << "GenericSimulator::Reset()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(GenericSimulator::reset) ENABLED START -----*/
	
	//	Add your own code
        Tango::DevState state = get_state();
        if(state == Tango::FAULT
                || state == Tango::ALARM){
            set_state(Tango::OFF);
        }
	
	/*----- PROTECTED REGION END -----*/	//	GenericSimulator::reset
}
//--------------------------------------------------------
/**
 *	Command GetInterlockState related method
 *	Description: gives the state of the interlock
 *
 *	@param argin List of Interlock addresses : [Word address,Bit address]*
 *	@returns Interlock state array
 */
//--------------------------------------------------------
Tango::DevVarCharArray *GenericSimulator::get_interlock_state(const Tango::DevVarLongArray *argin)
{
	Tango::DevVarCharArray *argout;
	DEBUG_STREAM << "GenericSimulator::GetInterlockState()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(GenericSimulator::get_interlock_state) ENABLED START -----*/
	
	//	Add your own code
	argout  = new Tango::DevVarCharArray();
	argout->length(1);
	(*argout)[0] = 0;
	DEBUG_STREAM << "Ilovetests::get_interlock_state(): entering... !" << endl;

	//	Add your own code to control device here
	argout->length((int)((argin->length())/2));
	for(unsigned int i=0;i<argout->length();i++)
	{
		if(i<intlks.size())
			(*argout)[i] = intlks[i];
		else
			(*argout)[i] = 1;
	}
        
	/*----- PROTECTED REGION END -----*/	//	GenericSimulator::get_interlock_state
	return argout;
}
//--------------------------------------------------------
/**
 *	Command GetInterlockDescription related method
 *	Description: gives description of the interlock
 *
 *	@param argin List of Interlock addresses : [Word address,Bit address]*
 *	@returns Interlock description array
 */
//--------------------------------------------------------
Tango::DevVarStringArray *GenericSimulator::get_interlock_description(const Tango::DevVarLongArray *argin)
{
	Tango::DevVarStringArray *argout;
	DEBUG_STREAM << "GenericSimulator::GetInterlockDescription()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(GenericSimulator::get_interlock_description) ENABLED START -----*/
	
	//	Add your own code
        argout  = new Tango::DevVarStringArray();
	argout->length(1);
	(*argout)[0] = CORBA::string_dup("dummy");
	DEBUG_STREAM << "Ilovetests::get_interlock_description(): entering... !" << endl;

	//	Add your own code to control device here
	argout->length((int)((argin->length())/2));
	for(unsigned int i=0;i<argout->length();i++)
	{
		char strtmp[50];
		sprintf(strtmp,"description %d",i);
		(*argout)[i]= CORBA::string_dup(strtmp);
	}
	
	/*----- PROTECTED REGION END -----*/	//	GenericSimulator::get_interlock_description
	return argout;
}
//--------------------------------------------------------
/**
 *	Command SetInterlockState related method
 *	Description: set interlock
 *
 *	@param argin List of Interlock addresses : [Word address,Bit address]*
 */
//--------------------------------------------------------
void GenericSimulator::set_interlock_state(const Tango::DevVarLongArray *argin)
{
	DEBUG_STREAM << "GenericSimulator::SetInterlockState()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(GenericSimulator::set_interlock_state) ENABLED START -----*/
	
	//	Add your own code
        intlks.clear();
	for(unsigned int i=0;i<argin->length();i++)
		intlks.push_back((*argin)[i]);
	
	/*----- PROTECTED REGION END -----*/	//	GenericSimulator::set_interlock_state
}
//--------------------------------------------------------
/**
 *	Command StopPolling related method
 *	Description: stop thread poll
 *
 */
//--------------------------------------------------------
void GenericSimulator::stop_polling()
{
	DEBUG_STREAM << "GenericSimulator::StopPolling()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(GenericSimulator::stop_polling) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	GenericSimulator::stop_polling
}
//--------------------------------------------------------
/**
 *	Command StartPolling related method
 *	Description: start the threadPoll
 *
 */
//--------------------------------------------------------
void GenericSimulator::start_polling()
{
	DEBUG_STREAM << "GenericSimulator::StartPolling()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(GenericSimulator::start_polling) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	GenericSimulator::start_polling
}
//--------------------------------------------------------
/**
 *	Command changeState related method
 *	Description: simulate change of state of the hardware
 *
 */
//--------------------------------------------------------
void GenericSimulator::change_state()
{
	DEBUG_STREAM << "GenericSimulator::changeState()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(GenericSimulator::change_state) ENABLED START -----*/
	
	//	Add your own code
        Tango::DevState state;
        switch(get_state())
	{
		case Tango::ON:
			state = Tango::OFF;
			break;
		case Tango::OFF:
			state = Tango::FAULT;
			break;
		case Tango::FAULT:
			state = Tango::INIT;
			break;
		case Tango::INIT:
			state = Tango::DISABLE;
			break;
                case Tango::DISABLE:
			state = Tango::UNKNOWN;
			break;
                case Tango::UNKNOWN:
			state = Tango::ON;
			break;
		default:
			state = Tango::ON;
	}
        set_state(state);
	
	/*----- PROTECTED REGION END -----*/	//	GenericSimulator::change_state
}
//--------------------------------------------------------
/**
 *	Method      : GenericSimulator::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void GenericSimulator::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(GenericSimulator::add_dynamic_commands) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic commands if any
	
	/*----- PROTECTED REGION END -----*/	//	GenericSimulator::add_dynamic_commands
}

/*----- PROTECTED REGION ID(GenericSimulator::namespace_ending) ENABLED START -----*/

//	Additional Methods

/*----- PROTECTED REGION END -----*/	//	GenericSimulator::namespace_ending
} //	namespace
