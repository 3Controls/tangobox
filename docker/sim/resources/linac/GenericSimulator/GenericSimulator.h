/*----- PROTECTED REGION ID(GenericSimulator.h) ENABLED START -----*/
//=============================================================================
//
// file :        GenericSimulator.h
//
// description : Include file for the GenericSimulator class
//
// project :     GenericSimulator
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author: tappret $
//
// $Revision: 1.2 $
// $Date: 2013-08-08 09:50:39 $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef GenericSimulator_H
#define GenericSimulator_H

#include <tango.h>


/*----- PROTECTED REGION END -----*/	//	GenericSimulator.h

/**
 *  GenericSimulator class description:
 *    Generic Simulator for test what you want.
 */

namespace GenericSimulator_ns
{
/*----- PROTECTED REGION ID(GenericSimulator::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations

/*----- PROTECTED REGION END -----*/	//	GenericSimulator::Additional Class Declarations

class GenericSimulator : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(GenericSimulator::Data Members) ENABLED START -----*/

//	Add your own data members
private:
        Tango::DevULong cpt;
        Tango::DevLong cptReset;
        Tango::DevDouble last_time;
        vector<unsigned char> intlks;
        Tango::DeviceProxy * myself;

/*----- PROTECTED REGION END -----*/	//	GenericSimulator::Data Members

//	Device property data members
public:
	//	init_Frequency:	Value of Frequency at init
	Tango::DevDouble	init_Frequency;
	//	init_Value:	Value of Value at init
	Tango::DevDouble	init_Value;
	//	init_Position:	Value of Position at init
	Tango::DevDouble	init_Position;
	//	init_Current:	Value of Current at init
	Tango::DevDouble	init_Current;

//	Attribute data members
public:
	Tango::DevDouble	*attr_Rocknroll_read;
	Tango::DevDouble	*attr_Frequency_read;
	Tango::DevDouble	*attr_Value_read;
	Tango::DevDouble	*attr_Position_read;
	Tango::DevDouble	*attr_Current_read;
	Tango::DevShort	*attr_Interlocks_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	GenericSimulator(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	GenericSimulator(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	GenericSimulator(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~GenericSimulator() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();


//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : GenericSimulator::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);
	//--------------------------------------------------------
	/*
	 *	Method      : GenericSimulator::write_attr_hardware()
	 *	Description : Hardware writing for attributes.
	 */
	//--------------------------------------------------------
	virtual void write_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute Rocknroll related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_Rocknroll(Tango::Attribute &attr);
	virtual void write_Rocknroll(Tango::WAttribute &attr);
	virtual bool is_Rocknroll_allowed(Tango::AttReqType type);
/**
 *	Attribute Frequency related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_Frequency(Tango::Attribute &attr);
	virtual void write_Frequency(Tango::WAttribute &attr);
	virtual bool is_Frequency_allowed(Tango::AttReqType type);
/**
 *	Attribute Value related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_Value(Tango::Attribute &attr);
	virtual void write_Value(Tango::WAttribute &attr);
	virtual bool is_Value_allowed(Tango::AttReqType type);
/**
 *	Attribute Position related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_Position(Tango::Attribute &attr);
	virtual void write_Position(Tango::WAttribute &attr);
	virtual bool is_Position_allowed(Tango::AttReqType type);
/**
 *	Attribute Current related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_Current(Tango::Attribute &attr);
	virtual void write_Current(Tango::WAttribute &attr);
	virtual bool is_Current_allowed(Tango::AttReqType type);
/**
 *	Attribute Interlocks related methods
 *	Description: 
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Spectrum max = 22
 */
	virtual void read_Interlocks(Tango::Attribute &attr);
	virtual bool is_Interlocks_allowed(Tango::AttReqType type);


	//--------------------------------------------------------
	/**
	 *	Method      : GenericSimulator::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:
	/**
	 *	Command On related method
	 *	Description: set on
	 *
	 */
	virtual void on();
	virtual bool is_On_allowed(const CORBA::Any &any);
	/**
	 *	Command Off related method
	 *	Description: set off
	 *
	 */
	virtual void off();
	virtual bool is_Off_allowed(const CORBA::Any &any);
	/**
	 *	Command Reset related method
	 *	Description: 
	 *
	 */
	virtual void reset();
	virtual bool is_Reset_allowed(const CORBA::Any &any);
	/**
	 *	Command GetInterlockState related method
	 *	Description: gives the state of the interlock
	 *
	 *	@param argin List of Interlock addresses : [Word address,Bit address]*
	 *	@returns Interlock state array
	 */
	virtual Tango::DevVarCharArray *get_interlock_state(const Tango::DevVarLongArray *argin);
	virtual bool is_GetInterlockState_allowed(const CORBA::Any &any);
	/**
	 *	Command GetInterlockDescription related method
	 *	Description: gives description of the interlock
	 *
	 *	@param argin List of Interlock addresses : [Word address,Bit address]*
	 *	@returns Interlock description array
	 */
	virtual Tango::DevVarStringArray *get_interlock_description(const Tango::DevVarLongArray *argin);
	virtual bool is_GetInterlockDescription_allowed(const CORBA::Any &any);
	/**
	 *	Command SetInterlockState related method
	 *	Description: set interlock
	 *
	 *	@param argin List of Interlock addresses : [Word address,Bit address]*
	 */
	virtual void set_interlock_state(const Tango::DevVarLongArray *argin);
	virtual bool is_SetInterlockState_allowed(const CORBA::Any &any);
	/**
	 *	Command StopPolling related method
	 *	Description: stop thread poll
	 *
	 */
	virtual void stop_polling();
	virtual bool is_StopPolling_allowed(const CORBA::Any &any);
	/**
	 *	Command StartPolling related method
	 *	Description: start the threadPoll
	 *
	 */
	virtual void start_polling();
	virtual bool is_StartPolling_allowed(const CORBA::Any &any);
	/**
	 *	Command changeState related method
	 *	Description: simulate change of state of the hardware
	 *
	 */
	virtual void change_state();
	virtual bool is_changeState_allowed(const CORBA::Any &any);


	//--------------------------------------------------------
	/**
	 *	Method      : GenericSimulator::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(GenericSimulator::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes

/*----- PROTECTED REGION END -----*/	//	GenericSimulator::Additional Method prototypes
};

/*----- PROTECTED REGION ID(GenericSimulator::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions

/*----- PROTECTED REGION END -----*/	//	GenericSimulator::Additional Classes Definitions

}	//	End of namespace

#endif   //	GenericSimulator_H
