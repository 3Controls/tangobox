/*----- PROTECTED REGION ID(LinacModulator.h) ENABLED START -----*/
//=============================================================================
//
// file :        LinacModulator.h
//
// description : Include file for the LinacModulator class
//
// project :     LinacModulator
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef LinacModulator_H
#define LinacModulator_H

#include <tango.h>
#ifndef SIMU
#include <API.h>
#undef DevState
#endif





/*----- PROTECTED REGION END -----*/	//	LinacModulator.h

/**
 *  LinacModulator class description:
 *    The linac is equiped with two identical modulators, supplying two klystrons
 *    with the power necessary for the two 6 meters accelerating sections,
 *    and for the buncher.
 *    The klystrons are multicavity amplifiers.
 *    The two modulators are line type with a Pulse Forming Network (PFN)
 *    short circuited by a thyratron through the primary of a pulse transformer.
 *    The secondary of this transformer supplies the klystron cathode
 *    with a 280kV pulse.
 */

namespace LinacModulator_ns
{
/*----- PROTECTED REGION ID(LinacModulator::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations

/*----- PROTECTED REGION END -----*/	//	LinacModulator::Additional Class Declarations

class LinacModulator : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(LinacModulator::Data Members) ENABLED START -----*/

//	Add your own data members
public:



/*----- PROTECTED REGION END -----*/	//	LinacModulator::Data Members

//	Device property data members
public:
	//	Daresbury:	Name of the daresbury device.
	string	daresbury;
	//	Delay_name:	Name of the device used to read and set the Delay Attribute.
	string	delay_name;
	//	DelayS_name:	Name of the device used to read and set the DelayS Attribute.
	string	delayS_name;
	//	Interlocks_list:	list of interlocks.
	vector<Tango::DevDouble>	interlocks_list;
	//	KlystPeakI_adc:	Adc device used to get the Klystron Peak I value.
	string	klystPeakI_adc;
	//	KlystPeakV_adc:	ADC device used to get the Klystron Peak V value.
	string	klystPeakV_adc;
	//	Offrelay:	Name of the relay used to switch off the device.
	string	offrelay;
	//	Onrelay:	Name of the relay used to switch on the device.
	string	onrelay;
	//	PeakPowerIn_adc:	ADC device used to get Peak Power In value.
	string	peakPowerIn_adc;
	//	PeakPowerOut_adc:	ADC device used to get Peak Power Out value.
	string	peakPowerOut_adc;
	//	Pulsetime:	Duration in milliseconds of the pulse to do on the pulsed relays.
	Tango::DevLong	pulsetime;
	//	Resetrelay:	name of the reset relay.
	string	resetrelay;
	//	Stateonnum:	number of the interlock relay used to determine whether the device
	//  is on or not.
	Tango::DevDouble	stateonnum;
	//	Statepermnum:	Daresbury relay number which indicates if the device is allowed
	//  to be switched On.
	Tango::DevDouble	statepermnum;
	//	VPFN_adc:	ADC device to get the VPFN value.
	string	vPFN_adc;
	//	VPFN_dac:	DAC device used to set VPFN.
	string	vPFN_dac;

//	Attribute data members
public:
	Tango::DevDouble	*attr_VPFN_read;
	Tango::DevDouble	*attr_Delay_read;
	Tango::DevDouble	*attr_DelayS_read;
	Tango::DevDouble	*attr_KlystronPeakI_read;
	Tango::DevDouble	*attr_KlystronPeakV_read;
	Tango::DevDouble	*attr_PeakPowerIn_read;
	Tango::DevDouble	*attr_PeakPowerOut_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	LinacModulator(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	LinacModulator(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	LinacModulator(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~LinacModulator() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();


//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : LinacModulator::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);
	//--------------------------------------------------------
	/*
	 *	Method      : LinacModulator::write_attr_hardware()
	 *	Description : Hardware writing for attributes.
	 */
	//--------------------------------------------------------
	virtual void write_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute VPFN related methods
 *	Description: Voltage Pulse Forming Network.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_VPFN(Tango::Attribute &attr);
	virtual void write_VPFN(Tango::WAttribute &attr);
	virtual bool is_VPFN_allowed(Tango::AttReqType type);
/**
 *	Attribute Delay related methods
 *	Description: Delay
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_Delay(Tango::Attribute &attr);
	virtual void write_Delay(Tango::WAttribute &attr);
	virtual bool is_Delay_allowed(Tango::AttReqType type);
/**
 *	Attribute DelayS related methods
 *	Description: DelayS
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_DelayS(Tango::Attribute &attr);
	virtual void write_DelayS(Tango::WAttribute &attr);
	virtual bool is_DelayS_allowed(Tango::AttReqType type);
/**
 *	Attribute KlystronPeakI related methods
 *	Description: Klystron Peak current
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_KlystronPeakI(Tango::Attribute &attr);
	virtual bool is_KlystronPeakI_allowed(Tango::AttReqType type);
/**
 *	Attribute KlystronPeakV related methods
 *	Description: Klystron Peak Voltage
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_KlystronPeakV(Tango::Attribute &attr);
	virtual bool is_KlystronPeakV_allowed(Tango::AttReqType type);
/**
 *	Attribute PeakPowerIn related methods
 *	Description: Peak Power In
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_PeakPowerIn(Tango::Attribute &attr);
	virtual bool is_PeakPowerIn_allowed(Tango::AttReqType type);
/**
 *	Attribute PeakPowerOut related methods
 *	Description: Peak Power Out.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_PeakPowerOut(Tango::Attribute &attr);
	virtual bool is_PeakPowerOut_allowed(Tango::AttReqType type);


	//--------------------------------------------------------
	/**
	 *	Method      : LinacModulator::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:
	/**
	 *	Command State related method
	 *	Description: This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
	 *
	 *	@returns State Code
	 */
	virtual Tango::DevState dev_state();
	/**
	 *	Command Status related method
	 *	Description: This command gets the device status (stored in its <i>device_status</i> data member) and returns it to the caller.
	 *
	 *	@returns Status description
	 */
	virtual Tango::ConstDevString dev_status();
	/**
	 *	Command On related method
	 *	Description: 
	 *
	 */
	virtual void on();
	virtual bool is_On_allowed(const CORBA::Any &any);
	/**
	 *	Command Off related method
	 *	Description: 
	 *
	 */
	virtual void off();
	virtual bool is_Off_allowed(const CORBA::Any &any);
	/**
	 *	Command Reset related method
	 *	Description: 
	 *
	 */
	virtual void reset();
	virtual bool is_Reset_allowed(const CORBA::Any &any);
	/**
	 *	Command TimingOn related method
	 *	Description: Switch on the timing devices.
	 *
	 */
	virtual void timing_on();
	virtual bool is_TimingOn_allowed(const CORBA::Any &any);
	/**
	 *	Command SoftOn related method
	 *	Description: Specify that we would like to reach On state.
	 *               Do not execute Pulse command on the OnRelay.
	 *
	 */
	virtual void soft_on();
	virtual bool is_SoftOn_allowed(const CORBA::Any &any);
	/**
	 *	Command SoftOff related method
	 *	Description: Specify that we would like to reach OFF state.
	 *               do not execute Pulse command on the OffRelay.
	 *
	 */
	virtual void soft_off();
	virtual bool is_SoftOff_allowed(const CORBA::Any &any);


	//--------------------------------------------------------
	/**
	 *	Method      : LinacModulator::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(LinacModulator::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes
protected :	
#ifndef SIMU
	devserver delay_tacods;
	devserver delayS_tacods;
#endif
	Tango::DeviceProxy * daresburyds;
	Tango::DeviceProxy * OffRelayds;
	Tango::DeviceProxy * OnRelayds;
	Tango::DeviceProxy * ResetRelayds;
	Tango::DeviceProxy * klystPeakIadcds;
	Tango::DeviceProxy * klystPeakVadcds;
	Tango::DeviceProxy * peakPowerInadcds;
	Tango::DeviceProxy * peakPowerOutadcds;
	Tango::DeviceProxy * VPFNadcds;
	Tango::DeviceProxy * VPFNdacds;	
	vector<Tango::DevLong> interlocks;
	vector<unsigned char> intlk_states;
	vector<string> intlk_desc;
	string thestatus;
	Tango::DevState n_state;
	Tango::DevState thestate;
	struct timespec pulsewaittime;
#ifndef SIMU
	DevShort Delay_State;
	DevShort DelayS_State;
#endif
	bool tacoDelay_imported;
	bool tacoDelayS_imported;
	void importTacoDevices();
	void freeTacoDevices();
	void read_adc_val(Tango::DeviceProxy * adcds,Tango::DevDouble *readval);
	void update_setval(Tango::DeviceProxy * dacds,const char* attr_name,Tango::DevDouble *setvalue);
	void write_dac_val(Tango::DeviceProxy * dacds,Tango::DevDouble setvalue);
	void evalue_state();

/*----- PROTECTED REGION END -----*/	//	LinacModulator::Additional Method prototypes
};

/*----- PROTECTED REGION ID(LinacModulator::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions

/*----- PROTECTED REGION END -----*/	//	LinacModulator::Additional Classes Definitions

}	//	End of namespace

#endif   //	LinacModulator_H
