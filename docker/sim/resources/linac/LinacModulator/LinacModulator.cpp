/*----- PROTECTED REGION ID(LinacModulator.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        LinacModulator.cpp
//
// description : C++ source for the LinacModulator class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               LinacModulator are implemented in this file.
//
// project :     LinacModulator
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <tango.h>
#include <LinacModulator.h>
#include <LinacModulatorClass.h>

/*----- PROTECTED REGION END -----*/	//	LinacModulator.cpp

/**
 *  LinacModulator class description:
 *    The linac is equiped with two identical modulators, supplying two klystrons
 *    with the power necessary for the two 6 meters accelerating sections,
 *    and for the buncher.
 *    The klystrons are multicavity amplifiers.
 *    The two modulators are line type with a Pulse Forming Network (PFN)
 *    short circuited by a thyratron through the primary of a pulse transformer.
 *    The secondary of this transformer supplies the klystron cathode
 *    with a 280kV pulse.
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  dev_state
//  Status        |  dev_status
//  On            |  on
//  Off           |  off
//  Reset         |  reset
//  TimingOn      |  timing_on
//  SoftOn        |  soft_on
//  SoftOff       |  soft_off
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  VPFN           |  Tango::DevDouble	Scalar
//  Delay          |  Tango::DevDouble	Scalar
//  DelayS         |  Tango::DevDouble	Scalar
//  KlystronPeakI  |  Tango::DevDouble	Scalar
//  KlystronPeakV  |  Tango::DevDouble	Scalar
//  PeakPowerIn    |  Tango::DevDouble	Scalar
//  PeakPowerOut   |  Tango::DevDouble	Scalar
//================================================================

namespace LinacModulator_ns
{
/*----- PROTECTED REGION ID(LinacModulator::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	LinacModulator::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : LinacModulator::LinacModulator()
 *	Description : Constructors for a Tango device
 *                implementing the classLinacModulator
 */
//--------------------------------------------------------
LinacModulator::LinacModulator(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(LinacModulator::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	LinacModulator::constructor_1
}
//--------------------------------------------------------
LinacModulator::LinacModulator(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(LinacModulator::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	LinacModulator::constructor_2
}
//--------------------------------------------------------
LinacModulator::LinacModulator(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(LinacModulator::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	LinacModulator::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : LinacModulator::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void LinacModulator::delete_device()
{
	DEBUG_STREAM << "LinacModulator::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacModulator::delete_device) ENABLED START -----*/
	
	//	Delete device allocated objects
	//	Delete device's allocated object
	delete attr_VPFN_read;
	delete attr_Delay_read;
	delete attr_DelayS_read;
	delete attr_KlystronPeakI_read;
	delete attr_KlystronPeakV_read;
	delete attr_PeakPowerIn_read;
	delete attr_PeakPowerOut_read;
#ifndef SIMU
	delete daresburyds;
	delete OffRelayds;
	delete OnRelayds;
	delete ResetRelayds;
	delete klystPeakIadcds;
	delete klystPeakVadcds;
	delete peakPowerInadcds;
	delete peakPowerOutadcds;
	delete VPFNadcds;
	delete VPFNdacds;
	freeTacoDevices();
#endif

	/*----- PROTECTED REGION END -----*/	//	LinacModulator::delete_device
}

//--------------------------------------------------------
/**
 *	Method      : LinacModulator::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void LinacModulator::init_device()
{
	DEBUG_STREAM << "LinacModulator::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacModulator::init_device_before) ENABLED START -----*/
	
	//	Initialization before get_device_property() call
		tacoDelay_imported = false;
	tacoDelayS_imported = false;


	/*----- PROTECTED REGION END -----*/	//	LinacModulator::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	
	/*----- PROTECTED REGION ID(LinacModulator::init_device) ENABLED START -----*/
	
	//	Initialize device
	pulsewaittime.tv_sec = pulsetime / 1000;
	pulsewaittime.tv_nsec = (pulsetime%1000) * 1000000;
	n_state = Tango::ON;
	if((delay_name == "NOT YET INITIALISED") || (delayS_name == "NOT YET INITIALISED"))
	{
		Tango::Except::throw_exception
		(
		(const char *) "DelayNamePropertyNotSet",
		(const char *) "Delay_name and DelayS_name properties must be set",
		(const char *) "LinacModulator::get_device_property()"
		);
	}
	attr_VPFN_read = new Tango::DevDouble;
	attr_Delay_read = new Tango::DevDouble;
	attr_DelayS_read = new Tango::DevDouble;
	attr_KlystronPeakI_read = new Tango::DevDouble;
	attr_KlystronPeakV_read = new Tango::DevDouble;
	attr_PeakPowerIn_read = new Tango::DevDouble;
	attr_PeakPowerOut_read = new Tango::DevDouble;
#ifdef SIMU
	*attr_VPFN_read = -2.37;
	*attr_Delay_read = 58.20;
	*attr_DelayS_read = 2.00;
	*attr_KlystronPeakI_read = 2.3;
	*attr_KlystronPeakV_read = -1.7;
	*attr_PeakPowerIn_read = 3.44;
	*attr_PeakPowerOut_read = 0.25;
	set_state(Tango::ON);
	thestate = Tango::ON;
#else
	thestate = Tango::UNKNOWN;
	daresburyds = new Tango::DeviceProxy(daresbury.c_str());
	OffRelayds = new Tango::DeviceProxy(offrelay.c_str());
	OnRelayds = new Tango::DeviceProxy(onrelay.c_str());
	ResetRelayds = new Tango::DeviceProxy(resetrelay.c_str());
	klystPeakIadcds = new Tango::DeviceProxy(klystPeakI_adc.c_str());
	klystPeakVadcds = new Tango::DeviceProxy(klystPeakV_adc.c_str());
	peakPowerInadcds = new Tango::DeviceProxy(peakPowerIn_adc.c_str());
	peakPowerOutadcds = new Tango::DeviceProxy(peakPowerOut_adc.c_str());
	VPFNadcds = new Tango::DeviceProxy(vPFN_adc.c_str());
	VPFNdacds = new Tango::DeviceProxy(vPFN_dac.c_str());
	// set transparency reconnection to true
	try{daresburyds->set_transparency_reconnection(true);}
	catch(Tango::DevFailed &e){ Tango::Except::print_exception(e);}
	try{OnRelayds->set_transparency_reconnection(true);}
	catch(Tango::DevFailed &e){ Tango::Except::print_exception(e);}
	try{OffRelayds->set_transparency_reconnection(true);}
	catch(Tango::DevFailed &e){ Tango::Except::print_exception(e);}
	try{ResetRelayds->set_transparency_reconnection(true);}
	catch(Tango::DevFailed &e){ Tango::Except::print_exception(e);}
	try{klystPeakIadcds->set_transparency_reconnection(true);}
	catch(Tango::DevFailed &e){ Tango::Except::print_exception(e);}
	try{klystPeakVadcds->set_transparency_reconnection(true);}
	catch(Tango::DevFailed &e){ Tango::Except::print_exception(e);}
	try{peakPowerInadcds->set_transparency_reconnection(true);}
	catch(Tango::DevFailed &e){ Tango::Except::print_exception(e);}
	try{peakPowerOutadcds->set_transparency_reconnection(true);}
	catch(Tango::DevFailed &e){ Tango::Except::print_exception(e);}
	try{VPFNadcds->set_transparency_reconnection(true);}
	catch(Tango::DevFailed &e){ Tango::Except::print_exception(e);}
	try{VPFNdacds->set_transparency_reconnection(true);}
	catch(Tango::DevFailed &e){ Tango::Except::print_exception(e);}
	// initilialise interlocks variable
	Tango::DevLong module,num;
	double numtmp;
	interlocks.clear();
	module = (Tango::DevLong) stateonnum;
	numtmp = stateonnum *10;
	num = (Tango::DevLong)numtmp % 10;
	module = module - 1;
	num = (num -1) * 2;
	interlocks.push_back(module);
	interlocks.push_back(num);
	module = (Tango::DevLong) statepermnum;
	numtmp = statepermnum *10;
	num = (Tango::DevLong)numtmp % 10;
	module = module - 1;
	num = (num -1) * 2;
	interlocks.push_back(module);
	interlocks.push_back(num);	
	for(unsigned int j=0;j<interlocks_list.size();j++)
	{
		module = (Tango::DevLong) interlocks_list[j];
		numtmp =  interlocks_list[j]*10;
		num = (Tango::DevLong)numtmp % 10;
		module = module - 1;
		num = (num -1) * 2;
		interlocks.push_back(module);
		interlocks.push_back(num);
	}
	// get interlocks descriptions
	Tango::DeviceData argin;
	try
	{
		argin << interlocks;
		Tango::DeviceData ans = daresburyds->command_inout("GetInterlockDescription",argin);
		ans >> intlk_desc;
		for(unsigned int i=0;i<intlk_desc.size();i++)
			DEBUG_STREAM << "intlk_desc[" << i << "] = " << intlk_desc[i] << endl;
	}
	catch(Tango::DevFailed &e)
	{
		ERROR_STREAM << "Could not get Interlocks Description. Is the Daresbury server well running?" << endl;
		throw;
	}
#endif
	// import Taco devices
	importTacoDevices();
	// initialize write values to the read values
	Tango::MultiAttribute		*attr_list;
	attr_list = get_device_attr();
	Tango::WAttribute	&attr_delay = attr_list->get_w_attr_by_name ("Delay");
	Tango::WAttribute	&attr_delayS = attr_list->get_w_attr_by_name ("DelayS");
	read_Delay(attr_delay);
	read_DelayS(attr_delayS);

	/*----- PROTECTED REGION END -----*/	//	LinacModulator::init_device
}

//--------------------------------------------------------
/**
 *	Method      : LinacModulator::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void LinacModulator::get_device_property()
{
	/*----- PROTECTED REGION ID(LinacModulator::get_device_property_before) ENABLED START -----*/
	
	//	Initialize property data members
	daresbury		= "elin/intlk/0";
	delay_name		= "NOT YET INITIALISED";
	delayS_name		= "NOT YET INITIALISED";
	interlocks_list.clear();
	offrelay 		= "ELIN/R-MOD/OFF";
	onrelay 			= "ELIN/R-MOD/ON";
	pulsetime 		= 1000;
	resetrelay		= "ELIN/R-MOD/RESET";
	stateonnum		= 11.3;
	statepermnum 	= 12.1;

	/*----- PROTECTED REGION END -----*/	//	LinacModulator::get_device_property_before


	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("Daresbury"));
	dev_prop.push_back(Tango::DbDatum("Delay_name"));
	dev_prop.push_back(Tango::DbDatum("DelayS_name"));
	dev_prop.push_back(Tango::DbDatum("Interlocks_list"));
	dev_prop.push_back(Tango::DbDatum("KlystPeakI_adc"));
	dev_prop.push_back(Tango::DbDatum("KlystPeakV_adc"));
	dev_prop.push_back(Tango::DbDatum("Offrelay"));
	dev_prop.push_back(Tango::DbDatum("Onrelay"));
	dev_prop.push_back(Tango::DbDatum("PeakPowerIn_adc"));
	dev_prop.push_back(Tango::DbDatum("PeakPowerOut_adc"));
	dev_prop.push_back(Tango::DbDatum("Pulsetime"));
	dev_prop.push_back(Tango::DbDatum("Resetrelay"));
	dev_prop.push_back(Tango::DbDatum("Stateonnum"));
	dev_prop.push_back(Tango::DbDatum("Statepermnum"));
	dev_prop.push_back(Tango::DbDatum("VPFN_adc"));
	dev_prop.push_back(Tango::DbDatum("VPFN_dac"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on LinacModulatorClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		LinacModulatorClass	*ds_class =
			(static_cast<LinacModulatorClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize Daresbury from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  daresbury;
		else {
			//	Try to initialize Daresbury from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  daresbury;
		}
		//	And try to extract Daresbury value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  daresbury;

		//	Try to initialize Delay_name from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  delay_name;
		else {
			//	Try to initialize Delay_name from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  delay_name;
		}
		//	And try to extract Delay_name value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  delay_name;

		//	Try to initialize DelayS_name from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  delayS_name;
		else {
			//	Try to initialize DelayS_name from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  delayS_name;
		}
		//	And try to extract DelayS_name value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  delayS_name;

		//	Try to initialize Interlocks_list from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  interlocks_list;
		else {
			//	Try to initialize Interlocks_list from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  interlocks_list;
		}
		//	And try to extract Interlocks_list value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  interlocks_list;

		//	Try to initialize KlystPeakI_adc from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  klystPeakI_adc;
		else {
			//	Try to initialize KlystPeakI_adc from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  klystPeakI_adc;
		}
		//	And try to extract KlystPeakI_adc value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  klystPeakI_adc;

		//	Try to initialize KlystPeakV_adc from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  klystPeakV_adc;
		else {
			//	Try to initialize KlystPeakV_adc from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  klystPeakV_adc;
		}
		//	And try to extract KlystPeakV_adc value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  klystPeakV_adc;

		//	Try to initialize Offrelay from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  offrelay;
		else {
			//	Try to initialize Offrelay from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  offrelay;
		}
		//	And try to extract Offrelay value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  offrelay;

		//	Try to initialize Onrelay from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  onrelay;
		else {
			//	Try to initialize Onrelay from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  onrelay;
		}
		//	And try to extract Onrelay value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  onrelay;

		//	Try to initialize PeakPowerIn_adc from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  peakPowerIn_adc;
		else {
			//	Try to initialize PeakPowerIn_adc from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  peakPowerIn_adc;
		}
		//	And try to extract PeakPowerIn_adc value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  peakPowerIn_adc;

		//	Try to initialize PeakPowerOut_adc from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  peakPowerOut_adc;
		else {
			//	Try to initialize PeakPowerOut_adc from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  peakPowerOut_adc;
		}
		//	And try to extract PeakPowerOut_adc value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  peakPowerOut_adc;

		//	Try to initialize Pulsetime from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  pulsetime;
		else {
			//	Try to initialize Pulsetime from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  pulsetime;
		}
		//	And try to extract Pulsetime value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  pulsetime;

		//	Try to initialize Resetrelay from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  resetrelay;
		else {
			//	Try to initialize Resetrelay from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  resetrelay;
		}
		//	And try to extract Resetrelay value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  resetrelay;

		//	Try to initialize Stateonnum from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  stateonnum;
		else {
			//	Try to initialize Stateonnum from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  stateonnum;
		}
		//	And try to extract Stateonnum value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  stateonnum;

		//	Try to initialize Statepermnum from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  statepermnum;
		else {
			//	Try to initialize Statepermnum from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  statepermnum;
		}
		//	And try to extract Statepermnum value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  statepermnum;

		//	Try to initialize VPFN_adc from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  vPFN_adc;
		else {
			//	Try to initialize VPFN_adc from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  vPFN_adc;
		}
		//	And try to extract VPFN_adc value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  vPFN_adc;

		//	Try to initialize VPFN_dac from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  vPFN_dac;
		else {
			//	Try to initialize VPFN_dac from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  vPFN_dac;
		}
		//	And try to extract VPFN_dac value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  vPFN_dac;

	}

	/*----- PROTECTED REGION ID(LinacModulator::get_device_property_after) ENABLED START -----*/
	
	//	Check device property data members init
	TangoSys_OMemStream o;
	for(unsigned int j=0 ; j<interlocks_list.size() ; j++)
	{
		if(j != (interlocks_list.size()-1))
			o << interlocks_list[j] << ",";
		else
			o << interlocks_list[j];
	}
	
	INFO_STREAM << "Daresbury           = " << daresbury 			<< endl;
	INFO_STREAM << "Delay name          = " << delay_name			<< endl;
	INFO_STREAM << "DelayS name         = " << delayS_name		<< endl;
	INFO_STREAM << "interlocks list     = " << o.str()				<< endl;
	INFO_STREAM << "klystron Peak I adc = " << klystPeakI_adc	<< endl;
	INFO_STREAM << "klystron Peak V adc = " << klystPeakV_adc	<< endl;
	INFO_STREAM << "off relay           = " << offrelay			<< endl;
	INFO_STREAM << "on relay            = " << onrelay				<< endl;
	INFO_STREAM << "Peak Power in adc   = " << peakPowerIn_adc	<< endl;	
	INFO_STREAM << "Peak Power Out adc  = " << peakPowerOut_adc	<< endl;
	INFO_STREAM << "pulsetime           = " << pulsetime			<< endl;
	INFO_STREAM << "reset relay         = " << resetrelay			<< endl;
	INFO_STREAM << "stateonnum          = " << stateonnum			<< endl;
	INFO_STREAM << "statepermnum        = " << statepermnum		<< endl;
	INFO_STREAM << "VPFN adc            = " << vPFN_adc			<< endl;
	INFO_STREAM << "VPFN dac            = " << vPFN_dac			<< endl;

	/*----- PROTECTED REGION END -----*/	//	LinacModulator::get_device_property_after
}

//--------------------------------------------------------
/**
 *	Method      : LinacModulator::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void LinacModulator::always_executed_hook()
{
	DEBUG_STREAM << "LinacModulator::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacModulator::always_executed_hook) ENABLED START -----*/
	
	//	code always executed before all requests
	

	/*----- PROTECTED REGION END -----*/	//	LinacModulator::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : LinacModulator::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void LinacModulator::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "LinacModulator::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(LinacModulator::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	//	Add your own code here

	/*----- PROTECTED REGION END -----*/	//	LinacModulator::read_attr_hardware
}
//--------------------------------------------------------
/**
 *	Method      : LinacModulator::write_attr_hardware()
 *	Description : Hardware writing for attributes
 */
//--------------------------------------------------------
void LinacModulator::write_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "LinacModulator::write_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(LinacModulator::write_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	LinacModulator::write_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute VPFN related method
 *	Description: Voltage Pulse Forming Network.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LinacModulator::read_VPFN(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LinacModulator::read_VPFN(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LinacModulator::read_VPFN) ENABLED START -----*/
	read_adc_val(VPFNadcds,attr_VPFN_read);
	attr.set_value(attr_VPFN_read);
#ifndef SIMU
	update_setval(VPFNdacds,"VPFN",&attr_VPFN_write);
#endif
	/*----- PROTECTED REGION END -----*/	//	LinacModulator::read_VPFN
}
//--------------------------------------------------------
/**
 *	Write attribute VPFN related method
 *	Description: Voltage Pulse Forming Network.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LinacModulator::write_VPFN(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LinacModulator::write_VPFN(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LinacModulator::write_VPFN) ENABLED START -----*/
#ifdef SIMU
	*attr_VPFN_read = w_val;
#else
	write_dac_val(VPFNdacds,w_val);
#endif

	/*----- PROTECTED REGION END -----*/	//	LinacModulator::write_VPFN
}
//--------------------------------------------------------
/**
 *	Read attribute Delay related method
 *	Description: Delay
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LinacModulator::read_Delay(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LinacModulator::read_Delay(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LinacModulator::read_Delay) ENABLED START -----*/
	#ifndef SIMU
	if(tacoDelay_imported == false)
	{
		// Taco device not imported
		// try to import it
		cout << "delay device name = " << delay_name << endl;
		long error;
		int status = dev_import((char*) delay_name.c_str(),0,&delay_tacods,&error);
		if(status == 0)
		{
			tacoDelay_imported = true;
			INFO_STREAM << "delay taco device " << delay_name << " successfully imported" << endl;
		}
		else
		{
			tacoDelay_imported = false;
			char *p_err = dev_error_str(error);
			cerr << "delay taco device " << delay_name <<" import failure: " << p_err << endl;
			ERROR_STREAM <<p_err << endl;
			free(p_err);
			TangoSys_OMemStream o;
			o << "Taco device " << delay_name << ": " << dev_error_str(error) << ends;
			Tango::Except::throw_exception 
			((const char *)"UnableToReadDelay",
			o.str(),
			(const char *)"LinacModulator::read_Delay()");
		}
	}
	long tacostatus;
	long tacoerror;
	Tango::DevDouble setdelay;
	DevStateFloatReadPoint tacodelay;
	tacostatus = dev_putget(delay_tacods,DevUpdate,NULL,D_VOID_TYPE,&tacodelay,
									D_STATE_FLOAT_READPOINT,&tacoerror);
	if(tacostatus == DS_OK)
	{
		*attr_Delay_read = tacodelay.read;
		Delay_State = tacodelay.state;
		setdelay = tacodelay.set;
	}
	else
	{
		char *p_err;
		p_err = dev_error_str(tacoerror);
		ERROR_STREAM << "LinacModulator::read_Delay: Unable to read delay." << p_err << endl;
		free(p_err);
		TangoSys_OMemStream o;
		o << "Taco device " << delay_name << ": " << dev_error_str(tacoerror) << ends;
		Tango::Except::throw_exception 
			((const char *)"UnableToReadDelay",
			o.str(),
			(const char *)"LinacModulator::read_Delay()");
	}
	// update the current attribute set value
	Tango::MultiAttribute		*attr_list;
	attr_list = get_device_attr();
	Tango::WAttribute	&attr_delay = attr_list->get_w_attr_by_name ("Delay");
	attr_delay.set_write_value(setdelay);
#endif
	attr.set_value(attr_Delay_read);

	/*----- PROTECTED REGION END -----*/	//	LinacModulator::read_Delay
}
//--------------------------------------------------------
/**
 *	Write attribute Delay related method
 *	Description: Delay
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LinacModulator::write_Delay(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LinacModulator::write_Delay(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LinacModulator::write_Delay) ENABLED START -----*/
#ifdef SIMU
	*attr_Delay_read = w_val;
#else
	if(tacoDelay_imported == false)
	{
		// Taco device not imported
		// try to import it
		cout << "delay device name = " << delay_name << endl;
		long error;
		int status = dev_import((char*) delay_name.c_str(),0,&delay_tacods,&error);
		if(status == 0)
		{
			tacoDelay_imported = true;
			INFO_STREAM << "delay taco device " << delay_name << " successfully imported" << endl;
		}
		else
		{
			tacoDelay_imported = false;
			char *p_err = dev_error_str(error);
			cerr << "delay taco device " << delay_name <<" import failure: " << p_err << endl;
			ERROR_STREAM <<p_err << endl;
			free(p_err);
			TangoSys_OMemStream o;
			o << "Taco device " << delay_name << ": " << dev_error_str(error) << ends;
			Tango::Except::throw_exception 
			((const char *)"UnableToSetDelay",
			o.str(),
			(const char *)"LinacModulator::write_Delay()");
		}
	}
	DevFloat setdelay = w_val;
	long tacostatus;
	long tacoerror;
	tacostatus=dev_putget(delay_tacods,DevSetValue,&setdelay,D_FLOAT_TYPE,NULL,D_VOID_TYPE,&tacoerror);
	if(tacostatus != DS_OK)
	{
		char *p_err;
		p_err = dev_error_str(tacoerror);
		ERROR_STREAM << "LinacModulator::write_Delay: Unable to set delay." << p_err << endl;
		free(p_err);
		TangoSys_OMemStream o;
		o << "Taco device " << delay_name << ": " << dev_error_str(tacoerror) << ends;
		Tango::Except::throw_exception 
			((const char *)"UnableToSetDelay",
			o.str(),
			(const char *)"LinacModulator::write_Delay()");
	}
#endif

	/*----- PROTECTED REGION END -----*/	//	LinacModulator::write_Delay
}
//--------------------------------------------------------
/**
 *	Read attribute DelayS related method
 *	Description: DelayS
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LinacModulator::read_DelayS(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LinacModulator::read_DelayS(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LinacModulator::read_DelayS) ENABLED START -----*/
	#ifndef SIMU
	if(tacoDelayS_imported == false)
	{
		// Taco device not imported
		// try to import it
		cout << "delayS device name = " << delayS_name << endl;
		long error;
		int status = dev_import((char*) delayS_name.c_str(),0,&delayS_tacods,&error);
		if(status == 0)
		{
			tacoDelayS_imported = true;
			INFO_STREAM << "delayS taco device " << delayS_name << " successfully imported" << endl;
		}
		else
		{
			tacoDelayS_imported = false;
			char *p_err = dev_error_str(error);
			cerr << "delayS taco device " << delayS_name <<" import failure: " << p_err << endl;
			ERROR_STREAM <<p_err << endl;
			free(p_err);
			TangoSys_OMemStream o;
			o << "Taco device " << delayS_name << ": " << dev_error_str(error) << ends;
			Tango::Except::throw_exception 
			((const char *)"UnableToReadDelay",
			o.str(),
			(const char *)"LinacModulator::read_DelayS()");
		}
	}
	long tacostatus;
	long tacoerror;
	Tango::DevDouble setdelay;
	DevStateFloatReadPoint tacodelay;
	tacostatus = dev_putget(delayS_tacods,DevUpdate,NULL,D_VOID_TYPE,&tacodelay,
									D_STATE_FLOAT_READPOINT,&tacoerror);
	if(tacostatus == DS_OK)
	{
		*attr_DelayS_read = tacodelay.read;
		DelayS_State = tacodelay.state;
		setdelay = tacodelay.set;
	}
	else
	{
		char *p_err;
		p_err = dev_error_str(tacoerror);
		ERROR_STREAM << "LinacModulator::read_DelayS: Unable to read delay." << p_err << endl;
		free(p_err);
		TangoSys_OMemStream o;
			o << "Taco device " << delayS_name << ": " << dev_error_str(tacoerror) << ends;
		Tango::Except::throw_exception 
			((const char *)"UnableToReadDelay",
			o.str(),
			(const char *)"LinacModulator::read_DelayS()");
	}
	// update the current attribute set value
	Tango::MultiAttribute		*attr_list;
	attr_list = get_device_attr();
	Tango::WAttribute	&attr_delayS = attr_list->get_w_attr_by_name ("DelayS");
	attr_delayS.set_write_value(setdelay);
#endif
	attr.set_value(attr_DelayS_read);

	/*----- PROTECTED REGION END -----*/	//	LinacModulator::read_DelayS
}
//--------------------------------------------------------
/**
 *	Write attribute DelayS related method
 *	Description: DelayS
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LinacModulator::write_DelayS(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LinacModulator::write_DelayS(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LinacModulator::write_DelayS) ENABLED START -----*/
#ifdef SIMU
	*attr_DelayS_read = w_val;
#else
	if(tacoDelayS_imported == false)
	{
		// Taco device not imported
		// try to import it
		cout << "delayS device name = " << delayS_name << endl;
		long error;
		int status = dev_import((char*) delayS_name.c_str(),0,&delayS_tacods,&error);
		if(status == 0)
		{
			tacoDelayS_imported = true;
			INFO_STREAM << "delayS taco device " << delayS_name << " successfully imported" << endl;
		}
		else
		{
			tacoDelayS_imported = false;
			char *p_err = dev_error_str(error);
			cerr << "delayS taco device " << delayS_name <<" import failure: " << p_err << endl;
			ERROR_STREAM <<p_err << endl;
			free(p_err);
			TangoSys_OMemStream o;
			o << "Taco device " << delayS_name << ": " << dev_error_str(error) << ends;
			Tango::Except::throw_exception 
			((const char *)"UnableToSetDelayS",
			o.str(),
			(const char *)"LinacModulator::write_DelayS()");
		}
	}
	DevFloat setdelay = w_val;
	long tacostatus;
	long tacoerror;
	tacostatus=dev_putget(delayS_tacods,DevSetValue,&setdelay,D_FLOAT_TYPE,NULL,D_VOID_TYPE,&tacoerror);
	if(tacostatus != DS_OK)
	{
		char *p_err;
		p_err = dev_error_str(tacoerror);
		ERROR_STREAM << "LinacModulator::write_DelayS: Unable to set delayS." << p_err << endl;
		free(p_err);
		TangoSys_OMemStream o;
		o << "Taco device " << delayS_name << ": " << dev_error_str(tacoerror) << ends;
		Tango::Except::throw_exception 
			((const char *)"UnableToSetDelayS",
			o.str(),
			(const char *)"LinacModulator::write_DelayS()");
	}
#endif

	/*----- PROTECTED REGION END -----*/	//	LinacModulator::write_DelayS
}
//--------------------------------------------------------
/**
 *	Read attribute KlystronPeakI related method
 *	Description: Klystron Peak current
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LinacModulator::read_KlystronPeakI(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LinacModulator::read_KlystronPeakI(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LinacModulator::read_KlystronPeakI) ENABLED START -----*/
	read_adc_val(klystPeakIadcds,attr_KlystronPeakI_read);
	attr.set_value(attr_KlystronPeakI_read);

	/*----- PROTECTED REGION END -----*/	//	LinacModulator::read_KlystronPeakI
}
//--------------------------------------------------------
/**
 *	Read attribute KlystronPeakV related method
 *	Description: Klystron Peak Voltage
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LinacModulator::read_KlystronPeakV(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LinacModulator::read_KlystronPeakV(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LinacModulator::read_KlystronPeakV) ENABLED START -----*/
	read_adc_val(klystPeakVadcds,attr_KlystronPeakV_read);
	attr.set_value(attr_KlystronPeakV_read);

	/*----- PROTECTED REGION END -----*/	//	LinacModulator::read_KlystronPeakV
}
//--------------------------------------------------------
/**
 *	Read attribute PeakPowerIn related method
 *	Description: Peak Power In
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LinacModulator::read_PeakPowerIn(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LinacModulator::read_PeakPowerIn(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LinacModulator::read_PeakPowerIn) ENABLED START -----*/
	read_adc_val(peakPowerInadcds,attr_PeakPowerIn_read);
	attr.set_value(attr_PeakPowerIn_read);

	/*----- PROTECTED REGION END -----*/	//	LinacModulator::read_PeakPowerIn
}
//--------------------------------------------------------
/**
 *	Read attribute PeakPowerOut related method
 *	Description: Peak Power Out.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LinacModulator::read_PeakPowerOut(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LinacModulator::read_PeakPowerOut(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LinacModulator::read_PeakPowerOut) ENABLED START -----*/
	if((get_state() == Tango::ON) || (get_state()==Tango::UNKNOWN))
		read_adc_val(peakPowerOutadcds,attr_PeakPowerOut_read);
	else
		*attr_PeakPowerOut_read = 0; // When modulator is OFF, PeakPowerOut attribute is not usefull
		// put it to 0
	attr.set_value(attr_PeakPowerOut_read);

	/*----- PROTECTED REGION END -----*/	//	LinacModulator::read_PeakPowerOut
}

//--------------------------------------------------------
/**
 *	Method      : LinacModulator::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void LinacModulator::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(LinacModulator::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
	/*----- PROTECTED REGION END -----*/	//	LinacModulator::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command State related method
 *	Description: This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
 *
 *	@returns State Code
 */
//--------------------------------------------------------
Tango::DevState LinacModulator::dev_state()
{
	DEBUG_STREAM << "LinacModulator::State()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacModulator::dev_state) ENABLED START -----*/
	
	Tango::DevState	argout = Tango::UNKNOWN; // replace by your own algorithm
	//	Add your own code
	evalue_state();
        argout = DeviceImpl::dev_state();

	/*----- PROTECTED REGION END -----*/	//	LinacModulator::dev_state
	set_state(argout);    // Give the state to Tango.
	if (argout!=Tango::ALARM)
		DeviceImpl::dev_state();
	return get_state();  // Return it after Tango management.
}
//--------------------------------------------------------
/**
 *	Command Status related method
 *	Description: This command gets the device status (stored in its <i>device_status</i> data member) and returns it to the caller.
 *
 *	@returns Status description
 */
//--------------------------------------------------------
Tango::ConstDevString LinacModulator::dev_status()
{
	DEBUG_STREAM << "LinacModulator::Status()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacModulator::dev_status) ENABLED START -----*/
	
	string	status = "Device is OK";
	//	Add your own code
	dev_state();
#ifndef SIMU
	switch(thestate)
	{
	case Tango::UNKNOWN:
		thestatus = "Interlock status not readable !";
		break;
	case Tango::OFF:
		thestatus = intlk_desc[0];
		break;
	case Tango::ON:
		thestatus = "ON";
		break;
	case Tango::DISABLE:
		thestatus = "Can' t be switch on while : \n";
		for(unsigned int i=1; i<intlk_states.size() ; i++)
		{
			if(intlk_states[i] == 0)
			{
				thestatus += intlk_desc[i];
				thestatus += "\n";
			}
		}
		break;
	case Tango::FAULT:
		thestatus = "";
		for(unsigned int i=2; i<intlk_states.size() ; i++)
		{
			if(intlk_states[i] == 0)
			{
				thestatus += intlk_desc[i];
				thestatus += "\n";
			}
		}
		break;
	default:
		break;
	}
	set_status(thestatus.c_str());
#endif
	/*----- PROTECTED REGION END -----*/	//	LinacModulator::dev_status
	set_status(status);               // Give the status to Tango.
	return DeviceImpl::dev_status();  // Return it.
}
//--------------------------------------------------------
/**
 *	Command On related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void LinacModulator::on()
{
	DEBUG_STREAM << "LinacModulator::On()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacModulator::on) ENABLED START -----*/
	
	//	Add your own code
	struct timespec waittime;
	struct timespec remtime;
	
	DEBUG_STREAM << "LinacModulator::on(): entering... !" << endl;

	//	Add your own code to control device here
#ifdef SIMU
	set_state(Tango::ON);
	thestate = Tango::ON;
#else
	// pulse on the reset relay
	try
	{
		ResetRelayds->command_inout("close");
	}
	catch(...)
	{
		ERROR_STREAM << "LinacModulator::on():Error activating the Reset pulsed relay (close command)" << resetrelay.c_str() <<  endl;
	}
	waittime = pulsewaittime;
	while ((nanosleep(&waittime,&remtime) == -1) && (errno == EINTR))
				waittime = remtime;
	try
	{
		ResetRelayds->command_inout("open");
	}
	catch(...)
	{
		ERROR_STREAM << "LinacModulator::on():Error activating the Reset pulsed relay (open command)" << resetrelay.c_str() <<  endl;
	}
	try{	dev_state(); }
	catch(Tango::DevFailed &e){Tango::Except::print_exception(e);}
	if(get_state() == Tango::DISABLE)
	{
		if(intlk_states[1] == 0)
		{
			TangoSys_OMemStream o;
			o << "Can' t be switch on while " << intlk_desc[1] << ends;
			Tango::Except::throw_exception(
			(const char *) "CommandNotAllowed",
			o.str(),
			(const char *) "LinacModulator::on()");
		}
	}
	try
	{
		OnRelayds->command_inout("close");
	}
	catch(...)
	{
		ERROR_STREAM << "LinacModulator::on():Error activating the pulsed relay (close command)" << onrelay.c_str() <<  endl;
		throw;
	}
	waittime = pulsewaittime;
	while ((nanosleep(&waittime,&remtime) == -1) && (errno == EINTR))
				waittime = remtime;
	try
	{
		OnRelayds->command_inout("open");
	}
	catch(...)
	{
		ERROR_STREAM << "LinacModulator::on():Error activating the pulsed relay (open command)" << onrelay.c_str() <<  endl;
		throw;
	}
	n_state = Tango::ON;
#endif

	/*----- PROTECTED REGION END -----*/	//	LinacModulator::on
}
//--------------------------------------------------------
/**
 *	Command Off related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void LinacModulator::off()
{
	DEBUG_STREAM << "LinacModulator::Off()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacModulator::off) ENABLED START -----*/
	
	//	Add your own code
	struct timespec waittime;
	struct timespec remtime;
	
	DEBUG_STREAM << "LinacModulator::off(): entering... !" << endl;

	//	Add your own code to control device here
#ifdef SIMU
	set_state(Tango::OFF);
	thestate = Tango::OFF;
#else
	try
	{
		OffRelayds->command_inout("open");
	}
	catch(...)
	{
		ERROR_STREAM << "LinacModulator::off():Error activating the pulsed relay (open command)" << offrelay.c_str() <<  endl;
		throw;
	}
	waittime = pulsewaittime;
	while ((nanosleep(&waittime,&remtime) == -1) && (errno == EINTR))
				waittime = remtime;
	try
	{
		OffRelayds->command_inout("close");
	}
	catch(...)
	{
		ERROR_STREAM << "LinacModulator::off():Error activating the pulsed relay (close command)" << offrelay.c_str() <<  endl;
		throw;
	}
	n_state = Tango::OFF;
#endif

	/*----- PROTECTED REGION END -----*/	//	LinacModulator::off
}
//--------------------------------------------------------
/**
 *	Command Reset related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void LinacModulator::reset()
{
	DEBUG_STREAM << "LinacModulator::Reset()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacModulator::reset) ENABLED START -----*/
	
	//	Add your own code
	struct timespec waittime;
	struct timespec remtime;

	DEBUG_STREAM << "LinacModulator::reset(): entering... !" << endl;

	//	Add your own code to control device here
#ifdef SIMU
	switch(get_state())
	{
		case Tango::FAULT:
			set_state(Tango::ON);
			thestate = Tango::ON;
			break;
		case Tango::ON:
			set_state(Tango::OFF);
			thestate = Tango::OFF;
			break;
		case Tango::OFF:
			set_state(Tango::DISABLE);
			thestate = Tango::DISABLE;
			break;
		case Tango::DISABLE:
			set_state(Tango::FAULT);
			thestate = Tango::FAULT;
			break;
		default:
			set_state(Tango::ON);
			thestate = Tango::ON;
	}
#else
	// pulse on the reset relay
	try
	{
		ResetRelayds->command_inout("close");
	}
	catch(...)
	{
		ERROR_STREAM << "LinacModulator::reset():Error activating the Reset pulsed relay (close command)" << resetrelay.c_str() <<  endl;
	}
	waittime = pulsewaittime;
	while ((nanosleep(&waittime,&remtime) == -1) && (errno == EINTR))
				waittime = remtime;
	try
	{
		ResetRelayds->command_inout("open");
	}
	catch(...)
	{
		ERROR_STREAM << "LinacModulator::reset():Error activating the Reset pulsed relay (open command)" << resetrelay.c_str() <<  endl;
	}
	
	
	// reset the Daresbury
	try
	{
		daresburyds->command_inout("Reset");
	}
	catch(Tango::DevFailed &e)
	{
		Tango::Except::print_exception(e);
		throw;
	}
	n_state = Tango::OFF;
#endif

	/*----- PROTECTED REGION END -----*/	//	LinacModulator::reset
}
//--------------------------------------------------------
/**
 *	Command TimingOn related method
 *	Description: Switch on the timing devices.
 *
 */
//--------------------------------------------------------
void LinacModulator::timing_on()
{
	DEBUG_STREAM << "LinacModulator::TimingOn()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacModulator::timing_on) ENABLED START -----*/
	
	//	Add your own code
	// this routine does nothing
	// it is here only to be compatible with old versions of the LinacSequencer server

	/*----- PROTECTED REGION END -----*/	//	LinacModulator::timing_on
}
//--------------------------------------------------------
/**
 *	Command SoftOn related method
 *	Description: Specify that we would like to reach On state.
 *               Do not execute Pulse command on the OnRelay.
 *
 */
//--------------------------------------------------------
void LinacModulator::soft_on()
{
	DEBUG_STREAM << "LinacModulator::SoftOn()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacModulator::soft_on) ENABLED START -----*/
	
	//	Add your own code
	#ifdef SIMU
	set_state(Tango::ON);
	thestate = Tango::ON;
#endif
	n_state = Tango::ON;

	/*----- PROTECTED REGION END -----*/	//	LinacModulator::soft_on
}
//--------------------------------------------------------
/**
 *	Command SoftOff related method
 *	Description: Specify that we would like to reach OFF state.
 *               do not execute Pulse command on the OffRelay.
 *
 */
//--------------------------------------------------------
void LinacModulator::soft_off()
{
	DEBUG_STREAM << "LinacModulator::SoftOff()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacModulator::soft_off) ENABLED START -----*/
	
	//	Add your own code
	#ifdef SIMU
	set_state(Tango::OFF);
	thestate = Tango::OFF;
#endif
	n_state = Tango::OFF;

	/*----- PROTECTED REGION END -----*/	//	LinacModulator::soft_off
}
//--------------------------------------------------------
/**
 *	Method      : LinacModulator::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void LinacModulator::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(LinacModulator::add_dynamic_commands) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic commands if any
	
	/*----- PROTECTED REGION END -----*/	//	LinacModulator::add_dynamic_commands
}

/*----- PROTECTED REGION ID(LinacModulator::namespace_ending) ENABLED START -----*/

//	Additional Methods
/*
 * This function import all TACO devices needed by LinacModulator server. Note that with
 * TACO the connexion is stateless. This mean, that almost all connexion are
 * ok, except when device is not declared in TACO resource database. Errors,
 * occurs on dev_putget() command.
 */
void  LinacModulator::importTacoDevices()
{
	DEBUG_STREAM << "LinacModulator::importTacoDevices(): entering... !" << endl;
#ifndef SIMU
	cout << "delay device name = " << delay_name << endl;
	long error;
	int status = dev_import((char*) delay_name.c_str(),0,&delay_tacods,&error);
	if(status == 0)
	{
		tacoDelay_imported = true;
		INFO_STREAM << "delay taco device " << delay_name << " successfully imported" << endl;
	}
	else
	{
		tacoDelay_imported = false;
		char *p_err = dev_error_str(error);
		cerr << "delay taco device " << delay_name <<" import failure: " << p_err << endl;
		ERROR_STREAM <<p_err << endl;
		free(p_err);
	}
	
	cout << "delayS device name = " << delayS_name << endl;
	status = dev_import((char*) delayS_name.c_str(),0,&delayS_tacods,&error);
	if(status == 0)
	{
		tacoDelayS_imported = true;
		INFO_STREAM << "delayS taco device " << delayS_name << " successfully imported" << endl;
	}
	else
	{
		tacoDelayS_imported = false;
		char *p_err = dev_error_str(error);
		cerr << "delayS taco device " << delayS_name <<" import failure: " << p_err << endl;
		ERROR_STREAM <<p_err << endl;
		free(p_err);
	}
#endif
}
/*
 * This function free all TACO devices needed by this server. Note that with
 * TACO the connexion is stateless. This mean, that almost all connexion are
 * ok, except when device is not declared in TACO resource database. Errors,
 * occurs on dev_putget() command.
 */
void  LinacModulator::freeTacoDevices()
{
	DEBUG_STREAM << "LinacModulator::freeTacoDevices(): entering... !" << endl;
#ifndef SIMU
	if(tacoDelay_imported == true)
	{
		long error;
		long status = dev_free(delay_tacods,&error);
		if(status == 0)
		{
			DEBUG_STREAM << "delay taco device " << delay_name << " successfully freed" << endl;
		}
		else
		{
			char *p_err = dev_error_str(error);
			cerr << "delay taco device " << delay_name <<" free failure: " << p_err << endl;
			ERROR_STREAM <<p_err << endl;
			free(p_err);
		}
	}
	
	if(tacoDelayS_imported == true)
	{
		long error;
		long status = dev_free(delayS_tacods,&error);
		if(status == 0)
		{
			DEBUG_STREAM << "delayS taco device " << delayS_name << " successfully freed" << endl;
		}
		else
		{
			char *p_err = dev_error_str(error);
			cerr << "delayS taco device " << delayS_name <<" free failure: " << p_err << endl;
			ERROR_STREAM <<p_err << endl;
			free(p_err);
		}
	}
	
#endif

}
//+------------------------------------------------------------------
/**
 *	method:	LinacModulator::read_adc_val
 *
 *	description:	Get a value from ADC device
 *	This command reads the "Value" Attribute on the device adcds given in parameter
 *
 * readval will be set with the read value
 *
 * This method will throw an exception if it occurs
 *
 */
//+------------------------------------------------------------------
void LinacModulator::read_adc_val(Tango::DeviceProxy * adcds, Tango::DevDouble *readval)
{
#ifndef SIMU
	try
	{
		Tango::DeviceAttribute readattr = adcds->read_attribute("Value");
		readattr >> *readval;
	}
	catch(Tango::DevFailed &e)
	{
		Tango::Except::print_exception(e);
		throw;
	}
#endif
}
//+------------------------------------------------------------------
/**
 *	method:	LinacModulator::update_setval
 *
 *	description:	Get the set value from DAC device
 *	This command reads the set point of the "Value" Attribute on the device dacds given in parameter
 * and set the attr_name attribute write value with this value.
 *
 * setvalue will be set with the set point value read
 *
 * This method will catch Tango::DevFailed exceptions
 *
 */
//+------------------------------------------------------------------
void LinacModulator::update_setval(Tango::DeviceProxy * dacds,const char* attr_name,Tango::DevDouble *setvalue)
{
#ifndef SIMU
// read set value on the dac device
	Tango::DevVarDoubleArray * setval;
	try
	{
		Tango::DeviceAttribute attval = dacds->read_attribute("Value");
		attval >> setval;
		*setvalue = (*setval)[1];
		delete setval;
	}
	catch(Tango::DevFailed &e)
	{
		Tango::Except::print_exception(e);
		return;
	}
	// change set value according to dac device value set point
	Tango::MultiAttribute		*attr_list;
	attr_list = get_device_attr();
	Tango::WAttribute	&myattr = attr_list->get_w_attr_by_name (attr_name);
	try
	{
		myattr.set_write_value(*setvalue);
	}
	catch(Tango::DevFailed &e)
	{
		Tango::Except::print_exception(e);
	}
#endif
}
//+------------------------------------------------------------------
/**
 *	method:	LinacModulator::write_dac_val
 *
 *	description:	write value to DAC device
 *	This command write the "Value" attribute of the DAC device with the setval parameter
 *
 * This method will throw an exception if it occurs
 */
//+------------------------------------------------------------------
void LinacModulator::write_dac_val(Tango::DeviceProxy * dacds,Tango::DevDouble setvalue)
{
#ifndef SIMU
	Tango::DevDouble setval = setvalue;
	Tango::DeviceAttribute setattr("Value",setval);
	try
	{
		dacds->write_attribute(setattr);
	}
	catch (Tango::DevFailed &e)
	{
		Tango::Except::print_exception(e);
		throw;
	}
#endif
}
/*
 * This function will read the interlocks attribute from the Daresbury device server
 * Description:evaluate the state of the device by reading the state of the
 * corresponding  Daresbury relay.
 * the state of the object is directly updated.
 */
void LinacModulator::evalue_state()
{
	DEBUG_STREAM << "LinacModulator::evalue_state(): entering... !" << endl;
#ifndef SIMU
	Tango::DeviceData argin;
	try
	{
		argin << interlocks;
		Tango::DeviceData ans = daresburyds->command_inout("GetInterlockState",argin);
		ans >> intlk_states;
	}
	catch(Tango::DevFailed &e)
	{
		set_state(Tango::UNKNOWN);
		thestate = Tango::UNKNOWN;
		Tango::Except::print_exception(e);
		return;
	}
	for(unsigned int i=0;i<intlk_states.size();i++)
		DEBUG_STREAM << "LinacModulator: intlk_states[" << i << "] = " << intlk_states[i] << endl;

	if(intlk_states[0] == 1)
	{
		set_state(Tango::ON);
		thestate = Tango::ON;
		n_state = Tango::ON;
		return;
	}
	if(intlk_states[1] == 0)
	{
		set_state(Tango::DISABLE);
		thestate = Tango::DISABLE;
		n_state = Tango::OFF;
		return;
	}
	for(unsigned int i=2;i<intlk_states.size();i++)
	{
		if(intlk_states[i] == 0)
		{
			if(n_state == Tango::ON)
			{
				set_state(Tango::FAULT);
				thestate = Tango::FAULT;
			}
			else
			{
				set_state(Tango::DISABLE);
				thestate = Tango::DISABLE;
			}
			return;
		}
	}
	set_state(Tango::OFF);
	thestate = Tango::OFF;
	return;

#endif
}


/*----- PROTECTED REGION END -----*/	//	LinacModulator::namespace_ending
} //	namespace
