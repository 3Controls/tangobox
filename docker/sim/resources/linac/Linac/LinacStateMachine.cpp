/*----- PROTECTED REGION ID(LinacStateMachine.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        LinacStateMachine.cpp
//
// description : State machine file for the Linac class
//
// project :     Linac
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================

#include <Linac.h>

/*----- PROTECTED REGION END -----*/	//	Linac::LinacStateMachine.cpp

//================================================================
//  States   |  Description
//================================================================
//  ON       |  The Linac is ON.
//  STANDBY  |  *
//  INIT     |  Low Heating State
//  OFF      |  The linac is off
//  MOVING   |  *
//  FAULT    |  *
//  UNKNOWN  |  *
//  DISABLE  |  When a sequence failed with errors, the state will be set to DISABLE.
//  ALARM    |  There was an error during the execution of the last sequence.
//           |  The linac is probably in an intermediate state.


namespace Linac_ns
{
//=================================================
//		Attributes Allowed Methods
//=================================================

//--------------------------------------------------------
/**
 *	Method      : Linac::is_File_allowed()
 *	Description : Execution allowed for File attribute
 */
//--------------------------------------------------------
bool Linac::is_File_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

	//	Not any excluded states for File attribute in read access.
	/*----- PROTECTED REGION ID(Linac::FileStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Linac::FileStateAllowed_READ
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Linac::is_SRCT_Limit_allowed()
 *	Description : Execution allowed for SRCT_Limit attribute
 */
//--------------------------------------------------------
bool Linac::is_SRCT_Limit_allowed(TANGO_UNUSED(Tango::AttReqType type))
{
	//	Not any excluded states for SRCT_Limit attribute in Write access.
	/*----- PROTECTED REGION ID(Linac::SRCT_LimitStateAllowed_WRITE) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Linac::SRCT_LimitStateAllowed_WRITE

	//	Not any excluded states for SRCT_Limit attribute in read access.
	/*----- PROTECTED REGION ID(Linac::SRCT_LimitStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Linac::SRCT_LimitStateAllowed_READ
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Linac::is_CT_device_allowed()
 *	Description : Execution allowed for CT_device attribute
 */
//--------------------------------------------------------
bool Linac::is_CT_device_allowed(TANGO_UNUSED(Tango::AttReqType type))
{
	//	Not any excluded states for CT_device attribute in Write access.
	/*----- PROTECTED REGION ID(Linac::CT_deviceStateAllowed_WRITE) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Linac::CT_deviceStateAllowed_WRITE

	//	Not any excluded states for CT_device attribute in read access.
	/*----- PROTECTED REGION ID(Linac::CT_deviceStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Linac::CT_deviceStateAllowed_READ
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Linac::is_CT_Current_allowed()
 *	Description : Execution allowed for CT_Current attribute
 */
//--------------------------------------------------------
bool Linac::is_CT_Current_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

	//	Not any excluded states for CT_Current attribute in read access.
	/*----- PROTECTED REGION ID(Linac::CT_CurrentStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Linac::CT_CurrentStateAllowed_READ
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Linac::is_ShortStatus_allowed()
 *	Description : Execution allowed for ShortStatus attribute
 */
//--------------------------------------------------------
bool Linac::is_ShortStatus_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

	//	Not any excluded states for ShortStatus attribute in read access.
	/*----- PROTECTED REGION ID(Linac::ShortStatusStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Linac::ShortStatusStateAllowed_READ
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Linac::is_PCT_device_allowed()
 *	Description : Execution allowed for PCT_device attribute
 */
//--------------------------------------------------------
bool Linac::is_PCT_device_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

	//	Not any excluded states for PCT_device attribute in read access.
	/*----- PROTECTED REGION ID(Linac::PCT_deviceStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Linac::PCT_deviceStateAllowed_READ
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Linac::is_ICT_device_allowed()
 *	Description : Execution allowed for ICT_device attribute
 */
//--------------------------------------------------------
bool Linac::is_ICT_device_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

	//	Not any excluded states for ICT_device attribute in read access.
	/*----- PROTECTED REGION ID(Linac::ICT_deviceStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Linac::ICT_deviceStateAllowed_READ
	return true;
}


//=================================================
//		Commands Allowed Methods
//=================================================

//--------------------------------------------------------
/**
 *	Method      : Linac::is_On_allowed()
 *	Description : Execution allowed for On attribute
 */
//--------------------------------------------------------
bool Linac::is_On_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Compare device state with not allowed states.
	if (get_state()==Tango::ON ||
		get_state()==Tango::INIT ||
		get_state()==Tango::OFF)
	{
	/*----- PROTECTED REGION ID(Linac::OnStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Linac::OnStateAllowed
		return false;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Linac::is_Off_allowed()
 *	Description : Execution allowed for Off attribute
 */
//--------------------------------------------------------
bool Linac::is_Off_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Compare device state with not allowed states.
	if (get_state()==Tango::ON ||
		get_state()==Tango::STANDBY ||
		get_state()==Tango::OFF)
	{
	/*----- PROTECTED REGION ID(Linac::OffStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Linac::OffStateAllowed
		return false;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Linac::is_Standby_allowed()
 *	Description : Execution allowed for Standby attribute
 */
//--------------------------------------------------------
bool Linac::is_Standby_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Compare device state with not allowed states.
	if (get_state()==Tango::STANDBY ||
		get_state()==Tango::OFF)
	{
	/*----- PROTECTED REGION ID(Linac::StandbyStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Linac::StandbyStateAllowed
		return false;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Linac::is_LowHeating_allowed()
 *	Description : Execution allowed for LowHeating attribute
 */
//--------------------------------------------------------
bool Linac::is_LowHeating_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Compare device state with not allowed states.
	if (get_state()==Tango::ON ||
		get_state()==Tango::INIT)
	{
	/*----- PROTECTED REGION ID(Linac::LowHeatingStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Linac::LowHeatingStateAllowed
		return false;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Linac::is_Abort_allowed()
 *	Description : Execution allowed for Abort attribute
 */
//--------------------------------------------------------
bool Linac::is_Abort_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for Abort command.
	/*----- PROTECTED REGION ID(Linac::AbortStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Linac::AbortStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Linac::is_Reset_allowed()
 *	Description : Execution allowed for Reset attribute
 */
//--------------------------------------------------------
bool Linac::is_Reset_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for Reset command.
	/*----- PROTECTED REGION ID(Linac::ResetStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Linac::ResetStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Linac::is_ReadDirName_allowed()
 *	Description : Execution allowed for ReadDirName attribute
 */
//--------------------------------------------------------
bool Linac::is_ReadDirName_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for ReadDirName command.
	/*----- PROTECTED REGION ID(Linac::ReadDirNameStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Linac::ReadDirNameStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Linac::is_LoadFile_allowed()
 *	Description : Execution allowed for LoadFile attribute
 */
//--------------------------------------------------------
bool Linac::is_LoadFile_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for LoadFile command.
	/*----- PROTECTED REGION ID(Linac::LoadFileStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Linac::LoadFileStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Linac::is_SaveFile_allowed()
 *	Description : Execution allowed for SaveFile attribute
 */
//--------------------------------------------------------
bool Linac::is_SaveFile_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SaveFile command.
	/*----- PROTECTED REGION ID(Linac::SaveFileStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Linac::SaveFileStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Linac::is_ForceSave_allowed()
 *	Description : Execution allowed for ForceSave attribute
 */
//--------------------------------------------------------
bool Linac::is_ForceSave_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for ForceSave command.
	/*----- PROTECTED REGION ID(Linac::ForceSaveStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Linac::ForceSaveStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Linac::is_GetPCTDeviceName_allowed()
 *	Description : Execution allowed for GetPCTDeviceName attribute
 */
//--------------------------------------------------------
bool Linac::is_GetPCTDeviceName_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for GetPCTDeviceName command.
	/*----- PROTECTED REGION ID(Linac::GetPCTDeviceNameStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Linac::GetPCTDeviceNameStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Linac::is_GetICTDeviceName_allowed()
 *	Description : Execution allowed for GetICTDeviceName attribute
 */
//--------------------------------------------------------
bool Linac::is_GetICTDeviceName_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for GetICTDeviceName command.
	/*----- PROTECTED REGION ID(Linac::GetICTDeviceNameStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Linac::GetICTDeviceNameStateAllowed
	return true;
}


/*----- PROTECTED REGION ID(Linac::LinacStateAllowed.AdditionalMethods) ENABLED START -----*/

//	Additional Methods

/*----- PROTECTED REGION END -----*/	//	Linac::LinacStateAllowed.AdditionalMethods

}	//	End of namespace
