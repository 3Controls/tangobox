/*----- PROTECTED REGION ID(GenericMultiChannel.cpp) ENABLED START -----*/
static const char *RcsId = "$Id: GenericMultiChannel.cpp,v 1.2 2013-08-08 11:58:04 tappret Exp $";
//=============================================================================
//
// file :        GenericMultiChannel.cpp
//
// description : C++ source for the GenericMultiChannel class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               GenericMultiChannel are implemented in this file.
//
// project :     TangoMultiChannel
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author: tappret $
//
// $Revision: 1.2 $
// $Date: 2013-08-08 11:58:04 $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <GenericMultiChannel.h>
#include <GenericMultiChannelClass.h>

/*----- PROTECTED REGION END -----*/	//	GenericMultiChannel.cpp

/**
 *  GenericMultiChannel class description:
 *    This class tries to be a generic Tango multichannel device server.
 *    It collects DevDouble data from different devices and compute some common
 *    operation on it : sum, mean, RMS and standard deviation.
 *    The collected data are also provided into a spectrum attribute.
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name          |  Method name
//================================================================
//  State                 |  dev_state
//  Status                |  dev_status
//  GetChannelsList       |  get_channels_list
//  On                    |  on
//  Off                   |  off
//  Reset                 |  reset
//  SetCurrent            |  set_current
//  ZeroCurrent           |  zero_current
//  GetExportedAttribute  |  get_exported_attribute
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  Sum                      |  Tango::DevDouble	Scalar
//  Mean                     |  Tango::DevDouble	Scalar
//  RMS                      |  Tango::DevDouble	Scalar
//  StandardDeviation        |  Tango::DevDouble	Scalar
//  DataAcquisitionDuration  |  Tango::DevLong	Scalar
//  SubDevicesNames          |  Tango::DevString	Spectrum  ( max = 512)
//  SubDevicesStates         |  Tango::DevState	Spectrum  ( max = 512)
//  AttributesNames          |  Tango::DevString	Spectrum  ( max = 512)
//  StoredSpectrum           |  Tango::DevDouble	Spectrum  ( max = 512)
//================================================================

namespace GenericMultiChannel_ns
{
/*----- PROTECTED REGION ID(GenericMultiChannel::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	GenericMultiChannel::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : GenericMultiChannel::GenericMultiChannel()
 *	Description : Constructors for a Tango device
 *                implementing the classGenericMultiChannel
 */
//--------------------------------------------------------
GenericMultiChannel::GenericMultiChannel(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(GenericMultiChannel::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	GenericMultiChannel::constructor_1
}
//--------------------------------------------------------
GenericMultiChannel::GenericMultiChannel(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(GenericMultiChannel::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	GenericMultiChannel::constructor_2
}
//--------------------------------------------------------
GenericMultiChannel::GenericMultiChannel(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(GenericMultiChannel::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	GenericMultiChannel::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : GenericMultiChannel::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void GenericMultiChannel::delete_device()
{
	DEBUG_STREAM << "GenericMultiChannel::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(GenericMultiChannel::delete_device) ENABLED START -----*/
	
	//	Delete device allocated objects
        // Stop AcquisitionThread.
        acquisitionThread->quit();
                
	void *dummy;
	acquisitionThread->join(&dummy);
	acquisitionThread = NULL;
        
        // De-allocate subDevicesName devices strings.
	for (int i=0; i < attributesNumber; i++)
	{
            CORBA::string_free(attr_SubDevicesNames_read[i]);
            CORBA::string_free(attr_AttributesNames_read[i]);
	}
	
	/*----- PROTECTED REGION END -----*/	//	GenericMultiChannel::delete_device
	delete[] attr_Sum_read;
	delete[] attr_Mean_read;
	delete[] attr_RMS_read;
	delete[] attr_StandardDeviation_read;
	delete[] attr_DataAcquisitionDuration_read;
	delete[] attr_SubDevicesNames_read;
	delete[] attr_SubDevicesStates_read;
	delete[] attr_AttributesNames_read;
	delete[] attr_StoredSpectrum_read;
}

//--------------------------------------------------------
/**
 *	Method      : GenericMultiChannel::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void GenericMultiChannel::init_device()
{
	DEBUG_STREAM << "GenericMultiChannel::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(GenericMultiChannel::init_device_before) ENABLED START -----*/
	
	//	Initialization before get_device_property() call
        	
	/*----- PROTECTED REGION END -----*/	//	GenericMultiChannel::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	
	attr_Sum_read = new Tango::DevDouble[1];
	attr_Mean_read = new Tango::DevDouble[1];
	attr_RMS_read = new Tango::DevDouble[1];
	attr_StandardDeviation_read = new Tango::DevDouble[1];
	attr_DataAcquisitionDuration_read = new Tango::DevLong[1];
	attr_SubDevicesNames_read = new Tango::DevString[512];
	attr_SubDevicesStates_read = new Tango::DevState[512];
	attr_AttributesNames_read = new Tango::DevString[512];
	attr_StoredSpectrum_read = new Tango::DevDouble[512];
	//	No longer if mandatory property not set. 
	if (mandatoryNotDefined)
		return;

	/*----- PROTECTED REGION ID(GenericMultiChannel::init_device) ENABLED START -----*/
	
	//	Initialize device
        attributesNumber = attributesList.size();

	// Allocate subDevicesName / AttributesNames devices strings.
	for (int i=0; i < attributesNumber; i++)
	{
		// Extract device name from attribute name.
		string dvn = attributesList[i];
		size_t pos = attributesList[i].find_last_of("/");
		if (pos != string::npos)
		{
			dvn  = attributesList[i].substr(0, pos);
		}

                attr_SubDevicesNames_read[i] = CORBA::string_dup(dvn.c_str());
		/*attr_SubDevicesNames_read[i] = new char[128];
		memset(attr_SubDevicesNames_read[i], 0, 128);
		strncpy(attr_SubDevicesNames_read[i], dvn.c_str(), 128 -1);*/

                attr_AttributesNames_read[i] = CORBA::string_dup(attributesList[i].c_str());
                /*
		attr_AttributesNames_read[i] = new char[128];
		memset(attr_AttributesNames_read[i], 0, 128);
		strncpy(attr_AttributesNames_read[i], attributesList[i].c_str(), 128 -1);
                 */
	}

	acquisitionThread = new AcquisitionThread(this, mutex);
	chrono.start();
	calculatedStatus = "Initializing this device.";
	calculatedState  = MOVING;
	attr_DataAcquisitionDuration_read[0] = 0;
	storedSpectrumInitialised = false;

	for (int i=0; i < attributesNumber; i++)
	{
		attr_StoredSpectrum_read[i] = NAN;
	}

	cout << "DataAcquisitionPeriod = " << dataAcquisitionPeriod << " ms." << endl;
	cout << "DeviceTimeOut         = " << deviceTimeOut << " ms." << endl;
	
	/*----- PROTECTED REGION END -----*/	//	GenericMultiChannel::init_device
}

//--------------------------------------------------------
/**
 *	Method      : GenericMultiChannel::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void GenericMultiChannel::get_device_property()
{
	/*----- PROTECTED REGION ID(GenericMultiChannel::get_device_property_before) ENABLED START -----*/
	
	//	Initialize property data members
	
	/*----- PROTECTED REGION END -----*/	//	GenericMultiChannel::get_device_property_before

	mandatoryNotDefined = false;

	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("DataAcquisitionPeriod"));
	dev_prop.push_back(Tango::DbDatum("AttributesList"));
	dev_prop.push_back(Tango::DbDatum("AttributesSpectrumName"));
	dev_prop.push_back(Tango::DbDatum("DeviceTimeOut"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on GenericMultiChannelClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		GenericMultiChannelClass	*ds_class =
			(static_cast<GenericMultiChannelClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize DataAcquisitionPeriod from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  dataAcquisitionPeriod;
		else {
			//	Try to initialize DataAcquisitionPeriod from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  dataAcquisitionPeriod;
		}
		//	And try to extract DataAcquisitionPeriod value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  dataAcquisitionPeriod;

		//	Try to initialize AttributesList from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  attributesList;
		else {
			//	Try to initialize AttributesList from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  attributesList;
		}
		//	And try to extract AttributesList value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  attributesList;
		//	Property StartDsPath is mandatory, check if has been defined in database.
		check_mandatory_property(cl_prop, dev_prop[i]);

		//	Try to initialize AttributesSpectrumName from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  attributesSpectrumName;
		else {
			//	Try to initialize AttributesSpectrumName from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  attributesSpectrumName;
		}
		//	And try to extract AttributesSpectrumName value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  attributesSpectrumName;

		//	Try to initialize DeviceTimeOut from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  deviceTimeOut;
		else {
			//	Try to initialize DeviceTimeOut from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  deviceTimeOut;
		}
		//	And try to extract DeviceTimeOut value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  deviceTimeOut;

	}

	/*----- PROTECTED REGION ID(GenericMultiChannel::get_device_property_after) ENABLED START -----*/
	
	//	Check device property data members init
	
	/*----- PROTECTED REGION END -----*/	//	GenericMultiChannel::get_device_property_after
}
//--------------------------------------------------------
/**
 *	Method      : GenericMultiChannel::check_mandatory_property()
 *	Description : For mandatory properties check if defined in database.
 */
//--------------------------------------------------------
void GenericMultiChannel::check_mandatory_property(Tango::DbDatum &class_prop, Tango::DbDatum &dev_prop)
{
	//	Check if all properties are empty
	if (class_prop.is_empty() && dev_prop.is_empty())
	{
		TangoSys_OMemStream	tms;
		tms << endl <<"Property \'" << dev_prop.name;
		if (Tango::Util::instance()->_UseDb==true)
			tms << "\' is mandatory but not defined in database";
		else
			tms << "\' is mandatory but cannot be defined without database";
		string	status(get_status());
		status += tms.str();
		set_status(status);
		mandatoryNotDefined = true;
		/*----- PROTECTED REGION ID(GenericMultiChannel::check_mandatory_property) ENABLED START -----*/
		cerr << tms.str() << " for " << device_name << endl;
		
		/*----- PROTECTED REGION END -----*/	//	GenericMultiChannel::check_mandatory_property
	}
}


//--------------------------------------------------------
/**
 *	Method      : GenericMultiChannel::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void GenericMultiChannel::always_executed_hook()
{
	DEBUG_STREAM << "GenericMultiChannel::always_executed_hook()  " << device_name << endl;
	if (mandatoryNotDefined)
	{
		string	status(get_status());
		Tango::Except::throw_exception(
					(const char *)"PROPERTY_NOT_SET",
					status.c_str(),
					(const char *)"GenericMultiChannel::always_executed_hook()");
	}
	/*----- PROTECTED REGION ID(GenericMultiChannel::always_executed_hook) ENABLED START -----*/
	
	//	code always executed before all requests
        chrono.stop();
	if (chrono.getDeltaMicroseconds() > 100000)
	{
		synchronizeValuesFromLocalCopy();
		chrono.restart();
	}
	
	/*----- PROTECTED REGION END -----*/	//	GenericMultiChannel::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : GenericMultiChannel::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void GenericMultiChannel::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "GenericMultiChannel::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(GenericMultiChannel::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	GenericMultiChannel::read_attr_hardware
}
//--------------------------------------------------------
/**
 *	Method      : GenericMultiChannel::write_attr_hardware()
 *	Description : Hardware writing for attributes
 */
//--------------------------------------------------------
void GenericMultiChannel::write_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "GenericMultiChannel::write_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(GenericMultiChannel::write_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	GenericMultiChannel::write_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute Sum related method
 *	Description: This is the Sum of all collected attributes.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void GenericMultiChannel::read_Sum(Tango::Attribute &attr)
{
	DEBUG_STREAM << "GenericMultiChannel::read_Sum(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(GenericMultiChannel::read_Sum) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_Sum_read);
	
	/*----- PROTECTED REGION END -----*/	//	GenericMultiChannel::read_Sum
}
//--------------------------------------------------------
/**
 *	Read attribute Mean related method
 *	Description: This is the Mean of all collected attributes.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void GenericMultiChannel::read_Mean(Tango::Attribute &attr)
{
	DEBUG_STREAM << "GenericMultiChannel::read_Mean(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(GenericMultiChannel::read_Mean) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_Mean_read);
	
	/*----- PROTECTED REGION END -----*/	//	GenericMultiChannel::read_Mean
}
//--------------------------------------------------------
/**
 *	Read attribute RMS related method
 *	Description: This is the RMS of all collected attributes.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void GenericMultiChannel::read_RMS(Tango::Attribute &attr)
{
	DEBUG_STREAM << "GenericMultiChannel::read_RMS(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(GenericMultiChannel::read_RMS) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_RMS_read);
	
	/*----- PROTECTED REGION END -----*/	//	GenericMultiChannel::read_RMS
}
//--------------------------------------------------------
/**
 *	Read attribute StandardDeviation related method
 *	Description: This is the Standard Deviation of the collected attributes.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void GenericMultiChannel::read_StandardDeviation(Tango::Attribute &attr)
{
	DEBUG_STREAM << "GenericMultiChannel::read_StandardDeviation(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(GenericMultiChannel::read_StandardDeviation) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_StandardDeviation_read);
	
	/*----- PROTECTED REGION END -----*/	//	GenericMultiChannel::read_StandardDeviation
}
//--------------------------------------------------------
/**
 *	Read attribute DataAcquisitionDuration related method
 *	Description: Time used by the acquisition thread to acquire datas.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void GenericMultiChannel::read_DataAcquisitionDuration(Tango::Attribute &attr)
{
	DEBUG_STREAM << "GenericMultiChannel::read_DataAcquisitionDuration(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(GenericMultiChannel::read_DataAcquisitionDuration) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_DataAcquisitionDuration_read);
	if (attr_DataAcquisitionDuration_read[0] > dataAcquisitionPeriod) attr.set_quality(ATTR_ALARM);
	
	/*----- PROTECTED REGION END -----*/	//	GenericMultiChannel::read_DataAcquisitionDuration
}
//--------------------------------------------------------
/**
 *	Read attribute SubDevicesNames related method
 *	Description: Name of the sub devices actually read by acquisition thread.
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Spectrum max = 512
 */
//--------------------------------------------------------
void GenericMultiChannel::read_SubDevicesNames(Tango::Attribute &attr)
{
	DEBUG_STREAM << "GenericMultiChannel::read_SubDevicesNames(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(GenericMultiChannel::read_SubDevicesNames) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_SubDevicesNames_read, attributesNumber);
	
	/*----- PROTECTED REGION END -----*/	//	GenericMultiChannel::read_SubDevicesNames
}
//--------------------------------------------------------
/**
 *	Read attribute SubDevicesStates related method
 *	Description: State of the attributes actually read by acquisition thread.
 *
 *	Data type:	Tango::DevState
 *	Attr type:	Spectrum max = 512
 */
//--------------------------------------------------------
void GenericMultiChannel::read_SubDevicesStates(Tango::Attribute &attr)
{
	DEBUG_STREAM << "GenericMultiChannel::read_SubDevicesStates(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(GenericMultiChannel::read_SubDevicesStates) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_SubDevicesStates_read, attributesNumber);
	
	/*----- PROTECTED REGION END -----*/	//	GenericMultiChannel::read_SubDevicesStates
}
//--------------------------------------------------------
/**
 *	Read attribute AttributesNames related method
 *	Description: Name of the attributes actually read by acquisition thread.
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Spectrum max = 512
 */
//--------------------------------------------------------
void GenericMultiChannel::read_AttributesNames(Tango::Attribute &attr)
{
	DEBUG_STREAM << "GenericMultiChannel::read_AttributesNames(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(GenericMultiChannel::read_AttributesNames) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_AttributesNames_read, attributesNumber);
	
	/*----- PROTECTED REGION END -----*/	//	GenericMultiChannel::read_AttributesNames
}
//--------------------------------------------------------
/**
 *	Read attribute StoredSpectrum related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 512
 */
//--------------------------------------------------------
void GenericMultiChannel::read_StoredSpectrum(Tango::Attribute &attr)
{
	DEBUG_STREAM << "GenericMultiChannel::read_StoredSpectrum(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(GenericMultiChannel::read_StoredSpectrum) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_StoredSpectrum_read, attributesNumber);
	
	/*----- PROTECTED REGION END -----*/	//	GenericMultiChannel::read_StoredSpectrum
}
//--------------------------------------------------------
/**
 *	Write attribute StoredSpectrum related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 512
 */
//--------------------------------------------------------
void GenericMultiChannel::write_StoredSpectrum(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "GenericMultiChannel::write_StoredSpectrum(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve number of write values
	int	w_length = attr.get_write_value_length();

	//	Retrieve pointer on write values (Do not delete !)
	const Tango::DevDouble	*w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(GenericMultiChannel::write_StoredSpectrum) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	GenericMultiChannel::write_StoredSpectrum
}

//--------------------------------------------------------
/**
 *	Read attribute DoubleSpectrum related method
 *	Description: This attribute will contains values of collected attributes.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 512
 */
//--------------------------------------------------------
void GenericMultiChannel::read_DoubleSpectrum(Tango::Attribute &attr)
{
	DEBUG_STREAM << "GenericMultiChannel::read_DoubleSpectrum(Tango::Attribute &attr) entering... " << endl;
	Tango::DevDouble	*att_value = get_DoubleSpectrum_data_ptr(attr.get_name());
	/*----- PROTECTED REGION ID(GenericMultiChannel::read_DoubleSpectrum) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(att_value, attributesNumber);
	
	/*----- PROTECTED REGION END -----*/	//	GenericMultiChannel::read_DoubleSpectrum
}
//--------------------------------------------------------
/**
 *	Method      : GenericMultiChannel::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void GenericMultiChannel::add_dynamic_attributes()
{
	//	Example to add dynamic attribute:
	//	Copy inside the following protected area to create instance(s) at startup.
	//	add_DoubleSpectrum_dynamic_attribute("MyDoubleSpectrumAttribute");
	
	/*----- PROTECTED REGION ID(GenericMultiChannel::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
    
	// Collected data is allocated once for all. It shoud last for all server life.
	// Actually there is no del_dynamic_attributes() method for destroying the buffer.
	// Doing it in delete device will result in a core dump on next attribute_read.
	// So we accept this per-device single-shot memory leak of the spectrum
	// size * sizeof(DevDouble) = 128 kilo bytes.
	collectedData = new DevDouble[attributesNumber];
	add_DoubleSpectrum_dynamic_attribute(attributesSpectrumName, collectedData);
	
	/*----- PROTECTED REGION END -----*/	//	GenericMultiChannel::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command State related method
 *	Description: This command gets the device state (stored in its device_state data member) and returns it to the caller.
 *
 *	@returns Device state
 */
//--------------------------------------------------------
Tango::DevState GenericMultiChannel::dev_state()
{
	DEBUG_STREAM << "GenericMultiChannel::State()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(GenericMultiChannel::dev_state) ENABLED START -----*/
	
	Tango::DevState	argout = calculatedState; // replace by your own algorithm
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	GenericMultiChannel::dev_state
	set_state(argout);    // Give the state to Tango.
	if (argout!=Tango::ALARM)
		DeviceImpl::dev_state();
	return get_state();  // Return it after Tango management.
}
//--------------------------------------------------------
/**
 *	Command Status related method
 *	Description: This command gets the device status (stored in its device_status data member) and returns it to the caller.
 *
 *	@returns Device status
 */
//--------------------------------------------------------
Tango::ConstDevString GenericMultiChannel::dev_status()
{
	DEBUG_STREAM << "GenericMultiChannel::Status()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(GenericMultiChannel::dev_status) ENABLED START -----*/
	
	string	status = calculatedStatus;
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	GenericMultiChannel::dev_status
	set_status(status);               // Give the status to Tango.
	return DeviceImpl::dev_status();  // Return it.
}
//--------------------------------------------------------
/**
 *	Command GetChannelsList related method
 *	Description: This command will return the list of channels controlled by this multichannels device.
 *
 *	@returns list of channels controlled by this device
 */
//--------------------------------------------------------
Tango::DevVarStringArray *GenericMultiChannel::get_channels_list()
{
	Tango::DevVarStringArray *argout;
	DEBUG_STREAM << "GenericMultiChannel::GetChannelsList()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(GenericMultiChannel::get_channels_list) ENABLED START -----*/
	
	//	Add your own code
        argout  = new Tango::DevVarStringArray();
	argout->length(attributesNumber);
        for(int i = 0 ; i < attributesNumber ; ++i){
            (*argout)[i] = CORBA::string_dup(attr_SubDevicesNames_read[i]);
        }
	
	/*----- PROTECTED REGION END -----*/	//	GenericMultiChannel::get_channels_list
	return argout;
}
//--------------------------------------------------------
/**
 *	Command On related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void GenericMultiChannel::on()
{
	DEBUG_STREAM << "GenericMultiChannel::On()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(GenericMultiChannel::on) ENABLED START -----*/
	
	//	Add your own code
        sendCommandInOutAll("On");
        
	/*----- PROTECTED REGION END -----*/	//	GenericMultiChannel::on
}
//--------------------------------------------------------
/**
 *	Command Off related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void GenericMultiChannel::off()
{
	DEBUG_STREAM << "GenericMultiChannel::Off()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(GenericMultiChannel::off) ENABLED START -----*/
	
	//	Add your own code
        sendCommandInOutAll("Off");
	
	/*----- PROTECTED REGION END -----*/	//	GenericMultiChannel::off
}
//--------------------------------------------------------
/**
 *	Command Reset related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void GenericMultiChannel::reset()
{
	DEBUG_STREAM << "GenericMultiChannel::Reset()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(GenericMultiChannel::reset) ENABLED START -----*/
	
	//	Add your own code
        sendCommandInOutAll("reset");
	
	/*----- PROTECTED REGION END -----*/	//	GenericMultiChannel::reset
}
//--------------------------------------------------------
/**
 *	Command SetCurrent related method
 *	Description: This command will apply the setpoint of the Current Attribute of each channel.
 *
 */
//--------------------------------------------------------
void GenericMultiChannel::set_current()
{
	DEBUG_STREAM << "GenericMultiChannel::SetCurrent()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(GenericMultiChannel::set_current) ENABLED START -----*/
	
	//	Add your own code
        on();
	
	/*----- PROTECTED REGION END -----*/	//	GenericMultiChannel::set_current
}
//--------------------------------------------------------
/**
 *	Command ZeroCurrent related method
 *	Description: set the Current to 0 on each channel.
 *               If the power supply is OFF or FAULT, do nothing.
 *
 */
//--------------------------------------------------------
void GenericMultiChannel::zero_current()
{
	DEBUG_STREAM << "GenericMultiChannel::ZeroCurrent()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(GenericMultiChannel::zero_current) ENABLED START -----*/
	
	//	Add your own code
        off();
	
	/*----- PROTECTED REGION END -----*/	//	GenericMultiChannel::zero_current
}
//--------------------------------------------------------
/**
 *	Command GetExportedAttribute related method
 *	Description: This command returns the string ``Voltage`` or ``Current`` depending on MultiChannelPowerSupply
 *               device property ExportedDevice.
 *
 *	@returns Current or Voltage depending device property
 */
//--------------------------------------------------------
Tango::DevString GenericMultiChannel::get_exported_attribute()
{
	Tango::DevString argout;
	DEBUG_STREAM << "GenericMultiChannel::GetExportedAttribute()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(GenericMultiChannel::get_exported_attribute) ENABLED START -----*/
	        
        argout = CORBA::string_dup("Current");
	
	
	/*----- PROTECTED REGION END -----*/	//	GenericMultiChannel::get_exported_attribute
	return argout;
}
//--------------------------------------------------------
/**
 *	Method      : GenericMultiChannel::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void GenericMultiChannel::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(GenericMultiChannel::add_dynamic_commands) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic commands if any
	
	/*----- PROTECTED REGION END -----*/	//	GenericMultiChannel::add_dynamic_commands
}

/*----- PROTECTED REGION ID(GenericMultiChannel::namespace_ending) ENABLED START -----*/

//	Additional Methods

void GenericMultiChannel::synchronizeValuesFromLocalCopy()
{
	omni_mutex_lock lockIt(mutex);
	attr_Sum_read[0]  = localDataCopy.sum;
	attr_Mean_read[0] = localDataCopy.mean;
	attr_RMS_read[0]  = localDataCopy.rms;
	attr_StandardDeviation_read[0] = localDataCopy.stdDeviation;
	attr_DataAcquisitionDuration_read[0] = localDataCopy.dataCollectionDuration;
	calculatedState  = localDataCopy.calculatedState;
	calculatedStatus = localDataCopy.calculatedStatus;
	memcpy(collectedData, localDataCopy.collectedData, sizeof(double) * attributesNumber);
	memcpy(attr_SubDevicesStates_read, localDataCopy.subDevicesStates, sizeof(DevState) * attributesNumber);
}

void GenericMultiChannel::sendCommandInOutAll(string cmd){
        for(int i = 0 ; i < attributesNumber ; ++i){
            try{
                Tango::DeviceProxy dp(attr_SubDevicesNames_read[i]);
                dp.set_timeout_millis(deviceTimeOut);
                
                if(cmd == "reset"){
                    Tango::DevState state = dp.state();
                    if(state == Tango::FAULT
                            || state == Tango::ALARM){
                        dp.command_inout("Off");
                    }
                }else{
                    dp.command_inout(cmd);
                }
            }catch(Tango::DevFailed &e){
                Tango::Except::print_exception(e);    
            }  
        }
}

void GenericMultiChannel::setAttributeAtAll(DevDouble &param){
        for(int i = 0 ; i < attributesNumber ; ++i){
            try{
                Tango::DeviceProxy dp(attr_SubDevicesNames_read[i]);
                dp.set_timeout_millis(deviceTimeOut);
                
                Tango::DeviceAttribute attr = dp.read_attribute(attr_AttributesNames_read[i]);
                attr << param;
                dp.write_attribute(attr);
            }catch(Tango::DevFailed &e){
                Tango::Except::print_exception(e);    
            }  
        }
}


/*----- PROTECTED REGION END -----*/	//	GenericMultiChannel::namespace_ending
} //	namespace
