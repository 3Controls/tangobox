/*----- PROTECTED REGION ID(GenericMultiChannel.h) ENABLED START -----*/
//=============================================================================
//
// file :        GenericMultiChannel.h
//
// description : Include file for the GenericMultiChannel class
//
// project :     TangoMultiChannel
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author: tappret $
//
// $Revision: 1.2 $
// $Date: 2013-08-08 11:58:04 $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef GenericMultiChannel_H
#define GenericMultiChannel_H

#include <tango.h>
#include <vector>
#include <iostream>
#include "SharedData.h"
#include "Chronometer.h"
#include "AcquisitionThread.h"


/*----- PROTECTED REGION END -----*/	//	GenericMultiChannel.h

/**
 *  GenericMultiChannel class description:
 *    This class tries to be a generic Tango multichannel device server.
 *    It collects DevDouble data from different devices and compute some common
 *    operation on it : sum, mean, RMS and standard deviation.
 *    The collected data are also provided into a spectrum attribute.
 */

namespace GenericMultiChannel_ns
{
/*----- PROTECTED REGION ID(GenericMultiChannel::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations
        class AcquisitionThread;

/*----- PROTECTED REGION END -----*/	//	GenericMultiChannel::Additional Class Declarations

class GenericMultiChannel : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(GenericMultiChannel::Data Members) ENABLED START -----*/

//	Add your own data members

/*----- PROTECTED REGION END -----*/	//	GenericMultiChannel::Data Members

//	Device property data members
public:
	//	DataAcquisitionPeriod:	This is the period on which the AcquisitionThread tries to synchronize 
	//  aquire data. Unit is millisecond.
	Tango::DevLong	dataAcquisitionPeriod;
	//	AttributesList:	This is the list of DevDouble attributes that will be collected by the
	//  acquisition thread.
	vector<string>	attributesList;
	//	AttributesSpectrumName:	This is the name of the spectrum attribute that will show collected 
	//  attributes.
	string	attributesSpectrumName;
	//	DeviceTimeOut:	This is the maximum amount of time spent to wait for device answer.
	//  This property should be coherent (lesser) with the device property
	//  DataAcquisitionPeriod. Unit is millisecond.
	Tango::DevLong	deviceTimeOut;

	bool	mandatoryNotDefined;

//	Attribute data members
public:
	Tango::DevDouble	*attr_Sum_read;
	Tango::DevDouble	*attr_Mean_read;
	Tango::DevDouble	*attr_RMS_read;
	Tango::DevDouble	*attr_StandardDeviation_read;
	Tango::DevLong	*attr_DataAcquisitionDuration_read;
	Tango::DevString	*attr_SubDevicesNames_read;
	Tango::DevState	*attr_SubDevicesStates_read;
	Tango::DevString	*attr_AttributesNames_read;
	Tango::DevDouble	*attr_StoredSpectrum_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	GenericMultiChannel(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	GenericMultiChannel(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	GenericMultiChannel(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~GenericMultiChannel() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();

	/*
	 *	Check if mandatory property has been set
	 */
	 void check_mandatory_property(Tango::DbDatum &class_prop, Tango::DbDatum &dev_prop);

//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : GenericMultiChannel::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);
	//--------------------------------------------------------
	/*
	 *	Method      : GenericMultiChannel::write_attr_hardware()
	 *	Description : Hardware writing for attributes.
	 */
	//--------------------------------------------------------
	virtual void write_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute Sum related methods
 *	Description: This is the Sum of all collected attributes.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_Sum(Tango::Attribute &attr);
	virtual bool is_Sum_allowed(Tango::AttReqType type);
/**
 *	Attribute Mean related methods
 *	Description: This is the Mean of all collected attributes.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_Mean(Tango::Attribute &attr);
	virtual bool is_Mean_allowed(Tango::AttReqType type);
/**
 *	Attribute RMS related methods
 *	Description: This is the RMS of all collected attributes.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_RMS(Tango::Attribute &attr);
	virtual bool is_RMS_allowed(Tango::AttReqType type);
/**
 *	Attribute StandardDeviation related methods
 *	Description: This is the Standard Deviation of the collected attributes.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_StandardDeviation(Tango::Attribute &attr);
	virtual bool is_StandardDeviation_allowed(Tango::AttReqType type);
/**
 *	Attribute DataAcquisitionDuration related methods
 *	Description: Time used by the acquisition thread to acquire datas.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_DataAcquisitionDuration(Tango::Attribute &attr);
	virtual bool is_DataAcquisitionDuration_allowed(Tango::AttReqType type);
/**
 *	Attribute SubDevicesNames related methods
 *	Description: Name of the sub devices actually read by acquisition thread.
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Spectrum max = 512
 */
	virtual void read_SubDevicesNames(Tango::Attribute &attr);
	virtual bool is_SubDevicesNames_allowed(Tango::AttReqType type);
/**
 *	Attribute SubDevicesStates related methods
 *	Description: State of the attributes actually read by acquisition thread.
 *
 *	Data type:	Tango::DevState
 *	Attr type:	Spectrum max = 512
 */
	virtual void read_SubDevicesStates(Tango::Attribute &attr);
	virtual bool is_SubDevicesStates_allowed(Tango::AttReqType type);
/**
 *	Attribute AttributesNames related methods
 *	Description: Name of the attributes actually read by acquisition thread.
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Spectrum max = 512
 */
	virtual void read_AttributesNames(Tango::Attribute &attr);
	virtual bool is_AttributesNames_allowed(Tango::AttReqType type);
/**
 *	Attribute StoredSpectrum related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 512
 */
	virtual void read_StoredSpectrum(Tango::Attribute &attr);
	virtual void write_StoredSpectrum(Tango::WAttribute &attr);
	virtual bool is_StoredSpectrum_allowed(Tango::AttReqType type);

//	Dynamic attribute methods
public:

	/**
	 *	Attribute DoubleSpectrum related methods
	 *	Description: This attribute will contains values of collected attributes.
	 *
	 *	Data type:	Tango::DevDouble
	 *	Attr type:	Spectrum max = 512
	 */
	virtual void read_DoubleSpectrum(Tango::Attribute &attr);
	virtual bool is_DoubleSpectrum_allowed(Tango::AttReqType type);
	void add_DoubleSpectrum_dynamic_attribute(string attname, Tango::DevDouble *ptr=NULL);
	void remove_DoubleSpectrum_dynamic_attribute(string attname, bool free_it=true);
	Tango::DevDouble *get_DoubleSpectrum_data_ptr(string &name);
	map<string,Tango::DevDouble *>	   DoubleSpectrum_data;

	//--------------------------------------------------------
	/**
	 *	Method      : GenericMultiChannel::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:
	/**
	 *	Command State related method
	 *	Description: This command gets the device state (stored in its device_state data member) and returns it to the caller.
	 *
	 *	@returns Device state
	 */
	virtual Tango::DevState dev_state();
	/**
	 *	Command Status related method
	 *	Description: This command gets the device status (stored in its device_status data member) and returns it to the caller.
	 *
	 *	@returns Device status
	 */
	virtual Tango::ConstDevString dev_status();
	/**
	 *	Command GetChannelsList related method
	 *	Description: This command will return the list of channels controlled by this multichannels device.
	 *
	 *	@returns list of channels controlled by this device
	 */
	virtual Tango::DevVarStringArray *get_channels_list();
	virtual bool is_GetChannelsList_allowed(const CORBA::Any &any);
	/**
	 *	Command On related method
	 *	Description: 
	 *
	 */
	virtual void on();
	virtual bool is_On_allowed(const CORBA::Any &any);
	/**
	 *	Command Off related method
	 *	Description: 
	 *
	 */
	virtual void off();
	virtual bool is_Off_allowed(const CORBA::Any &any);
	/**
	 *	Command Reset related method
	 *	Description: 
	 *
	 */
	virtual void reset();
	virtual bool is_Reset_allowed(const CORBA::Any &any);
	/**
	 *	Command SetCurrent related method
	 *	Description: This command will apply the setpoint of the Current Attribute of each channel.
	 *
	 */
	virtual void set_current();
	virtual bool is_SetCurrent_allowed(const CORBA::Any &any);
	/**
	 *	Command ZeroCurrent related method
	 *	Description: set the Current to 0 on each channel.
	 *               If the power supply is OFF or FAULT, do nothing.
	 *
	 */
	virtual void zero_current();
	virtual bool is_ZeroCurrent_allowed(const CORBA::Any &any);
	/**
	 *	Command GetExportedAttribute related method
	 *	Description: This command returns the string ``Voltage`` or ``Current`` depending on MultiChannelPowerSupply
	 *               device property ExportedDevice.
	 *
	 *	@returns Current or Voltage depending device property
	 */
	virtual Tango::DevString get_exported_attribute();
	virtual bool is_GetExportedAttribute_allowed(const CORBA::Any &any);


	//--------------------------------------------------------
	/**
	 *	Method      : GenericMultiChannel::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(GenericMultiChannel::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes
private:

	omni_mutex	mutex;
	SharedData localDataCopy;
	friend class AcquisitionThread;
	AcquisitionThread *acquisitionThread;
	Chronometer chrono;
	void synchronizeValuesFromLocalCopy();
	DevState calculatedState;
	string   calculatedStatus;
	bool storedSpectrumInitialised;
        
        void sendCommandInOutAll(string cmd);
        void setAttributeAtAll(DevDouble &param);

protected:
	int attributesNumber;
	DevDouble *collectedData;

/*----- PROTECTED REGION END -----*/	//	GenericMultiChannel::Additional Method prototypes
};

/*----- PROTECTED REGION ID(GenericMultiChannel::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions

/*----- PROTECTED REGION END -----*/	//	GenericMultiChannel::Additional Classes Definitions

}	//	End of namespace

#endif   //	GenericMultiChannel_H
