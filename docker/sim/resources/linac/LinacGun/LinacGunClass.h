/*----- PROTECTED REGION ID(LinacGunClass.h) ENABLED START -----*/
//=============================================================================
//
// file :        LinacGunClass.h
//
// description : Include for the LinacGun root class.
//               This class is the singleton class for
//                the LinacGun device class.
//               It contains all properties and methods which the 
//               LinacGun requires only once e.g. the commands.
//
// project :     Linac Gun
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef LinacGunClass_H
#define LinacGunClass_H

#include <tango.h>
#include <LinacGun.h>

/*----- PROTECTED REGION END -----*/	//	LinacGunClass.h


namespace LinacGun_ns
{
/*----- PROTECTED REGION ID(LinacGunClass::classes for dynamic creation) ENABLED START -----*/


/*----- PROTECTED REGION END -----*/	//	LinacGunClass::classes for dynamic creation

//=========================================
//	Define classes for attributes
//=========================================
//	Attribute PulseV class definition
class PulseVAttrib: public Tango::Attr
{
public:
	PulseVAttrib():Attr("PulseV",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~PulseVAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LinacGun *>(dev))->read_PulseV(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LinacGun *>(dev))->write_PulseV(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LinacGun *>(dev))->is_PulseV_allowed(ty);}
};

//	Attribute PulseL class definition
class PulseLAttrib: public Tango::Attr
{
public:
	PulseLAttrib():Attr("PulseL",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~PulseLAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LinacGun *>(dev))->read_PulseL(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LinacGun *>(dev))->write_PulseL(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LinacGun *>(dev))->is_PulseL_allowed(ty);}
};

//	Attribute GridV class definition
class GridVAttrib: public Tango::Attr
{
public:
	GridVAttrib():Attr("GridV",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~GridVAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LinacGun *>(dev))->read_GridV(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LinacGun *>(dev))->write_GridV(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LinacGun *>(dev))->is_GridV_allowed(ty);}
};

//	Attribute PulseType class definition
class PulseTypeAttrib: public Tango::Attr
{
public:
	PulseTypeAttrib():Attr("PulseType",
			Tango::DEV_STRING, Tango::READ_WRITE) {};
	~PulseTypeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LinacGun *>(dev))->read_PulseType(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LinacGun *>(dev))->write_PulseType(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LinacGun *>(dev))->is_PulseType_allowed(ty);}
};

//	Attribute Delay class definition
class DelayAttrib: public Tango::Attr
{
public:
	DelayAttrib():Attr("Delay",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~DelayAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LinacGun *>(dev))->read_Delay(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LinacGun *>(dev))->write_Delay(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LinacGun *>(dev))->is_Delay_allowed(ty);}
};

//	Attribute DeflectionDC class definition
class DeflectionDCAttrib: public Tango::Attr
{
public:
	DeflectionDCAttrib():Attr("DeflectionDC",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~DeflectionDCAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LinacGun *>(dev))->read_DeflectionDC(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LinacGun *>(dev))->write_DeflectionDC(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LinacGun *>(dev))->is_DeflectionDC_allowed(ty);}
};

//	Attribute Cleaning class definition
class CleaningAttrib: public Tango::Attr
{
public:
	CleaningAttrib():Attr("Cleaning",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~CleaningAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LinacGun *>(dev))->read_Cleaning(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LinacGun *>(dev))->write_Cleaning(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LinacGun *>(dev))->is_Cleaning_allowed(ty);}
};


//=========================================
//	Define classes for commands
//=========================================
//	Command On class definition
class OnClass : public Tango::Command
{
public:
	OnClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	OnClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~OnClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<LinacGun *>(dev))->is_On_allowed(any);}
};

//	Command Off class definition
class OffClass : public Tango::Command
{
public:
	OffClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	OffClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~OffClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<LinacGun *>(dev))->is_Off_allowed(any);}
};

//	Command Reset class definition
class ResetClass : public Tango::Command
{
public:
	ResetClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ResetClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ResetClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<LinacGun *>(dev))->is_Reset_allowed(any);}
};


/**
 *	The LinacGunClass singleton definition
 */

#ifdef _TG_WINDOWS_
class __declspec(dllexport)  LinacGunClass : public Tango::DeviceClass
#else
class LinacGunClass : public Tango::DeviceClass
#endif
{
	/*----- PROTECTED REGION ID(LinacGunClass::Additionnal DServer data members) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	LinacGunClass::Additionnal DServer data members

	public:
		//	write class properties data members
		Tango::DbData	cl_prop;
		Tango::DbData	cl_def_prop;
		Tango::DbData	dev_def_prop;
	
		//	Method prototypes
		static LinacGunClass *init(const char *);
		static LinacGunClass *instance();
		~LinacGunClass();
		Tango::DbDatum	get_class_property(string &);
		Tango::DbDatum	get_default_device_property(string &);
		Tango::DbDatum	get_default_class_property(string &);
	
	protected:
		LinacGunClass(string &);
		static LinacGunClass *_instance;
		void command_factory();
		void attribute_factory(vector<Tango::Attr *> &);
		void pipe_factory();
		void write_class_property();
		void set_default_property();
		void get_class_property();
		string get_cvstag();
		string get_cvsroot();
	
	private:
		void device_factory(const Tango::DevVarStringArray *);
		void create_static_attribute_list(vector<Tango::Attr *> &);
		void erase_dynamic_attributes(const Tango::DevVarStringArray *,vector<Tango::Attr *> &);
		vector<string>	defaultAttList;
		Tango::Attr *get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname);
};

}	//	End of namespace

#endif   //	LinacGun_H
