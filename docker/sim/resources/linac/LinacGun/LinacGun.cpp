/*----- PROTECTED REGION ID(LinacGun.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        LinacGun.cpp
//
// description : C++ source for the LinacGun class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               LinacGun are implemented in this file.
//
// project :     Linac Gun
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <tango.h>
#include <LinacGun.h>
#include <LinacGunClass.h>

/*----- PROTECTED REGION END -----*/	//	LinacGun.cpp

/**
 *  LinacGun class description:
 *    This class will manage the gun of the linac.
 *    The gun is the electrons source of the accelerator.
 *    It defines the pulsed characteristics of the electron beam (duration, rate).
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  dev_state
//  Status        |  dev_status
//  On            |  on
//  Off           |  off
//  Reset         |  reset
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  PulseV        |  Tango::DevDouble	Scalar
//  PulseL        |  Tango::DevDouble	Scalar
//  GridV         |  Tango::DevDouble	Scalar
//  PulseType     |  Tango::DevString	Scalar
//  Delay         |  Tango::DevDouble	Scalar
//  DeflectionDC  |  Tango::DevDouble	Scalar
//  Cleaning      |  Tango::DevBoolean	Scalar
//================================================================

namespace LinacGun_ns
{
/*----- PROTECTED REGION ID(LinacGun::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	LinacGun::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : LinacGun::LinacGun()
 *	Description : Constructors for a Tango device
 *                implementing the classLinacGun
 */
//--------------------------------------------------------
LinacGun::LinacGun(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(LinacGun::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	LinacGun::constructor_1
}
//--------------------------------------------------------
LinacGun::LinacGun(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(LinacGun::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	LinacGun::constructor_2
}
//--------------------------------------------------------
LinacGun::LinacGun(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(LinacGun::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	LinacGun::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : LinacGun::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void LinacGun::delete_device()
{
	DEBUG_STREAM << "LinacGun::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacGun::delete_device) ENABLED START -----*/
	
	//	Delete device allocated objects
	//	Delete device's allocated object
	delete attr_DeflectionDC_read;
	delete attr_Cleaning_read;
	delete attr_Delay_read;
	delete attr_PulseV_read;
	delete attr_PulseL_read;
	delete attr_GridV_read;
	CORBA::string_free(*attr_PulseType_read);
	delete attr_PulseType_read;
#ifndef SIMU
	delete deflectionDCDS;
	delete cleaningRelayDS;
	delete daresburyds;
	delete OnRelayds;
	delete OffRelayds;
	delete pulsePowerSupplyDS;
	delete gridPowerSupplyDS;
	delete ShortRelayds;
	delete pulseLdacds;
	delete Linacds;
	delete myself;
#endif

	/*----- PROTECTED REGION END -----*/	//	LinacGun::delete_device
}

//--------------------------------------------------------
/**
 *	Method      : LinacGun::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void LinacGun::init_device()
{
	DEBUG_STREAM << "LinacGun::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacGun::init_device_before) ENABLED START -----*/
	
	//	Initialization before get_device_property() call
	

	/*----- PROTECTED REGION END -----*/	//	LinacGun::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	
	/*----- PROTECTED REGION ID(LinacGun::init_device) ENABLED START -----*/
	
	//	Initialize device
#ifndef SIMU
	delay_tacods = NULL;
	tacoDelay_imported = false;
#endif
	n_state = Tango::ON;
	attr_DeflectionDC_read = new Tango::DevDouble;
	attr_Cleaning_read = new Tango::DevBoolean;
	attr_Delay_read = new Tango::DevDouble;
	attr_PulseV_read = new Tango::DevDouble;
	attr_PulseL_read = new Tango::DevDouble;
	attr_GridV_read = new Tango::DevDouble;
	attr_PulseType_read = new Tango::DevString;
	*attr_PulseType_read = CORBA::string_dup("-----");
#ifdef SIMU
	*attr_PulseV_read = 0.3;
	*attr_PulseL_read = 2.2;
	*attr_GridV_read = -81.423;
	*attr_PulseType_read = CORBA::string_dup("SHORT");
	set_state(Tango::ON);
	thestate = Tango::ON;
	char * myname = name();
   myself = new Tango::DeviceProxy(myname);
   delete [] myname;
#else
	thestate = Tango::UNKNOWN;
	
	deflectionDCDS  = new Tango::DeviceProxy(deflexionDC_dac.c_str());
	cleaningRelayDS = new Tango::DeviceProxy(cleaning_relay_devicename.c_str());
	
	daresburyds 	= new Tango::DeviceProxy(daresbury.c_str());
	OnRelayds		= new Tango::DeviceProxy(onrelay.c_str());
	OffRelayds		= new Tango::DeviceProxy(offrelay.c_str());
	ShortRelayds	= new Tango::DeviceProxy(short_relay.c_str());
	pulseLdacds	= new Tango::DeviceProxy(pulseL_dac.c_str());
	gridPowerSupplyDS = new Tango::DeviceProxy(gridPowerSupplyDeviceName.c_str());
	pulsePowerSupplyDS = new Tango::DeviceProxy(pulsePowerSupplyDeviceName.c_str());	
	Linacds		= new Tango::DeviceProxy("elin/master/op");
	char * myname = name();
   	myself = new Tango::DeviceProxy(myname);
   	delete [] myname;
	
	// initilialise interlocks variable
	Tango::DevLong module,num;
	double numtmp;
	interlocks.clear();
	module = (Tango::DevLong) stateonnum;
	numtmp = stateonnum *10;
	num = (Tango::DevLong)numtmp % 10;
	module = module - 1;
	num = (num -1) * 2;
	interlocks.push_back(module);
	interlocks.push_back(num);
	module = (Tango::DevLong) statepermnum;
	numtmp = statepermnum *10;
	num = (Tango::DevLong)numtmp % 10;
	module = module - 1;
	num = (num -1) * 2;
	interlocks.push_back(module);
	interlocks.push_back(num);	
	for(unsigned int j=0;j<interlocks_list.size();j++)
	{
		module = (Tango::DevLong) interlocks_list[j];
		numtmp =  interlocks_list[j]*10;
		num = (Tango::DevLong)numtmp % 10;
		module = module - 1;
		num = (num -1) * 2;
		interlocks.push_back(module);
		interlocks.push_back(num);
	}
	// get interlocks descriptions
	Tango::DeviceData argin;
	try
	{
		argin << interlocks;
		Tango::DeviceData ans = daresburyds->command_inout("GetInterlockDescription",argin);
		ans >> intlk_desc;
		for(unsigned int i=0;i<intlk_desc.size();i++)
			DEBUG_STREAM << "intlk_desc[" << i << "] = " << intlk_desc[i] << endl;
	}
	catch(Tango::DevFailed &e)
	{
		ERROR_STREAM << "Could not get Interlocks Description. Is the Daresbury server well running?" << endl;
		throw;
	}
#endif

	/*----- PROTECTED REGION END -----*/	//	LinacGun::init_device
}

//--------------------------------------------------------
/**
 *	Method      : LinacGun::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void LinacGun::get_device_property()
{
	/*----- PROTECTED REGION ID(LinacGun::get_device_property_before) ENABLED START -----*/
	
	//	Initialize property data members
	daresbury	= "ELIN/INTLK/0";
	pulsePowerSupplyDeviceName = "UNINITIALISED!";
	gridPowerSupplyDeviceName  = "UNINITIALISED!";
	delayDeviceName = "ELIN/T-SPARE/6";
	
	deflexionDC_dac = "ELIN/GUN/DEFLECTIONDC_DAC";	// Cleaning deflecting DC.
	cleaning_relay_devicename = "ELIN/R-GUN/352M";	// Reaffected relay !
	
	// interlocks_list is no longer a property
	// The interlocks numbers are written directly in the code.
	interlocks_list.clear();
	interlocks_list.push_back(20.1);
	interlocks_list.push_back(20.2);
	interlocks_list.push_back(20.3);
	interlocks_list.push_back(20.4);
	offrelay			= "ELIN/R-BEAM/OFF";
	onrelay			= "ELIN/R-BEAM/ON";
	pulseL_dac		= "ELIN/GUN/PULSEL-DAC";
	pulsetime 		= 1000;
	short_relay		= "ELIN/R-GUN/SHORT";
	stateonnum		= 19.4;
	statepermnum	= 19.1;

	/*----- PROTECTED REGION END -----*/	//	LinacGun::get_device_property_before


	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("Daresbury"));
	dev_prop.push_back(Tango::DbDatum("GridV_adc"));
	dev_prop.push_back(Tango::DbDatum("GridV_dac"));
	dev_prop.push_back(Tango::DbDatum("Offrelay"));
	dev_prop.push_back(Tango::DbDatum("Onrelay"));
	dev_prop.push_back(Tango::DbDatum("PulseL_dac"));
	dev_prop.push_back(Tango::DbDatum("Pulsetime"));
	dev_prop.push_back(Tango::DbDatum("PulseV_adc"));
	dev_prop.push_back(Tango::DbDatum("PulseV_dac"));
	dev_prop.push_back(Tango::DbDatum("Short_relay"));
	dev_prop.push_back(Tango::DbDatum("Stateonnum"));
	dev_prop.push_back(Tango::DbDatum("Statepermnum"));
	dev_prop.push_back(Tango::DbDatum("PulsePowerSupplyDeviceName"));
	dev_prop.push_back(Tango::DbDatum("GridPowerSupplyDeviceName"));
	dev_prop.push_back(Tango::DbDatum("DelayDeviceName"));
	dev_prop.push_back(Tango::DbDatum("DeflexionDC_dac"));
	dev_prop.push_back(Tango::DbDatum("Cleaning_relay_devicename"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on LinacGunClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		LinacGunClass	*ds_class =
			(static_cast<LinacGunClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize Daresbury from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  daresbury;
		else {
			//	Try to initialize Daresbury from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  daresbury;
		}
		//	And try to extract Daresbury value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  daresbury;

		//	Try to initialize GridV_adc from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  gridV_adc;
		else {
			//	Try to initialize GridV_adc from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  gridV_adc;
		}
		//	And try to extract GridV_adc value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  gridV_adc;

		//	Try to initialize GridV_dac from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  gridV_dac;
		else {
			//	Try to initialize GridV_dac from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  gridV_dac;
		}
		//	And try to extract GridV_dac value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  gridV_dac;

		//	Try to initialize Offrelay from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  offrelay;
		else {
			//	Try to initialize Offrelay from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  offrelay;
		}
		//	And try to extract Offrelay value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  offrelay;

		//	Try to initialize Onrelay from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  onrelay;
		else {
			//	Try to initialize Onrelay from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  onrelay;
		}
		//	And try to extract Onrelay value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  onrelay;

		//	Try to initialize PulseL_dac from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  pulseL_dac;
		else {
			//	Try to initialize PulseL_dac from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  pulseL_dac;
		}
		//	And try to extract PulseL_dac value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  pulseL_dac;

		//	Try to initialize Pulsetime from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  pulsetime;
		else {
			//	Try to initialize Pulsetime from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  pulsetime;
		}
		//	And try to extract Pulsetime value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  pulsetime;

		//	Try to initialize PulseV_adc from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  pulseV_adc;
		else {
			//	Try to initialize PulseV_adc from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  pulseV_adc;
		}
		//	And try to extract PulseV_adc value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  pulseV_adc;

		//	Try to initialize PulseV_dac from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  pulseV_dac;
		else {
			//	Try to initialize PulseV_dac from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  pulseV_dac;
		}
		//	And try to extract PulseV_dac value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  pulseV_dac;

		//	Try to initialize Short_relay from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  short_relay;
		else {
			//	Try to initialize Short_relay from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  short_relay;
		}
		//	And try to extract Short_relay value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  short_relay;

		//	Try to initialize Stateonnum from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  stateonnum;
		else {
			//	Try to initialize Stateonnum from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  stateonnum;
		}
		//	And try to extract Stateonnum value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  stateonnum;

		//	Try to initialize Statepermnum from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  statepermnum;
		else {
			//	Try to initialize Statepermnum from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  statepermnum;
		}
		//	And try to extract Statepermnum value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  statepermnum;

		//	Try to initialize PulsePowerSupplyDeviceName from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  pulsePowerSupplyDeviceName;
		else {
			//	Try to initialize PulsePowerSupplyDeviceName from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  pulsePowerSupplyDeviceName;
		}
		//	And try to extract PulsePowerSupplyDeviceName value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  pulsePowerSupplyDeviceName;

		//	Try to initialize GridPowerSupplyDeviceName from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  gridPowerSupplyDeviceName;
		else {
			//	Try to initialize GridPowerSupplyDeviceName from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  gridPowerSupplyDeviceName;
		}
		//	And try to extract GridPowerSupplyDeviceName value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  gridPowerSupplyDeviceName;

		//	Try to initialize DelayDeviceName from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  delayDeviceName;
		else {
			//	Try to initialize DelayDeviceName from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  delayDeviceName;
		}
		//	And try to extract DelayDeviceName value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  delayDeviceName;

		//	Try to initialize DeflexionDC_dac from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  deflexionDC_dac;
		else {
			//	Try to initialize DeflexionDC_dac from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  deflexionDC_dac;
		}
		//	And try to extract DeflexionDC_dac value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  deflexionDC_dac;

		//	Try to initialize Cleaning_relay_devicename from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  cleaning_relay_devicename;
		else {
			//	Try to initialize Cleaning_relay_devicename from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  cleaning_relay_devicename;
		}
		//	And try to extract Cleaning_relay_devicename value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  cleaning_relay_devicename;

	}

	/*----- PROTECTED REGION ID(LinacGun::get_device_property_after) ENABLED START -----*/
	
	//	Check device property data members init
	TangoSys_OMemStream o;
	for(unsigned int j=0 ; j<interlocks_list.size() ; j++)
	{
		if(j != (interlocks_list.size()-1))
			o << interlocks_list[j] << ",";
		else
			o << interlocks_list[j];
	}
	
	pulsewaittime.tv_sec = pulsetime / 1000;
	pulsewaittime.tv_nsec = (pulsetime%1000) * 1000000;
	
	INFO_STREAM << "Daresbury       = " << daresbury 		<< endl;
	INFO_STREAM << "PulsePowerSupplyDeviceName = " << pulsePowerSupplyDeviceName << endl;
	INFO_STREAM << "GridPowerSupplyDeviceName  = " << gridPowerSupplyDeviceName	<< endl;
	INFO_STREAM << "Interlocks list = " << o.str()			<< endl;
	INFO_STREAM << "Offrelay        = " << offrelay			<< endl;
	INFO_STREAM << "Onrelay         = " << onrelay			<< endl;
	INFO_STREAM << "PulseL DAC      = " << pulseL_dac		<< endl;
	INFO_STREAM << "Pulsetime       = " << pulsetime		<< endl;
	INFO_STREAM << "Short relay     = " << short_relay		<< endl;
	INFO_STREAM << "Stateonnum      = " << stateonnum		<< endl;
	INFO_STREAM << "Statepermnum    = " << statepermnum	<< endl;

	/*----- PROTECTED REGION END -----*/	//	LinacGun::get_device_property_after
}

//--------------------------------------------------------
/**
 *	Method      : LinacGun::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void LinacGun::always_executed_hook()
{
	DEBUG_STREAM << "LinacGun::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacGun::always_executed_hook) ENABLED START -----*/
	
	//	code always executed before all requests
	

	/*----- PROTECTED REGION END -----*/	//	LinacGun::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : LinacGun::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void LinacGun::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "LinacGun::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(LinacGun::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	//	Add your own code here

	/*----- PROTECTED REGION END -----*/	//	LinacGun::read_attr_hardware
}
//--------------------------------------------------------
/**
 *	Method      : LinacGun::write_attr_hardware()
 *	Description : Hardware writing for attributes
 */
//--------------------------------------------------------
void LinacGun::write_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "LinacGun::write_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(LinacGun::write_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	LinacGun::write_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute PulseV related method
 *	Description: Pulse Voltage
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LinacGun::read_PulseV(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LinacGun::read_PulseV(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LinacGun::read_PulseV) ENABLED START -----*/
#ifndef SIMU
        Tango::DeviceAttribute pulseVoltage;
	pulseVoltage = pulsePowerSupplyDS->read_attribute("Voltage");
	pulseVoltage >> *attr_PulseV_read;
#endif    
	attr.set_value(attr_PulseV_read);

	/*----- PROTECTED REGION END -----*/	//	LinacGun::read_PulseV
}
//--------------------------------------------------------
/**
 *	Write attribute PulseV related method
 *	Description: Pulse Voltage
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LinacGun::write_PulseV(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LinacGun::write_PulseV(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LinacGun::write_PulseV) ENABLED START -----*/
#ifdef SIMU
	*attr_PulseV_read = w_val;
#else 
	Tango::DeviceAttribute pulseV("Voltage", w_val);
	pulsePowerSupplyDS->write_attribute(pulseV);
#endif

	/*----- PROTECTED REGION END -----*/	//	LinacGun::write_PulseV
}
//--------------------------------------------------------
/**
 *	Read attribute PulseL related method
 *	Description: Pulse length
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LinacGun::read_PulseL(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LinacGun::read_PulseL(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LinacGun::read_PulseL) ENABLED START -----*/
#ifndef SIMU
	Tango::DevVarDoubleArray * pulseval;
	try
	{
		Tango::DeviceAttribute attval = pulseLdacds->read_attribute("Value");
		attval >> pulseval;
		*attr_PulseL_read = (*pulseval)[0];
		attr_PulseL_write = (*pulseval)[1];
		delete pulseval;
	}
	catch(Tango::DevFailed &e)
	{
		Tango::Except::print_exception(e);
		return;
	}
#endif
	attr.set_value(attr_PulseL_read);
#ifdef SIMU
	// change set value according to dac device value set point
	Tango::MultiAttribute		*attr_list;
	attr_list = get_device_attr();
	Tango::WAttribute	&myattr = attr_list->get_w_attr_by_name ("PulseL");
	try
	{
		myattr.set_write_value(attr_PulseL_write);
	}
	catch(Tango::DevFailed &e)
	{
		Tango::Except::print_exception(e);
	}
#endif

	/*----- PROTECTED REGION END -----*/	//	LinacGun::read_PulseL
}
//--------------------------------------------------------
/**
 *	Write attribute PulseL related method
 *	Description: Pulse length
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LinacGun::write_PulseL(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LinacGun::write_PulseL(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LinacGun::write_PulseL) ENABLED START -----*/
#ifdef SIMU
	*attr_PulseL_read = w_val;
#else
	write_dac_val(pulseLdacds,w_val);
#endif

	/*----- PROTECTED REGION END -----*/	//	LinacGun::write_PulseL
}
//--------------------------------------------------------
/**
 *	Read attribute GridV related method
 *	Description: Grid Voltage
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LinacGun::read_GridV(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LinacGun::read_GridV(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LinacGun::read_GridV) ENABLED START -----*/
#ifndef SIMU
        Tango::DeviceAttribute gridVoltage;
	gridVoltage = gridPowerSupplyDS->read_attribute("Voltage");
	gridVoltage >> *attr_GridV_read;
	if (*attr_GridV_read > 0)
	{
		*attr_GridV_read *= -1.0;
	}
#endif
	attr.set_value(attr_GridV_read);

	/*----- PROTECTED REGION END -----*/	//	LinacGun::read_GridV
}
//--------------------------------------------------------
/**
 *	Write attribute GridV related method
 *	Description: Grid Voltage
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LinacGun::write_GridV(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LinacGun::write_GridV(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LinacGun::write_GridV) ENABLED START -----*/

#ifdef SIMU
	*attr_GridV_read = w_val;
#else
	if (w_val < 0)
	{
		w_val *= -1.0;
	}

	Tango::DeviceAttribute gridV("Voltage", w_val);
	gridPowerSupplyDS->write_attribute(gridV);
#endif

	/*----- PROTECTED REGION END -----*/	//	LinacGun::write_GridV
}
//--------------------------------------------------------
/**
 *	Read attribute PulseType related method
 *	Description: Pulse Type :\nPossible values are : short or long
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LinacGun::read_PulseType(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LinacGun::read_PulseType(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LinacGun::read_PulseType) ENABLED START -----*/
	#ifndef SIMU
	Tango::DevState relaystate;
	try
	{
		Tango::DeviceData rstate = ShortRelayds->command_inout("State");
		rstate >> relaystate;
	}
	catch(Tango::DevFailed &e)
	{
		Tango::Except::print_exception(e);
		throw;
	}
	if(relaystate == Tango::OPEN)
		strcpy(*attr_PulseType_read,"LONG");
	else
		strcpy(*attr_PulseType_read,"SHORT");
#endif
	attr.set_value(attr_PulseType_read);

	/*----- PROTECTED REGION END -----*/	//	LinacGun::read_PulseType
}
//--------------------------------------------------------
/**
 *	Write attribute PulseType related method
 *	Description: Pulse Type :\nPossible values are : short or long
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LinacGun::write_PulseType(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LinacGun::write_PulseType(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevString	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LinacGun::write_PulseType) ENABLED START -----*/
	string cmd;
	try{	dev_state(); }
	catch(Tango::DevFailed &e) { Tango::Except::print_exception(e);}
	try
	{
		myself->read_attribute("PulseType");
	}
	catch(Tango::DevFailed &e) { Tango::Except::print_exception(e);}
	
	
	if(strcasecmp(w_val,"SHORT") == 0)
	{
		if((thestate == Tango::ON) || (thestate == Tango::UNKNOWN))
		{
			if(strcasecmp(*attr_PulseType_read,"LONG") == 0)
			{
				Tango::Except::throw_exception 
				((const char *)"PulseTypeChangeNotAllowedWhenBeamOnOrUnknown",
				(const char *) "Cannot change Pulse Type when the beam is on or unknown", 
				(const char *) "LinacGun::write_PulseType()");
			}
		}
#ifdef SIMU
		strcpy(*attr_PulseType_read,"SHORT");
#endif
		cmd = "Close";		
	}
	else
	{
		if(strcasecmp(w_val,"LONG") == 0)
		{
			if((thestate == Tango::ON) || (thestate == Tango::UNKNOWN))
			{
				if(strcasecmp(*attr_PulseType_read,"SHORT") == 0)
				{
					Tango::Except::throw_exception 
					((const char *)"PulseTypeChangeNotAllowedWhenBeamOnOrUnknown",
					(const char *) "Cannot change Pulse Type when the beam is on or unknown", 
					(const char *) "LinacGun::write_PulseType()");
				}
			}
#ifdef SIMU
		strcpy(*attr_PulseType_read,"LONG");
#endif
			cmd = "Open";
		}
		else
		{
			Tango::Except::throw_exception ((const char *)"BadInputParameter",
			(const char *)"Possible values are : \"LONG\" or \"SHORT\"",
			(const char *)"LinacGun::write_PulseType");
		}
	}
#ifndef SIMU
	try
	{
		ShortRelayds->command_inout(cmd.c_str());
	}
	catch(Tango::DevFailed &e)
	{
		Tango::Except::print_exception(e);
		throw;
	}
	if(strcasecmp(w_val,"LONG") == 0)
		strcpy(*attr_PulseType_read,"LONG");
	else
		strcpy(*attr_PulseType_read,"SHORT");
#endif

	/*----- PROTECTED REGION END -----*/	//	LinacGun::write_PulseType
}
//--------------------------------------------------------
/**
 *	Read attribute Delay related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LinacGun::read_Delay(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LinacGun::read_Delay(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LinacGun::read_Delay) ENABLED START -----*/
#ifndef SIMU
	if(tacoDelay_imported == false)
	{
		// Taco device not imported
		// try to import it
		cout << "delay device name = " << delayDeviceName << endl;
		Tango::DevLong error;
		int status = dev_import((char*) delayDeviceName.c_str(), 0 ,&delay_tacods,&error);
		if(status == 0)
		{
			tacoDelay_imported = true;
			INFO_STREAM << "delay taco device " << delayDeviceName << " successfully imported" << endl;
		}
		else
		{
			tacoDelay_imported = false;
			char *p_err = dev_error_str(error);
			cerr << "delay taco device " << delayDeviceName <<" import failure: " << p_err << endl;
			ERROR_STREAM <<p_err << endl;
			free(p_err);
			TangoSys_OMemStream o;
			o << "Taco device " << delayDeviceName << ": " << dev_error_str(error) << ends;
			Tango::Except::throw_exception 
			((const char *)"UnableToReadDelay",
			o.str(),
			(const char *)"LinacGun::read_Delay()");
		}
	}
	
	long tacostatus;
	Tango::DevLong tacoerror;
	Tango::DevDouble setdelay;
	DevStateFloatReadPoint tacodelay;

	tacostatus = dev_putget(delay_tacods,DevUpdate,NULL,D_VOID_TYPE,&tacodelay,
									D_STATE_FLOAT_READPOINT,&tacoerror);

	if(tacostatus == DS_OK)
	{
		*attr_Delay_read = tacodelay.read;
		Delay_State = tacodelay.state;
		setdelay = tacodelay.set;
	}
	else
	{
		char *p_err;
		p_err = dev_error_str(tacoerror);
		ERROR_STREAM << "LinacGun::read_Delay: Unable to read delay." << p_err << endl;
		free(p_err);
		TangoSys_OMemStream o;
		o << "Taco device " << delayDeviceName << ": " << dev_error_str(tacoerror) << ends;
		Tango::Except::throw_exception 
			((const char *)"UnableToReadDelay",
			o.str(),
			(const char *)"LinacGun::read_Delay()");
	}
	// update the current attribute set value
	Tango::MultiAttribute		*attr_list;
	attr_list = get_device_attr();
	Tango::WAttribute	&attr_delay = attr_list->get_w_attr_by_name ("Delay");
	attr_delay.set_write_value(setdelay);
	attr.set_value(attr_Delay_read);
#else
        attr.set_value(attr_Delay_read);
#endif
        
	/*----- PROTECTED REGION END -----*/	//	LinacGun::read_Delay
}
//--------------------------------------------------------
/**
 *	Write attribute Delay related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LinacGun::write_Delay(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LinacGun::write_Delay(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LinacGun::write_Delay) ENABLED START -----*/
#ifndef SIMU
	if(tacoDelay_imported == false)
	{
		// Taco device not imported
		// try to import it
		cout << "delay device name = " << delayDeviceName << endl;
		Tango::DevLong error;
		int status = dev_import((char*) delayDeviceName.c_str(),0,&delay_tacods,&error);
		if(status == 0)
		{
			tacoDelay_imported = true;
			INFO_STREAM << "delay taco device " << delayDeviceName << " successfully imported" << endl;
		}
		else
		{
			tacoDelay_imported = false;
			char *p_err = dev_error_str(error);
			cerr << "delay taco device " << delayDeviceName <<" import failure: " << p_err << endl;
			ERROR_STREAM <<p_err << endl;
			free(p_err);
			TangoSys_OMemStream o;
			o << "Taco device " << delayDeviceName << ": " << dev_error_str(error) << ends;
			Tango::Except::throw_exception 
			((const char *)"UnableToSetDelay",
			o.str(),
			(const char *)"LinacGun::write_Delay()");
		}
	}
	DevFloat setdelay = w_val;
	long tacostatus;
	Tango::DevLong tacoerror;
	tacostatus=dev_putget(delay_tacods,DevSetValue,&setdelay,D_FLOAT_TYPE,NULL,D_VOID_TYPE,&tacoerror);
	if(tacostatus != DS_OK)
	{
		char *p_err;
		p_err = dev_error_str(tacoerror);
		ERROR_STREAM << "LinacGun::write_Delay: Unable to set delay." << p_err << endl;
		free(p_err);
		TangoSys_OMemStream o;
		o << "Taco device " << delayDeviceName << ": " << dev_error_str(tacoerror) << ends;
		Tango::Except::throw_exception 
			((const char *)"UnableToSetDelay",
			o.str(),
			(const char *)"LinacGun::write_Delay()");
	}
#endif

	/*----- PROTECTED REGION END -----*/	//	LinacGun::write_Delay
}
//--------------------------------------------------------
/**
 *	Read attribute DeflectionDC related method
 *	Description: This if the DC value applied to the DAC that handles\nthe deflection plate in the linac cleaning system.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LinacGun::read_DeflectionDC(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LinacGun::read_DeflectionDC(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LinacGun::read_DeflectionDC) ENABLED START -----*/
	// Actually the read point is Only what was written. 
	// E.Rabeuf knows that this can lead to error prone situation
	// but he says he has different ways to read this value.
	*attr_DeflectionDC_read = attr_DeflectionDC_write;
	attr.set_value(attr_DeflectionDC_read);

	/*----- PROTECTED REGION END -----*/	//	LinacGun::read_DeflectionDC
}
//--------------------------------------------------------
/**
 *	Write attribute DeflectionDC related method
 *	Description: This if the DC value applied to the DAC that handles\nthe deflection plate in the linac cleaning system.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LinacGun::write_DeflectionDC(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LinacGun::write_DeflectionDC(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LinacGun::write_DeflectionDC) ENABLED START -----*/
	write_dac_val(deflectionDCDS, w_val);

	/*----- PROTECTED REGION END -----*/	//	LinacGun::write_DeflectionDC
}
//--------------------------------------------------------
/**
 *	Read attribute Cleaning related method
 *	Description: This boolean value allow/prohibit cleaning system.\nIt only handle a relay given in property device.
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LinacGun::read_Cleaning(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LinacGun::read_Cleaning(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LinacGun::read_Cleaning) ENABLED START -----*/
#ifndef SIMU
	Tango::DevState state;
	Tango::DeviceData data = cleaningRelayDS->command_inout("state");
	data >> state;
	
	switch(state)
	{
		case Tango::OPEN:
			*attr_Cleaning_read = false;
		break;
		
		case Tango::CLOSE:
			*attr_Cleaning_read = true;
		break;
		
		default:
			attr.set_quality(Tango::ATTR_INVALID);
		break;
	}
#endif
	attr.set_value(attr_Cleaning_read);

	/*----- PROTECTED REGION END -----*/	//	LinacGun::read_Cleaning
}
//--------------------------------------------------------
/**
 *	Write attribute Cleaning related method
 *	Description: This boolean value allow/prohibit cleaning system.\nIt only handle a relay given in property device.
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LinacGun::write_Cleaning(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LinacGun::write_Cleaning(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LinacGun::write_Cleaning) ENABLED START -----*/
	
	if(w_val == true)
	{
		// Close the relay to enable cleaning.
		cleaningRelayDS->command_inout("Close");
	}
	else
	{
		// Open the relay to disable cleaning.
		cleaningRelayDS->command_inout("Open");
	}

	/*----- PROTECTED REGION END -----*/	//	LinacGun::write_Cleaning
}

//--------------------------------------------------------
/**
 *	Method      : LinacGun::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void LinacGun::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(LinacGun::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
	/*----- PROTECTED REGION END -----*/	//	LinacGun::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command State related method
 *	Description: This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
 *
 *	@returns State Code
 */
//--------------------------------------------------------
Tango::DevState LinacGun::dev_state()
{
	DEBUG_STREAM << "LinacGun::State()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacGun::dev_state) ENABLED START -----*/
	
	Tango::DevState	argout = Tango::UNKNOWN; // replace by your own algorithm
	//	Add your own code
	evalue_state();
	set_state(thestate);
	argout = DeviceImpl::dev_state();

	/*----- PROTECTED REGION END -----*/	//	LinacGun::dev_state
	set_state(argout);    // Give the state to Tango.
	if (argout!=Tango::ALARM)
		DeviceImpl::dev_state();
	return get_state();  // Return it after Tango management.
}
//--------------------------------------------------------
/**
 *	Command Status related method
 *	Description: This command gets the device status (stored in its <i>device_status</i> data member) and returns it to the caller.
 *
 *	@returns Status description
 */
//--------------------------------------------------------
Tango::ConstDevString LinacGun::dev_status()
{
	DEBUG_STREAM << "LinacGun::Status()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacGun::dev_status) ENABLED START -----*/
	
	string	status = "Device is OK";
	//	Add your own code
	#ifndef SIMU
//	dev_state(); // The State attribute mut be polled !
	switch(thestate)
	{
	case Tango::UNKNOWN:
		thestatus = "Interlock status not readable !";
		break;
	case Tango::OFF:
		thestatus = intlk_desc[0];
		break;
	case Tango::ON:
		thestatus = "ON";
		break;
	case Tango::DISABLE:
		thestatus = "Can' t be switch on while : \n";
		for(unsigned int i=1; i<intlk_states.size() ; i++)
		{
			if(intlk_states[i] == 0)
			{
				thestatus += intlk_desc[i];
				thestatus += "\n";
			}
		}
		break;
	case Tango::FAULT:
		thestatus = "";
		for(unsigned int i=2; i<intlk_states.size() ; i++)
		{
			if(intlk_states[i] == 0)
			{
				thestatus += intlk_desc[i];
				thestatus += "\n";
			}
		}
		break;
	default:
		break;
	}
	
	set_status(thestatus.c_str());
#endif

	/*----- PROTECTED REGION END -----*/	//	LinacGun::dev_status
	set_status(status);               // Give the status to Tango.
	return DeviceImpl::dev_status();  // Return it.
}
//--------------------------------------------------------
/**
 *	Command On related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void LinacGun::on()
{
	DEBUG_STREAM << "LinacGun::On()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacGun::on) ENABLED START -----*/
	
	//	Add your own code
	struct timespec waittime;
	struct timespec remtime;

	DEBUG_STREAM << "LinacGun::on(): entering... !" << endl;

	//	Add your own code to control device here
#ifdef SIMU
	set_state(Tango::ON);
	thestate = Tango::ON;
#else
	try
	{
		// Calling this command will force the Linac main server to re-read the 
		// PCT device source that will be used by the BeamStopThread. So if PCT
		// device source has changed, linac masterop will use it.
		Linacds->command_inout("GetPCTDeviceName");
	}
	catch(Tango::DevFailed &e)
	{
		Tango::Except::print_exception(e);
	}

	try
	{
		// Calling this command will force the Linac main server to re-read the 
		// ICT device source that will be used by the BeamStopThread. So if ICT
		// device source has changed, linac masterop will use it.
		Linacds->command_inout("GetICTDeviceName");
	}
	catch(Tango::DevFailed &e)
	{
		Tango::Except::print_exception(e);
	}
	
	
	// TODO (BVR 6 May): correct error handling into ModbusCoreSL or return a
	// more explicit exception to avoid the error message "Unknown error message: -1"
	try
	{
		OnRelayds->command_inout("close");
	}
	catch(...)
	{
		ERROR_STREAM << "LinacGun::on():Error activating the pulsed relay (close command)" << onrelay.c_str() <<  endl;
		throw;
	}
	
	waittime = pulsewaittime;
	while ((nanosleep(&waittime,&remtime) == -1) && (errno == EINTR))
				waittime = remtime;
	try
	{
		OnRelayds->command_inout("open");
	}
	catch(...)
	{
		ERROR_STREAM << "LinacGun::on():Error activating the pulsed relay (open command)" << onrelay.c_str() <<  endl;
		throw;
	}
	n_state = Tango::ON;
#endif

	/*----- PROTECTED REGION END -----*/	//	LinacGun::on
}
//--------------------------------------------------------
/**
 *	Command Off related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void LinacGun::off()
{
	DEBUG_STREAM << "LinacGun::Off()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacGun::off) ENABLED START -----*/
	
	//	Add your own code
	struct timespec waittime;
	struct timespec remtime;
	
	DEBUG_STREAM << "LinacGun::off(): entering... !" << endl;

	//	Add your own code to control device here
#ifdef SIMU
	set_state(Tango::OFF);
	thestate = Tango::OFF;
#else
	try
	{
		OffRelayds->command_inout("open");
	}
	catch(...)
	{
		ERROR_STREAM << "LinacGun::off():Error activating the pulsed relay (open command)" << offrelay.c_str() <<  endl;
		throw;
	}
	waittime = pulsewaittime;
	while ((nanosleep(&waittime,&remtime) == -1) && (errno == EINTR))
				waittime = remtime;
	try
	{
		OffRelayds->command_inout("close");
	}
	catch(...)
	{
		ERROR_STREAM << "LinacGun::off():Error activating the pulsed relay (close command)" << offrelay.c_str() <<  endl;
		throw;
	}
	n_state = Tango::OFF;
#endif

	/*----- PROTECTED REGION END -----*/	//	LinacGun::off
}
//--------------------------------------------------------
/**
 *	Command Reset related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void LinacGun::reset()
{
	DEBUG_STREAM << "LinacGun::Reset()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacGun::reset) ENABLED START -----*/
	
	//	Add your own code
	#ifdef SIMU
switch(get_state())
	{
		case Tango::FAULT:
			set_state(Tango::OFF);
			thestate = Tango::OFF;
			break;
		case Tango::ON:
			set_state(Tango::FAULT);
			thestate = Tango::FAULT;
			break;
		case Tango::DISABLE:
			set_state(Tango::ON);
			thestate = Tango::ON;
			break;
		case Tango::OFF:
			set_state(Tango::DISABLE);
			thestate = Tango::DISABLE;
			break;
		default:
			set_state(Tango::ON);
			thestate = Tango::ON;
	}
#else
	// reset the Daresbury
	try
	{
		daresburyds->command_inout("Reset");
	}
	catch(Tango::DevFailed &e)
	{
		Tango::Except::print_exception(e);
		throw;
	}
	n_state = Tango::OFF;
#endif

	/*----- PROTECTED REGION END -----*/	//	LinacGun::reset
}
//--------------------------------------------------------
/**
 *	Method      : LinacGun::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void LinacGun::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(LinacGun::add_dynamic_commands) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic commands if any
	
	/*----- PROTECTED REGION END -----*/	//	LinacGun::add_dynamic_commands
}

/*----- PROTECTED REGION ID(LinacGun::namespace_ending) ENABLED START -----*/

//	Additional Methods
//+------------------------------------------------------------------
/**
 *	method:	LinacGun::read_adc_val
 *
 *	description:	Get a value from ADC device
 *	This command reads the "Value" Attribute on the device adcds given in parameter
 *
 * readval will be set with the read value
 *
 * This method will throw an exception if it occurs
 *
 */
//+------------------------------------------------------------------
void LinacGun::read_adc_val(Tango::DeviceProxy * adcds, Tango::DevDouble *readval)
{
#ifndef SIMU
	try
	{
		Tango::DeviceAttribute readattr = adcds->read_attribute("Value");
		readattr >> *readval;
	}
	catch(Tango::DevFailed &e)
	{
		Tango::Except::print_exception(e);
		throw;
	}
#endif
}
//+------------------------------------------------------------------
/**
 *	method:	LinacGun::update_setval
 *
 *	description:	Get the set value from DAC device
 *	This command reads the set point of the "Value" Attribute on the device dacds given in parameter
 * and set the attr_name attribute write value with this value.
 *
 * setvalue will be set with the set point value read
 *
 * This method will catch Tango::DevFailed exceptions
 *
 */
//+------------------------------------------------------------------
void LinacGun::update_setval(Tango::DeviceProxy * dacds,const char* attr_name,Tango::DevDouble *setvalue)
{
#ifndef SIMU
// read set value on the dac device
	Tango::DevVarDoubleArray * setval;
	try
	{
		Tango::DeviceAttribute attval = dacds->read_attribute("Value");
		attval >> setval;
		*setvalue = (*setval)[1];
		delete setval;
	}
	catch(Tango::DevFailed &e)
	{
		Tango::Except::print_exception(e);
		return;
	}
	// change set value according to dac device value set point
	Tango::MultiAttribute		*attr_list;
	attr_list = get_device_attr();
	Tango::WAttribute	&myattr = attr_list->get_w_attr_by_name (attr_name);
	try
	{
		myattr.set_write_value(*setvalue);
	}
	catch(Tango::DevFailed &e)
	{
		Tango::Except::print_exception(e);
	}
#endif
}
//+------------------------------------------------------------------
/**
 *	method:	LinacGun::write_dac_val
 *
 *	description:	write value to DAC device
 *	This command write the "Value" attribute of the DAC device with the setval parameter
 *
 * This method will throw an exception if it occurs
 */
//+------------------------------------------------------------------
void LinacGun::write_dac_val(Tango::DeviceProxy * dacds,Tango::DevDouble setvalue)
{
#ifndef SIMU
	Tango::DevDouble setval = setvalue;
	Tango::DeviceAttribute setattr("Value",setval);
	try
	{
		dacds->write_attribute(setattr);
	}
	catch (Tango::DevFailed &e)
	{
		Tango::Except::print_exception(e);
		throw;
	}
#endif
}
/*
 * This function will read the interlocks attribute from the Daresbury device server
 * Description:evaluate the state of the device by reading the state of the
 * corresponding  Daresbury relay.
 * the state of the object is directly updated.
 */
void LinacGun::evalue_state()
{
	DEBUG_STREAM << "LinacGun::evalue_state(): entering... !" << endl;
#ifndef SIMU
	Tango::DeviceData argin;
	try
	{
		argin << interlocks;
		
		Tango::DeviceData ans = daresburyds->command_inout("GetInterlockState",argin);
		ans >> intlk_states;
	}
	catch(Tango::DevFailed &e)
	{
		thestate = Tango::UNKNOWN;
		Tango::Except::print_exception(e);
		return;
	}
	for(unsigned int i=0;i<intlk_states.size();i++)
		DEBUG_STREAM << "LinacGun: intlk_states[" << i << "] = " << intlk_states[i] << endl;

	if(intlk_states[0] == 1)
	{
		thestate = Tango::ON;
		n_state = Tango::ON;
		return;
	}
	if(intlk_states[1] == 0)
	{
		thestate = Tango::DISABLE;
		n_state = Tango::OFF;
		return;
	}
	
	if (((intlk_states[2]==0)||(intlk_states[3]==0)) && ((intlk_states[4]==0)||(intlk_states[5]==0)))
	{
		if(n_state == Tango::ON)
 			thestate = Tango::FAULT;
 		else
 			thestate = Tango::DISABLE;
 		return;
	}
	// for(int i=2;i<intlk_states.size();i++)
// 	{
// 		if(intlk_states[i] == 0)
// 		{
// 			if(n_state == Tango::ON)
// 				thestate = Tango::FAULT;
// 			else
// 				thestate = Tango::DISABLE;
// 			return;
// 		}
// 	}
	thestate = Tango::OFF;
	return;

#endif
}


/*----- PROTECTED REGION END -----*/	//	LinacGun::namespace_ending
} //	namespace
