/*----- PROTECTED REGION ID(LinacSequencer.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        LinacSequencer.cpp
//
// description : C++ source for the LinacSequencer class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               LinacSequencer are implemented in this file.
//
// project :     Sequencer Server for LINAC
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <tango.h>
#include <LinacSequencer.h>
#include <LinacSequencerClass.h>
#include <LinacSeqThread.h>

/*----- PROTECTED REGION END -----*/	//	LinacSequencer.cpp

/**
 *  LinacSequencer class description:
 *    Sequencer server to execute the necessary sequences to start and stop the LINAC.
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  dev_state
//  Status        |  dev_status
//  Abort         |  abort
//  LoadFile      |  load_file
//  SaveFile      |  save_file
//  ForceSave     |  force_save
//  On            |  on
//  Off           |  off
//  LowHeating    |  low_heating
//  Standby       |  standby
//  Reset         |  reset
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  IsFileLoaded     |  Tango::DevBoolean	Scalar
//  SequenceHistory  |  Tango::DevString	Spectrum  ( max = 500)
//================================================================

namespace LinacSequencer_ns
{
/*----- PROTECTED REGION ID(LinacSequencer::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	LinacSequencer::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : LinacSequencer::LinacSequencer()
 *	Description : Constructors for a Tango device
 *                implementing the classLinacSequencer
 */
//--------------------------------------------------------
LinacSequencer::LinacSequencer(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(LinacSequencer::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	LinacSequencer::constructor_1
}
//--------------------------------------------------------
LinacSequencer::LinacSequencer(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(LinacSequencer::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	LinacSequencer::constructor_2
}
//--------------------------------------------------------
LinacSequencer::LinacSequencer(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(LinacSequencer::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	LinacSequencer::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : LinacSequencer::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void LinacSequencer::delete_device()
{
	DEBUG_STREAM << "LinacSequencer::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacSequencer::delete_device) ENABLED START -----*/
	
	//	Delete device allocated objects
	//	Delete device's allocated object
	delete attr_IsFileLoaded_read;
	bool killed = false;
	{
		omni_mutex_lock l(mutex);
		killthread = true;
		quit = true;
	}
	sequence_thread->join(NULL);

	/*----- PROTECTED REGION END -----*/	//	LinacSequencer::delete_device
}

//--------------------------------------------------------
/**
 *	Method      : LinacSequencer::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void LinacSequencer::init_device()
{
	DEBUG_STREAM << "LinacSequencer::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacSequencer::init_device_before) ENABLED START -----*/
	
	//	Initialization before get_device_property() call
		// Get the device names for all LINAC devices
	// The names should be read from a central property!
	
	{
		omni_mutex_lock l(mutex);
		gun_aux_name 		= 	"elin/gun/aux";
		gun_name			=	"elin/beam/run";
		gun_HV_name			=	"elin/gun/hv";
		rf_run_name			=	"elin/rf/run";
		cooling_name		=	"elin/cool/1";
		mod1_aux_name		=	"elin/mod1/aux";
		mod2_aux_name		=	"elin/mod2/aux";
		mod1_HV_name		=	"elin/mod1/hv";
		mod2_HV_name		=	"elin/mod2/hv";
		mod1_name			=	"elin/mod1/run";
		mod2_name			=	"elin/mod2/run";
		focus_klystron1_name= 	"elin/focus/klystron1";
		focus_klystron2_name= 	"elin/focus/klystron2";
		focus_beam1_name	=	"elin/focus/beam1";
		focus_beam2_name	=	"elin/focus/beam2";
		focus_steer_name	=	"elin/steer/1";
		
		gun_gunaux_tdk_name			= "elin/gun/all-tdk";
		gun_focus_b1b4_tdk_name		= "elin/focus/gun";
		gun_steerer_tdk_name		= "elin/steer/gun";
		prebuncher_steerer_tdk_name = "elin/steer/pbunch";
	}	



	/*----- PROTECTED REGION END -----*/	//	LinacSequencer::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	
	/*----- PROTECTED REGION ID(LinacSequencer::init_device) ENABLED START -----*/
	
	//	Initialize device
	attr_IsFileLoaded_read = new Tango::DevBoolean;
	*attr_IsFileLoaded_read = true;
	
	// initialise the thread comunication variables
	
	{
		omni_mutex_lock l(mutex);
		error = false;
		run = false;
		start = false;
		cmd = NO_MACRO;
		quit = false;
		killthread = false;
		isFileLoaded = true;
		sequence_history.clear();
	}

	sequence_thread = new LinacSeqThread(this, mutex);

	/*----- PROTECTED REGION END -----*/	//	LinacSequencer::init_device
}

//--------------------------------------------------------
/**
 *	Method      : LinacSequencer::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void LinacSequencer::get_device_property()
{
	/*----- PROTECTED REGION ID(LinacSequencer::get_device_property_before) ENABLED START -----*/
	
	//	Initialize property data members
	

	/*----- PROTECTED REGION END -----*/	//	LinacSequencer::get_device_property_before


	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("Timeout"));
	dev_prop.push_back(Tango::DbDatum("Gun_aux_name"));
	dev_prop.push_back(Tango::DbDatum("Gun_name"));
	dev_prop.push_back(Tango::DbDatum("Gun_HV_name"));
	dev_prop.push_back(Tango::DbDatum("Rf_run_name"));
	dev_prop.push_back(Tango::DbDatum("Cooling_name"));
	dev_prop.push_back(Tango::DbDatum("Mod1_aux_name"));
	dev_prop.push_back(Tango::DbDatum("Mod2_aux_name"));
	dev_prop.push_back(Tango::DbDatum("Mod1_HV_name"));
	dev_prop.push_back(Tango::DbDatum("Mod2_HV_name"));
	dev_prop.push_back(Tango::DbDatum("Mod1_name"));
	dev_prop.push_back(Tango::DbDatum("Mod2_name"));
	dev_prop.push_back(Tango::DbDatum("Focus_klystron1_name"));
	dev_prop.push_back(Tango::DbDatum("Focus_klystron2_name"));
	dev_prop.push_back(Tango::DbDatum("Focus_beam1_name"));
	dev_prop.push_back(Tango::DbDatum("Focus_beam2_name"));
	dev_prop.push_back(Tango::DbDatum("Focus_steer_name"));
	dev_prop.push_back(Tango::DbDatum("Gun_focus_b1b4_tdk_name"));
	dev_prop.push_back(Tango::DbDatum("Gun_steerer_tdk_name"));
	dev_prop.push_back(Tango::DbDatum("Prebuncher_steerer_tdk_name"));
	dev_prop.push_back(Tango::DbDatum("Gun_gunaux_tdk_name"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on LinacSequencerClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		LinacSequencerClass	*ds_class =
			(static_cast<LinacSequencerClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize Timeout from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  timeout;
		else {
			//	Try to initialize Timeout from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  timeout;
		}
		//	And try to extract Timeout value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  timeout;

		//	Try to initialize Gun_aux_name from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  gun_aux_name;
		else {
			//	Try to initialize Gun_aux_name from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  gun_aux_name;
		}
		//	And try to extract Gun_aux_name value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  gun_aux_name;

		//	Try to initialize Gun_name from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  gun_name;
		else {
			//	Try to initialize Gun_name from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  gun_name;
		}
		//	And try to extract Gun_name value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  gun_name;

		//	Try to initialize Gun_HV_name from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  gun_HV_name;
		else {
			//	Try to initialize Gun_HV_name from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  gun_HV_name;
		}
		//	And try to extract Gun_HV_name value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  gun_HV_name;

		//	Try to initialize Rf_run_name from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  rf_run_name;
		else {
			//	Try to initialize Rf_run_name from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  rf_run_name;
		}
		//	And try to extract Rf_run_name value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  rf_run_name;

		//	Try to initialize Cooling_name from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  cooling_name;
		else {
			//	Try to initialize Cooling_name from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  cooling_name;
		}
		//	And try to extract Cooling_name value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  cooling_name;

		//	Try to initialize Mod1_aux_name from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  mod1_aux_name;
		else {
			//	Try to initialize Mod1_aux_name from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  mod1_aux_name;
		}
		//	And try to extract Mod1_aux_name value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  mod1_aux_name;

		//	Try to initialize Mod2_aux_name from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  mod2_aux_name;
		else {
			//	Try to initialize Mod2_aux_name from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  mod2_aux_name;
		}
		//	And try to extract Mod2_aux_name value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  mod2_aux_name;

		//	Try to initialize Mod1_HV_name from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  mod1_HV_name;
		else {
			//	Try to initialize Mod1_HV_name from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  mod1_HV_name;
		}
		//	And try to extract Mod1_HV_name value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  mod1_HV_name;

		//	Try to initialize Mod2_HV_name from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  mod2_HV_name;
		else {
			//	Try to initialize Mod2_HV_name from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  mod2_HV_name;
		}
		//	And try to extract Mod2_HV_name value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  mod2_HV_name;

		//	Try to initialize Mod1_name from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  mod1_name;
		else {
			//	Try to initialize Mod1_name from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  mod1_name;
		}
		//	And try to extract Mod1_name value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  mod1_name;

		//	Try to initialize Mod2_name from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  mod2_name;
		else {
			//	Try to initialize Mod2_name from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  mod2_name;
		}
		//	And try to extract Mod2_name value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  mod2_name;

		//	Try to initialize Focus_klystron1_name from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  focus_klystron1_name;
		else {
			//	Try to initialize Focus_klystron1_name from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  focus_klystron1_name;
		}
		//	And try to extract Focus_klystron1_name value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  focus_klystron1_name;

		//	Try to initialize Focus_klystron2_name from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  focus_klystron2_name;
		else {
			//	Try to initialize Focus_klystron2_name from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  focus_klystron2_name;
		}
		//	And try to extract Focus_klystron2_name value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  focus_klystron2_name;

		//	Try to initialize Focus_beam1_name from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  focus_beam1_name;
		else {
			//	Try to initialize Focus_beam1_name from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  focus_beam1_name;
		}
		//	And try to extract Focus_beam1_name value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  focus_beam1_name;

		//	Try to initialize Focus_beam2_name from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  focus_beam2_name;
		else {
			//	Try to initialize Focus_beam2_name from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  focus_beam2_name;
		}
		//	And try to extract Focus_beam2_name value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  focus_beam2_name;

		//	Try to initialize Focus_steer_name from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  focus_steer_name;
		else {
			//	Try to initialize Focus_steer_name from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  focus_steer_name;
		}
		//	And try to extract Focus_steer_name value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  focus_steer_name;

		//	Try to initialize Gun_focus_b1b4_tdk_name from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  gun_focus_b1b4_tdk_name;
		else {
			//	Try to initialize Gun_focus_b1b4_tdk_name from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  gun_focus_b1b4_tdk_name;
		}
		//	And try to extract Gun_focus_b1b4_tdk_name value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  gun_focus_b1b4_tdk_name;

		//	Try to initialize Gun_steerer_tdk_name from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  gun_steerer_tdk_name;
		else {
			//	Try to initialize Gun_steerer_tdk_name from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  gun_steerer_tdk_name;
		}
		//	And try to extract Gun_steerer_tdk_name value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  gun_steerer_tdk_name;

		//	Try to initialize Prebuncher_steerer_tdk_name from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  prebuncher_steerer_tdk_name;
		else {
			//	Try to initialize Prebuncher_steerer_tdk_name from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  prebuncher_steerer_tdk_name;
		}
		//	And try to extract Prebuncher_steerer_tdk_name value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  prebuncher_steerer_tdk_name;

		//	Try to initialize Gun_gunaux_tdk_name from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  gun_gunaux_tdk_name;
		else {
			//	Try to initialize Gun_gunaux_tdk_name from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  gun_gunaux_tdk_name;
		}
		//	And try to extract Gun_gunaux_tdk_name value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  gun_gunaux_tdk_name;

	}

	/*----- PROTECTED REGION ID(LinacSequencer::get_device_property_after) ENABLED START -----*/
	
	//	Check device property data members init
	INFO_STREAM << "timeout = " << timeout << endl;

	/*----- PROTECTED REGION END -----*/	//	LinacSequencer::get_device_property_after
}

//--------------------------------------------------------
/**
 *	Method      : LinacSequencer::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void LinacSequencer::always_executed_hook()
{
	DEBUG_STREAM << "LinacSequencer::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacSequencer::always_executed_hook) ENABLED START -----*/
	
	//	code always executed before all requests
	// check the state
	get_sequence_state();

	/*----- PROTECTED REGION END -----*/	//	LinacSequencer::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : LinacSequencer::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void LinacSequencer::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "LinacSequencer::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(LinacSequencer::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	//	Add your own code here

	/*----- PROTECTED REGION END -----*/	//	LinacSequencer::read_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute IsFileLoaded related method
 *	Description: true => Last loadFile command ended successfully.\nfalse => Last loadFile command ended with errors.
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LinacSequencer::read_IsFileLoaded(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LinacSequencer::read_IsFileLoaded(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LinacSequencer::read_IsFileLoaded) ENABLED START -----*/
	{
		omni_mutex_lock l(mutex);
		*attr_IsFileLoaded_read = isFileLoaded;
	}
	attr.set_value(attr_IsFileLoaded_read);

	/*----- PROTECTED REGION END -----*/	//	LinacSequencer::read_IsFileLoaded
}
//--------------------------------------------------------
/**
 *	Read attribute SequenceHistory related method
 *	Description: Description of what happened during the execution of the \nlast sequence.
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Spectrum max = 500
 */
//--------------------------------------------------------
void LinacSequencer::read_SequenceHistory(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LinacSequencer::read_SequenceHistory(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LinacSequencer::read_SequenceHistory) ENABLED START -----*/
	{
		omni_mutex_lock l(mutex);
		history << sequence_history;
  		attr.set_value (history.get_buffer(),history.length());
	}
//	if(error || quit)
//		attr.set_quality(Tango::ATTR_ALARM);

	/*----- PROTECTED REGION END -----*/	//	LinacSequencer::read_SequenceHistory
}

//--------------------------------------------------------
/**
 *	Method      : LinacSequencer::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void LinacSequencer::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(LinacSequencer::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
	/*----- PROTECTED REGION END -----*/	//	LinacSequencer::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command State related method
 *	Description: This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
 *
 *	@returns State Code
 */
//--------------------------------------------------------
Tango::DevState LinacSequencer::dev_state()
{
	DEBUG_STREAM << "LinacSequencer::State()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacSequencer::dev_state) ENABLED START -----*/
	
	Tango::DevState	argout = Tango::UNKNOWN; // replace by your own algorithm
	//	Add your own code
	return get_state();

	/*----- PROTECTED REGION END -----*/	//	LinacSequencer::dev_state
	set_state(argout);    // Give the state to Tango.
	if (argout!=Tango::ALARM)
		DeviceImpl::dev_state();
	return get_state();  // Return it after Tango management.
}
//--------------------------------------------------------
/**
 *	Command Status related method
 *	Description: This command gets the device status (stored in its <i>device_status</i> data member) and returns it to the caller.
 *
 *	@returns Status description
 */
//--------------------------------------------------------
Tango::ConstDevString LinacSequencer::dev_status()
{
	DEBUG_STREAM << "LinacSequencer::Status()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacSequencer::dev_status) ENABLED START -----*/
	
	string	status = "Device is OK";
	//	Add your own code
	string tmp_status;
	switch ( get_state() )
	{
		case Tango::ON :
			tmp_status = "Ready to execute a new sequence";
		break;
			
		case Tango::MOVING :
			tmp_status = "Sequence execution is in progress";
		break;
			
		case Tango::DISABLE :
			if ( quit == true )
				tmp_status = "Sequence execution was aborted by the user!";
			else
				tmp_status = "Sequence execution failed, see sequence history for information";
				
		break;

		default:
			tmp_status = "get_state() returns an unexpected state (not ON not MOVING not DISABLE) !";
		break;	
	}

	set_status(tmp_status);
	return DeviceImpl::dev_status();

	/*----- PROTECTED REGION END -----*/	//	LinacSequencer::dev_status
	set_status(status);               // Give the status to Tango.
	return DeviceImpl::dev_status();  // Return it.
}
//--------------------------------------------------------
/**
 *	Command Abort related method
 *	Description: Abort the running sequence.
 *
 */
//--------------------------------------------------------
void LinacSequencer::abort()
{
	DEBUG_STREAM << "LinacSequencer::Abort()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacSequencer::abort) ENABLED START -----*/
	
	//	Add your own code
	omni_mutex_lock l(mutex);
	quit = true;

	/*----- PROTECTED REGION END -----*/	//	LinacSequencer::abort
}
//--------------------------------------------------------
/**
 *	Command LoadFile related method
 *	Description: Load the configuration file given in parameter.
 *
 *	@param argin Name of file to load
 */
//--------------------------------------------------------
void LinacSequencer::load_file(Tango::DevString argin)
{
	DEBUG_STREAM << "LinacSequencer::LoadFile()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacSequencer::load_file) ENABLED START -----*/
	
	//	Add your own code
	omni_mutex_lock l(mutex);
	filename = argin;
	isFileLoaded = false;
	cmd      = MACRO_LOAD_SETTINGS;
	start    = true;

	/*----- PROTECTED REGION END -----*/	//	LinacSequencer::load_file
}
//--------------------------------------------------------
/**
 *	Command SaveFile related method
 *	Description: The sequence will save all current settings to a file.
 *
 *	@param argin Name of the file to be saved
 */
//--------------------------------------------------------
void LinacSequencer::save_file(Tango::DevString argin)
{
	DEBUG_STREAM << "LinacSequencer::SaveFile()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacSequencer::save_file) ENABLED START -----*/
	
	//	Add your own code
	omni_mutex_lock l(mutex);
	filename = argin;
	isFileLoaded = false;
	cmd      = MACRO_SAVE_SETTINGS;
	start    = true;

	/*----- PROTECTED REGION END -----*/	//	LinacSequencer::save_file
}
//--------------------------------------------------------
/**
 *	Command ForceSave related method
 *	Description: This command will force the save of all the present settings in a file
 *               even if there was a problem when getting all the current set points.
 *               If a set point could not be read, the set point given in the last loaded or saved file will be used.
 *               The argin is the name of the file.
 *
 *	@param argin Name of the file to be saved
 */
//--------------------------------------------------------
void LinacSequencer::force_save(Tango::DevString argin)
{
	DEBUG_STREAM << "LinacSequencer::ForceSave()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacSequencer::force_save) ENABLED START -----*/
	
	//	Add your own code
	omni_mutex_lock l(mutex);
	filename = argin;
	isFileLoaded = false;
	cmd      = MACRO_FORCE_SAVE;
	start    = true;

	/*----- PROTECTED REGION END -----*/	//	LinacSequencer::force_save
}
//--------------------------------------------------------
/**
 *	Command On related method
 *	Description: Execute the sequence to bring the LINAC to ON state.
 *
 */
//--------------------------------------------------------
void LinacSequencer::on()
{
	DEBUG_STREAM << "LinacSequencer::On()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacSequencer::on) ENABLED START -----*/
	
	//	Add your own code
	omni_mutex_lock l(mutex);
	cmd = MACRO_ON;		
	start = true;

	/*----- PROTECTED REGION END -----*/	//	LinacSequencer::on
}
//--------------------------------------------------------
/**
 *	Command Off related method
 *	Description: Execute the sequence to bring the LINAC to OFF state.
 *
 */
//--------------------------------------------------------
void LinacSequencer::off()
{
	DEBUG_STREAM << "LinacSequencer::Off()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacSequencer::off) ENABLED START -----*/
	
	//	Add your own code
	omni_mutex_lock l(mutex);
	cmd = MACRO_OFF;
	start = true;

	/*----- PROTECTED REGION END -----*/	//	LinacSequencer::off
}
//--------------------------------------------------------
/**
 *	Command LowHeating related method
 *	Description: Execute the sequence to bring the LINAC to Low Heating (Tango::INIT) state.
 *
 */
//--------------------------------------------------------
void LinacSequencer::low_heating()
{
	DEBUG_STREAM << "LinacSequencer::LowHeating()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacSequencer::low_heating) ENABLED START -----*/
	
	//	Add your own code
	omni_mutex_lock l(mutex);
	cmd = MACRO_LOWHEATING;
	start = true;

	/*----- PROTECTED REGION END -----*/	//	LinacSequencer::low_heating
}
//--------------------------------------------------------
/**
 *	Command Standby related method
 *	Description: Execute the sequence to bring the LINAC to STANDBY state.
 *
 */
//--------------------------------------------------------
void LinacSequencer::standby()
{
	DEBUG_STREAM << "LinacSequencer::Standby()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacSequencer::standby) ENABLED START -----*/
	
	//	Add your own code
	omni_mutex_lock l(mutex);
	cmd = MACRO_STANDBY;		
	start = true;

	/*----- PROTECTED REGION END -----*/	//	LinacSequencer::standby
}
//--------------------------------------------------------
/**
 *	Command Reset related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void LinacSequencer::reset()
{
	DEBUG_STREAM << "LinacSequencer::Reset()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacSequencer::reset) ENABLED START -----*/
	
	//	Add your own code
	// reset the thread comunication variables
	{
		omni_mutex_lock l(mutex);
		error = false;
	}

	/*----- PROTECTED REGION END -----*/	//	LinacSequencer::reset
}
//--------------------------------------------------------
/**
 *	Method      : LinacSequencer::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void LinacSequencer::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(LinacSequencer::add_dynamic_commands) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic commands if any
	
	/*----- PROTECTED REGION END -----*/	//	LinacSequencer::add_dynamic_commands
}

/*----- PROTECTED REGION ID(LinacSequencer::namespace_ending) ENABLED START -----*/

//	Additional Methods
//+------------------------------------------------------------------
/**
 *	method:	LinacSequencer::get_sequence_state
 *
 *	description:	method to calculate the state of the sequencer object.
 *
 */
//+------------------------------------------------------------------
void LinacSequencer::get_sequence_state()
{	
	DEBUG_STREAM << "Sequencer::get_sequence_state(): entering... !" << endl;
	
	//	Add your own code to control device here
	omni_mutex_lock l(mutex);
	
	if ( error == true )
	{
		set_state(Tango::DISABLE);
	}
	else
	{
		if ( run == true )
		{
			set_state(Tango::MOVING);
		}
		else
		{
			set_state(Tango::ON);
		}
	}
}


/*----- PROTECTED REGION END -----*/	//	LinacSequencer::namespace_ending
} //	namespace
