/*----- PROTECTED REGION ID(LinacRFClass.h) ENABLED START -----*/
//=============================================================================
//
// file :        LinacRFClass.h
//
// description : Include for the LinacRF root class.
//               This class is the singleton class for
//                the LinacRF device class.
//               It contains all properties and methods which the 
//               LinacRF requires only once e.g. the commands.
//
// project :     Linac Radio Frequency
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef LinacRFClass_H
#define LinacRFClass_H

#include <tango.h>
#include <LinacRF.h>

/*----- PROTECTED REGION END -----*/	//	LinacRFClass.h


namespace LinacRF_ns
{
/*----- PROTECTED REGION ID(LinacRFClass::classes for dynamic creation) ENABLED START -----*/


/*----- PROTECTED REGION END -----*/	//	LinacRFClass::classes for dynamic creation

//=========================================
//	Define classes for attributes
//=========================================
//	Attribute Frequency class definition
class FrequencyAttrib: public Tango::Attr
{
public:
	FrequencyAttrib():Attr("Frequency",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~FrequencyAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LinacRF *>(dev))->read_Frequency(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LinacRF *>(dev))->write_Frequency(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LinacRF *>(dev))->is_Frequency_allowed(ty);}
};

//	Attribute Delay class definition
class DelayAttrib: public Tango::Attr
{
public:
	DelayAttrib():Attr("Delay",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~DelayAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LinacRF *>(dev))->read_Delay(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LinacRF *>(dev))->write_Delay(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LinacRF *>(dev))->is_Delay_allowed(ty);}
};

//	Attribute PBunchPhase class definition
class PBunchPhaseAttrib: public Tango::Attr
{
public:
	PBunchPhaseAttrib():Attr("PBunchPhase",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~PBunchPhaseAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LinacRF *>(dev))->read_PBunchPhase(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LinacRF *>(dev))->write_PBunchPhase(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LinacRF *>(dev))->is_PBunchPhase_allowed(ty);}
};

//	Attribute PBunchAttenu class definition
class PBunchAttenuAttrib: public Tango::Attr
{
public:
	PBunchAttenuAttrib():Attr("PBunchAttenu",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~PBunchAttenuAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LinacRF *>(dev))->read_PBunchAttenu(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LinacRF *>(dev))->write_PBunchAttenu(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LinacRF *>(dev))->is_PBunchAttenu_allowed(ty);}
};

//	Attribute BunchPhase class definition
class BunchPhaseAttrib: public Tango::Attr
{
public:
	BunchPhaseAttrib():Attr("BunchPhase",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~BunchPhaseAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LinacRF *>(dev))->read_BunchPhase(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LinacRF *>(dev))->write_BunchPhase(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LinacRF *>(dev))->is_BunchPhase_allowed(ty);}
};

//	Attribute Sect2Phase class definition
class Sect2PhaseAttrib: public Tango::Attr
{
public:
	Sect2PhaseAttrib():Attr("Sect2Phase",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~Sect2PhaseAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LinacRF *>(dev))->read_Sect2Phase(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LinacRF *>(dev))->write_Sect2Phase(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LinacRF *>(dev))->is_Sect2Phase_allowed(ty);}
};

//	Attribute AtPermit class definition
class AtPermitAttrib: public Tango::Attr
{
public:
	AtPermitAttrib():Attr("AtPermit",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~AtPermitAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LinacRF *>(dev))->read_AtPermit(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LinacRF *>(dev))->write_AtPermit(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LinacRF *>(dev))->is_AtPermit_allowed(ty);}
};

//	Attribute PhPermit class definition
class PhPermitAttrib: public Tango::Attr
{
public:
	PhPermitAttrib():Attr("PhPermit",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~PhPermitAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LinacRF *>(dev))->read_PhPermit(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LinacRF *>(dev))->write_PhPermit(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LinacRF *>(dev))->is_PhPermit_allowed(ty);}
};


//=========================================
//	Define classes for commands
//=========================================
//	Command On class definition
class OnClass : public Tango::Command
{
public:
	OnClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	OnClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~OnClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<LinacRF *>(dev))->is_On_allowed(any);}
};

//	Command Off class definition
class OffClass : public Tango::Command
{
public:
	OffClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	OffClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~OffClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<LinacRF *>(dev))->is_Off_allowed(any);}
};

//	Command Reset class definition
class ResetClass : public Tango::Command
{
public:
	ResetClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ResetClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ResetClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<LinacRF *>(dev))->is_Reset_allowed(any);}
};

//	Command TimingOn class definition
class TimingOnClass : public Tango::Command
{
public:
	TimingOnClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	TimingOnClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~TimingOnClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<LinacRF *>(dev))->is_TimingOn_allowed(any);}
};


/**
 *	The LinacRFClass singleton definition
 */

#ifdef _TG_WINDOWS_
class __declspec(dllexport)  LinacRFClass : public Tango::DeviceClass
#else
class LinacRFClass : public Tango::DeviceClass
#endif
{
	/*----- PROTECTED REGION ID(LinacRFClass::Additionnal DServer data members) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	LinacRFClass::Additionnal DServer data members

	public:
		//	write class properties data members
		Tango::DbData	cl_prop;
		Tango::DbData	cl_def_prop;
		Tango::DbData	dev_def_prop;
	
		//	Method prototypes
		static LinacRFClass *init(const char *);
		static LinacRFClass *instance();
		~LinacRFClass();
		Tango::DbDatum	get_class_property(string &);
		Tango::DbDatum	get_default_device_property(string &);
		Tango::DbDatum	get_default_class_property(string &);
	
	protected:
		LinacRFClass(string &);
		static LinacRFClass *_instance;
		void command_factory();
		void attribute_factory(vector<Tango::Attr *> &);
		void pipe_factory();
		void write_class_property();
		void set_default_property();
		void get_class_property();
		string get_cvstag();
		string get_cvsroot();
	
	private:
		void device_factory(const Tango::DevVarStringArray *);
		void create_static_attribute_list(vector<Tango::Attr *> &);
		void erase_dynamic_attributes(const Tango::DevVarStringArray *,vector<Tango::Attr *> &);
		vector<string>	defaultAttList;
		Tango::Attr *get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname);
};

}	//	End of namespace

#endif   //	LinacRF_H
