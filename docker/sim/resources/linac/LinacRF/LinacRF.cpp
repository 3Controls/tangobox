/*----- PROTECTED REGION ID(LinacRF.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        LinacRF.cpp
//
// description : C++ source for the LinacRF class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               LinacRF are implemented in this file.
//
// project :     Linac Radio Frequency
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <tango.h>
#include <LinacRF.h>
#include <LinacRFClass.h>

/*----- PROTECTED REGION END -----*/	//	LinacRF.cpp

/**
 *  LinacRF class description:
 *    This class will manage the Linac RadioFrequency.
 *    The three structures of the linac (buncher - section 1 - section 2) consist of
 *    coupled wave guide cavities, through which a high frequency electromagnetic wave
 *    passes at the same speed than the electrons.
 *    The electrons are adjusted to the peak of the RF wave,
 *    they are then subjected to the maximum electrical field.
 *    The phase of the section1 is the reference;
 *    phases of the RF in buncher and section 2 are matched to get the electrons
 *    adjusted to the peak of the RF wave.
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  dev_state
//  Status        |  dev_status
//  On            |  on
//  Off           |  off
//  Reset         |  reset
//  TimingOn      |  timing_on
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  Frequency     |  Tango::DevDouble	Scalar
//  Delay         |  Tango::DevDouble	Scalar
//  PBunchPhase   |  Tango::DevDouble	Scalar
//  PBunchAttenu  |  Tango::DevDouble	Scalar
//  BunchPhase    |  Tango::DevDouble	Scalar
//  Sect2Phase    |  Tango::DevDouble	Scalar
//  AtPermit      |  Tango::DevBoolean	Scalar
//  PhPermit      |  Tango::DevBoolean	Scalar
//================================================================

namespace LinacRF_ns
{
/*----- PROTECTED REGION ID(LinacRF::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	LinacRF::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : LinacRF::LinacRF()
 *	Description : Constructors for a Tango device
 *                implementing the classLinacRF
 */
//--------------------------------------------------------
LinacRF::LinacRF(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(LinacRF::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	LinacRF::constructor_1
}
//--------------------------------------------------------
LinacRF::LinacRF(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(LinacRF::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	LinacRF::constructor_2
}
//--------------------------------------------------------
LinacRF::LinacRF(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(LinacRF::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	LinacRF::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : LinacRF::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void LinacRF::delete_device()
{
	DEBUG_STREAM << "LinacRF::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacRF::delete_device) ENABLED START -----*/
	
	//	Delete device allocated objects
	//	Delete device's allocated object
	delete attr_Frequency_read;
	delete attr_Delay_read;
	delete attr_PBunchPhase_read;
	delete attr_PBunchAttenu_read;
	delete attr_BunchPhase_read;
	delete attr_Sect2Phase_read;
	delete mastersourceds;
	delete attr_AtPermit_read;
	delete attr_PhPermit_read;
#ifndef SIMU
	delete daresburyds;
	delete pbunchphaseds;
#ifndef VPAPPHASE
	delete bunchphaseds;
#else
	delete bunchphaseadcds;
#endif
	delete secphasedacds;
	delete pbunchattadcds;
	delete pbunchattdacds;
	delete OnRelayds;
	delete OffRelayds;
	delete Modulatords;
	delete WagoRelayPhPermitDS;
	delete WagoRelayAtPermitDS;
#endif
	freeTacoDevices();

	/*----- PROTECTED REGION END -----*/	//	LinacRF::delete_device
}

//--------------------------------------------------------
/**
 *	Method      : LinacRF::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void LinacRF::init_device()
{
	DEBUG_STREAM << "LinacRF::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacRF::init_device_before) ENABLED START -----*/
	
	//	Initialization before get_device_property() call
		tacoDelay_imported = false;


	/*----- PROTECTED REGION END -----*/	//	LinacRF::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	
	/*----- PROTECTED REGION ID(LinacRF::init_device) ENABLED START -----*/
	
	//	Initialize device
	pulsewaittime.tv_sec = pulsetime / 1000;
	pulsewaittime.tv_nsec = (pulsetime%1000) * 1000000;
	n_state = Tango::ON;
	attr_Frequency_read = new Tango::DevDouble;
	attr_Delay_read = new Tango::DevDouble;
	attr_PBunchPhase_read = new Tango::DevDouble;
	attr_PBunchAttenu_read = new Tango::DevDouble;
	attr_BunchPhase_read = new Tango::DevDouble;
	attr_Sect2Phase_read = new Tango::DevDouble;
	
	attr_AtPermit_read = new Tango::DevBoolean;
	attr_PhPermit_read = new Tango::DevBoolean;	
	
#ifdef SIMU
	*attr_Frequency_read =  999.4034*3;
	*attr_Delay_read = 45.00;
	*attr_PBunchPhase_read = 53;
	*attr_PBunchAttenu_read = 8;
	*attr_BunchPhase_read = -27.9;
	*attr_Sect2Phase_read = 97.1;
        set_state(n_state);
#else
	thestate = Tango::UNKNOWN;
	daresburyds 	= new Tango::DeviceProxy(daresbury.c_str());
	try{daresburyds->set_transparency_reconnection(true);}
	catch(Tango::DevFailed &e){ Tango::Except::print_exception(e);}
#ifndef VPAPPHASE
	bunchphaseds 	= new Tango::DeviceProxy(bunchphase.c_str());
	try{bunchphaseds->set_transparency_reconnection(true);}
	catch(Tango::DevFailed &e){ Tango::Except::print_exception(e);}
#else
	bunchphaseadcds = new Tango::DeviceProxy(bunchphase_adc.c_str());
	try{bunchphaseadcds->set_transparency_reconnection(true);}
	catch(Tango::DevFailed &e){ Tango::Except::print_exception(e);}
#endif
	pbunchphaseds 	= new Tango::DeviceProxy(pbunchphase.c_str());
	pbunchattdacds	= new Tango::DeviceProxy(pbunchatt_dac.c_str());
	pbunchattadcds	= new Tango::DeviceProxy(pbunchatt_adc.c_str());
	secphasedacds	= new Tango::DeviceProxy(secphase_dac.c_str());
	OnRelayds	= new Tango::DeviceProxy(onrelay.c_str());
	OffRelayds	= new Tango::DeviceProxy(offrelay.c_str());
	Modulatords	= new Tango::DeviceProxy(modulator.c_str());

	WagoRelayAtPermitDS = new Tango::DeviceProxy(atPermitDeviceName.c_str());
	WagoRelayPhPermitDS = new Tango::DeviceProxy(phPermitDeviceName.c_str());

	try{pbunchphaseds->set_transparency_reconnection(true);}
	catch(Tango::DevFailed &e){ Tango::Except::print_exception(e);}
	try{pbunchattdacds->set_transparency_reconnection(true);}
	catch(Tango::DevFailed &e){ Tango::Except::print_exception(e);}
	try{pbunchattadcds->set_transparency_reconnection(true);}
	catch(Tango::DevFailed &e){ Tango::Except::print_exception(e);}
	try{secphasedacds->set_transparency_reconnection(true);}
	catch(Tango::DevFailed &e){ Tango::Except::print_exception(e);}
	try{OnRelayds->set_transparency_reconnection(true);}
	catch(Tango::DevFailed &e){ Tango::Except::print_exception(e);}
	try{OffRelayds->set_transparency_reconnection(true);}
	catch(Tango::DevFailed &e){ Tango::Except::print_exception(e);}
	try{Modulatords->set_transparency_reconnection(true);}
	catch(Tango::DevFailed &e){ Tango::Except::print_exception(e);}

	try{WagoRelayAtPermitDS->set_transparency_reconnection(true);}
	catch(Tango::DevFailed &e){ Tango::Except::print_exception(e);}
	try{WagoRelayPhPermitDS->set_transparency_reconnection(true);}
	catch(Tango::DevFailed &e){ Tango::Except::print_exception(e);}
	// get interlocks descriptions
	Tango::DeviceData argin;
	try
	{
		argin << interlocks;
		Tango::DeviceData ans = daresburyds->command_inout("GetInterlockDescription",argin);
		ans >> intlk_desc;
		for(int i=0;i<intlk_desc.size();i++)
			DEBUG_STREAM << "intlk_desc[" << i << "] = " << intlk_desc[i] << endl;
	}
	catch(Tango::DevFailed &e)
	{
		ERROR_STREAM << "Could not get Interlocks Description. Is the Daresbury server well running?" << endl;
		throw;
	}
#endif
#ifdef SIMU_STATE
	set_state(Tango::ON);
	thestate = Tango::ON;
#endif
	mastersourceds = new Tango::DeviceProxy(mastersource.c_str());	
	try{mastersourceds->set_transparency_reconnection(true);}
	catch(Tango::DevFailed &e){ Tango::Except::print_exception(e);}
// import Taco devices
	importTacoDevices();
// initialize delay write value to the read value
	Tango::MultiAttribute		*attr_list;
	attr_list = get_device_attr();
	Tango::WAttribute	&attr_delay = attr_list->get_w_attr_by_name ("Delay");
	try
	{
		read_Delay(attr_delay);
	}
	catch(Tango::DevFailed &e)
	{
		Tango::Except::print_exception(e);
	}
// initialize the frequency set value according to the mastersource device
// frequency set point
	Tango::WAttribute	&attr_frequency = attr_list->get_w_attr_by_name ("Frequency");
	try
	{
		read_Frequency(attr_frequency);
	}
	catch(Tango::DevFailed &e)
	{
		Tango::Except::print_exception(e);
	}
// initialize the bunchphase set value according to the bunchphase device
// position set point
	Tango::WAttribute	&attr_bunchphase = attr_list->get_w_attr_by_name ("BunchPhase");
	try
	{
		read_BunchPhase(attr_bunchphase);
	}
	catch(Tango::DevFailed &e)
	{
		Tango::Except::print_exception(e);
	}
// initialize the pbunchphase set value according to the pbunchphase device
// value set point
	Tango::WAttribute	&attr_pbunchphase = attr_list->get_w_attr_by_name ("PBunchPhase");
	try
	{
		read_PBunchPhase(attr_pbunchphase);
	}
	catch(Tango::DevFailed &e)
	{
		Tango::Except::print_exception(e);
	}
// initialize the sectionphase set value according to the secphase device
// value set point
	Tango::WAttribute	&attr_secphase = attr_list->get_w_attr_by_name ("Sect2Phase");
	try
	{
		read_Sect2Phase(attr_secphase);
	}
	catch(Tango::DevFailed &e)
	{
		Tango::Except::print_exception(e);
	}
// initialize the PBunchAttenu set value according to the pbunchatt device
// value set point
	Tango::WAttribute	&attr_pbunchatt = attr_list->get_w_attr_by_name ("PBunchAttenu");
	try
	{
		read_PBunchAttenu(attr_pbunchatt);
	}
	catch(Tango::DevFailed &e)
	{
		Tango::Except::print_exception(e);
	}

	/*----- PROTECTED REGION END -----*/	//	LinacRF::init_device
}

//--------------------------------------------------------
/**
 *	Method      : LinacRF::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void LinacRF::get_device_property()
{
	/*----- PROTECTED REGION ID(LinacRF::get_device_property_before) ENABLED START -----*/
	
	//	Initialize property data members
	#ifdef VPAPPHASE
	bunchphase		= "elin/o-rf/bun-ph";
	bunchphase_adc = "elin/rf/bun-ph-adc";
#else
	bunchphase		= "elin/rf/bun-ph";
#endif		
	daresbury		= "elin/intlk/0";
	delay_name 		= "elin/t-rf/1";
	interlocks_list.clear();
	interlocks_list.push_back(11.4);
	interlocks_list.push_back(14.1);
	interlocks_list.push_back(14.2);
	interlocks_list.push_back(14.3);
	interlocks_list.push_back(14.4);
	interlocks_list.push_back(15.1);
	interlocks_list.push_back(15.2);
	interlocks_list.push_back(15.3);
	interlocks_list.push_back(15.4);
	mastersource 	= "elin/o-rf/freq";
	offrelay			= "elin/r-rf/off";
	onrelay			= "elin/r-rf/on";
	pbunchatt_adc	= "elin/rf/pbun-at-adc";
	pbunchatt_dac	= "elin/rf/pbun-at-dac";
	pbunchphase		= "elin/rf/pbun-ph";
	pulsetime		= 1000;
	secphase_dac	= "elin/rf/sec-ph-dac";
	stateonnum 		= 12.3;
	statepermnum 	= 11.3;	
	atPermitDeviceName = "elin/r-rf/pbun-at-permit";
	phPermitDeviceName = "elin/r-rf/pbun-ph-permit";

	/*----- PROTECTED REGION END -----*/	//	LinacRF::get_device_property_before


	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("Bunchphase"));
	dev_prop.push_back(Tango::DbDatum("Daresbury"));
	dev_prop.push_back(Tango::DbDatum("Delay_name"));
	dev_prop.push_back(Tango::DbDatum("Interlocks_list"));
	dev_prop.push_back(Tango::DbDatum("Mastersource"));
	dev_prop.push_back(Tango::DbDatum("Pbunchatt_adc"));
	dev_prop.push_back(Tango::DbDatum("Pbunchatt_dac"));
	dev_prop.push_back(Tango::DbDatum("Pbunchphase"));
	dev_prop.push_back(Tango::DbDatum("Secphase_dac"));
	dev_prop.push_back(Tango::DbDatum("Stateonnum"));
	dev_prop.push_back(Tango::DbDatum("Statepermnum"));
	dev_prop.push_back(Tango::DbDatum("Bunchphase_adc"));
	dev_prop.push_back(Tango::DbDatum("Offrelay"));
	dev_prop.push_back(Tango::DbDatum("Onrelay"));
	dev_prop.push_back(Tango::DbDatum("Pulsetime"));
	dev_prop.push_back(Tango::DbDatum("Modulator"));
	dev_prop.push_back(Tango::DbDatum("AtPermitDeviceName"));
	dev_prop.push_back(Tango::DbDatum("PhPermitDeviceName"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on LinacRFClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		LinacRFClass	*ds_class =
			(static_cast<LinacRFClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize Bunchphase from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  bunchphase;
		else {
			//	Try to initialize Bunchphase from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  bunchphase;
		}
		//	And try to extract Bunchphase value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  bunchphase;

		//	Try to initialize Daresbury from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  daresbury;
		else {
			//	Try to initialize Daresbury from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  daresbury;
		}
		//	And try to extract Daresbury value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  daresbury;

		//	Try to initialize Delay_name from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  delay_name;
		else {
			//	Try to initialize Delay_name from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  delay_name;
		}
		//	And try to extract Delay_name value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  delay_name;

		//	Try to initialize Interlocks_list from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  interlocks_list;
		else {
			//	Try to initialize Interlocks_list from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  interlocks_list;
		}
		//	And try to extract Interlocks_list value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  interlocks_list;

		//	Try to initialize Mastersource from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  mastersource;
		else {
			//	Try to initialize Mastersource from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  mastersource;
		}
		//	And try to extract Mastersource value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  mastersource;

		//	Try to initialize Pbunchatt_adc from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  pbunchatt_adc;
		else {
			//	Try to initialize Pbunchatt_adc from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  pbunchatt_adc;
		}
		//	And try to extract Pbunchatt_adc value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  pbunchatt_adc;

		//	Try to initialize Pbunchatt_dac from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  pbunchatt_dac;
		else {
			//	Try to initialize Pbunchatt_dac from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  pbunchatt_dac;
		}
		//	And try to extract Pbunchatt_dac value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  pbunchatt_dac;

		//	Try to initialize Pbunchphase from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  pbunchphase;
		else {
			//	Try to initialize Pbunchphase from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  pbunchphase;
		}
		//	And try to extract Pbunchphase value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  pbunchphase;

		//	Try to initialize Secphase_dac from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  secphase_dac;
		else {
			//	Try to initialize Secphase_dac from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  secphase_dac;
		}
		//	And try to extract Secphase_dac value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  secphase_dac;

		//	Try to initialize Stateonnum from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  stateonnum;
		else {
			//	Try to initialize Stateonnum from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  stateonnum;
		}
		//	And try to extract Stateonnum value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  stateonnum;

		//	Try to initialize Statepermnum from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  statepermnum;
		else {
			//	Try to initialize Statepermnum from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  statepermnum;
		}
		//	And try to extract Statepermnum value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  statepermnum;

		//	Try to initialize Bunchphase_adc from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  bunchphase_adc;
		else {
			//	Try to initialize Bunchphase_adc from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  bunchphase_adc;
		}
		//	And try to extract Bunchphase_adc value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  bunchphase_adc;

		//	Try to initialize Offrelay from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  offrelay;
		else {
			//	Try to initialize Offrelay from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  offrelay;
		}
		//	And try to extract Offrelay value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  offrelay;

		//	Try to initialize Onrelay from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  onrelay;
		else {
			//	Try to initialize Onrelay from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  onrelay;
		}
		//	And try to extract Onrelay value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  onrelay;

		//	Try to initialize Pulsetime from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  pulsetime;
		else {
			//	Try to initialize Pulsetime from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  pulsetime;
		}
		//	And try to extract Pulsetime value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  pulsetime;

		//	Try to initialize Modulator from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  modulator;
		else {
			//	Try to initialize Modulator from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  modulator;
		}
		//	And try to extract Modulator value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  modulator;

		//	Try to initialize AtPermitDeviceName from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  atPermitDeviceName;
		else {
			//	Try to initialize AtPermitDeviceName from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  atPermitDeviceName;
		}
		//	And try to extract AtPermitDeviceName value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  atPermitDeviceName;

		//	Try to initialize PhPermitDeviceName from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  phPermitDeviceName;
		else {
			//	Try to initialize PhPermitDeviceName from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  phPermitDeviceName;
		}
		//	And try to extract PhPermitDeviceName value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  phPermitDeviceName;

	}

	/*----- PROTECTED REGION ID(LinacRF::get_device_property_after) ENABLED START -----*/
	
	//	Check device property data members init
	Tango::DevLong module,num;
	double numtmp;
	interlocks.clear();
	module = (Tango::DevLong) stateonnum;
	numtmp = stateonnum *10;
	num = (Tango::DevLong)numtmp % 10;
	module = module - 1;
	num = (num -1) * 2;
	interlocks.push_back(module);
	interlocks.push_back(num);
	module = (Tango::DevLong) statepermnum;
	numtmp = statepermnum *10;
	num = (Tango::DevLong)numtmp % 10;
	module = module - 1;
	num = (num -1) * 2;
	interlocks.push_back(module);
	interlocks.push_back(num);	
	for(unsigned int j=0;j<interlocks_list.size();j++)
	{
		module = (Tango::DevLong) interlocks_list[j];
		numtmp =  interlocks_list[j]*10;
		num = (Tango::DevLong)numtmp % 10;
		module = module - 1;
		num = (num -1) * 2;
		interlocks.push_back(module);
		interlocks.push_back(num);
	}
	
	TangoSys_OMemStream o;
	for(unsigned int k=0 ; k<interlocks_list.size() ; k++)
	{
		if(k != (interlocks_list.size()-1))
			o << interlocks_list[k] << ",";
		else
			o << interlocks_list[k];
	}
	
	
	INFO_STREAM << "Mastersource    		 	= " << mastersource 		<< endl;
	INFO_STREAM << "PBuncher Phase device 	= " << pbunchphase		<< endl;
	INFO_STREAM << "Buncher Phase device 	= " << bunchphase			<< endl;
#ifdef VPAPPHASE
	INFO_STREAM << "Buncher Phase ADC device 	= " << bunchphase_adc << endl;
#endif
	INFO_STREAM << "Section Phase device 	= " << secphase_dac			<< endl;
	INFO_STREAM << "PBuncher Attenuation device ADC= "	<< pbunchatt_adc	<< endl;
	INFO_STREAM << "PBuncher Attenuation device DAC= "	<< pbunchatt_dac	<< endl;
	INFO_STREAM << "Delay device    		 	= " << delay_name 		<< endl;
	INFO_STREAM << "Daresbury       		 	= " << daresbury 			<< endl;
	INFO_STREAM << "Interlocks list			= " << o.str()			 	<< endl;
	INFO_STREAM << "stateonnum      		 	= " << stateonnum 		<< endl;
	INFO_STREAM << "statepermnum				= " << statepermnum 		<< endl;
	INFO_STREAM << "offrelay               = " << offrelay 		<< endl;
	INFO_STREAM << "onrelay                = " << onrelay 		<< endl;
	INFO_STREAM << "modulator             = " << modulator 	<< endl;
	INFO_STREAM << "pulsetime              = " << pulsetime 			<< endl;
	INFO_STREAM << "atPermitDeviceName     = " << atPermitDeviceName 	<< endl;
	INFO_STREAM << "ptPermitDeviceName     = " << phPermitDeviceName	<< endl;
	
	for(unsigned int n=0; n<interlocks.size();n++)
		DEBUG_STREAM << "interlocks[" << n << "] = " << interlocks[n] << endl;

	/*----- PROTECTED REGION END -----*/	//	LinacRF::get_device_property_after
}

//--------------------------------------------------------
/**
 *	Method      : LinacRF::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void LinacRF::always_executed_hook()
{
	DEBUG_STREAM << "LinacRF::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacRF::always_executed_hook) ENABLED START -----*/
	
	//	code always executed before all requests
	

	/*----- PROTECTED REGION END -----*/	//	LinacRF::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : LinacRF::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void LinacRF::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "LinacRF::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(LinacRF::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	//	Add your own code here

	/*----- PROTECTED REGION END -----*/	//	LinacRF::read_attr_hardware
}
//--------------------------------------------------------
/**
 *	Method      : LinacRF::write_attr_hardware()
 *	Description : Hardware writing for attributes
 */
//--------------------------------------------------------
void LinacRF::write_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "LinacRF::write_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(LinacRF::write_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	LinacRF::write_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute Frequency related method
 *	Description: Frequency
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LinacRF::read_Frequency(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LinacRF::read_Frequency(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LinacRF::read_Frequency) ENABLED START -----*/
	#ifndef SIMU
	/* read frequency attribute on the Tango device */
	Tango::DevVarDoubleArray * frequency;
	try
	{
		Tango::DeviceAttribute freqval = mastersourceds->read_attribute("frequency");
		freqval >> frequency;
		*attr_Frequency_read = (3*((*frequency)[0]))/1e6;
		attr_Frequency_write = (3*((*frequency)[1]))/1e6;
		delete frequency;
	}
	catch(Tango::DevFailed &e)
	{
		ERROR_STREAM << "LinacRF::read_Frequency: an Exception occured!" << endl;
		Tango::Except::print_exception(e);
		throw;
	}
#endif
	attr.set_value(attr_Frequency_read);
#ifndef SIMU
	// change set value according to mastersource device frequency set point
	Tango::MultiAttribute		*attr_list;
	attr_list = get_device_attr();
	Tango::WAttribute	&attr_freq = attr_list->get_w_attr_by_name ("Frequency");
	try
	{
		attr_freq.set_write_value(attr_Frequency_write);
	}
	catch(Tango::DevFailed &e)
	{
		Tango::Except::print_exception(e);
		throw;
	}
#endif

	/*----- PROTECTED REGION END -----*/	//	LinacRF::read_Frequency
}
//--------------------------------------------------------
/**
 *	Write attribute Frequency related method
 *	Description: Frequency
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LinacRF::write_Frequency(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LinacRF::write_Frequency(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LinacRF::write_Frequency) ENABLED START -----*/
#ifdef SIMU
       *attr_Frequency_read = w_val;
#else

	Tango::DevDouble freq = (w_val*1e6)/3;
	Tango::DeviceAttribute freq_attr("frequency",freq);
	try
	{
		mastersourceds->write_attribute(freq_attr);
	}
	catch (Tango::DevFailed &e)
	{
		Tango::Except::print_exception(e);
		throw;
	}
#endif

	/*----- PROTECTED REGION END -----*/	//	LinacRF::write_Frequency
}
//--------------------------------------------------------
/**
 *	Read attribute Delay related method
 *	Description: Delay
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LinacRF::read_Delay(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LinacRF::read_Delay(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LinacRF::read_Delay) ENABLED START -----*/
	#ifdef WITH_TACO
	if(tacoDelay_imported == false)
	{
		// Taco device not imported
		// try to import it
		cout << "delay device name = " << delay_name << endl;
		long error;
		int status = dev_import((char*) delay_name.c_str(),0,&shorttimingds,&error);
		if(status == 0)
		{
			tacoDelay_imported = true;
			INFO_STREAM << "delay taco device " << delay_name << " successfully imported" << endl;
		}
		else
		{
			tacoDelay_imported = false;
			char *p_err = dev_error_str(error);
			cerr << "delay taco device " << delay_name <<" import failure: " << p_err << endl;
			ERROR_STREAM <<p_err << endl;
			free(p_err);
			TangoSys_OMemStream o;
			o << "Taco device " << delay_name << ": " << dev_error_str(error) << ends;
			Tango::Except::throw_exception 
			((const char *)"UnableToImportTacoDevice",
			o.str(),
			(const char *)"LinacRF::read_Delay()");
		}
	}
	long tacostatus;
	long tacoerror;
	Tango::DevDouble setdelay;
	DevStateFloatReadPoint tacodelay;
	tacostatus = dev_putget(shorttimingds,DevUpdate,NULL,D_VOID_TYPE,&tacodelay,
									D_STATE_FLOAT_READPOINT,&tacoerror);
	if(tacostatus == DS_OK)
	{
		*attr_Delay_read = tacodelay.read;
		DelayState = tacodelay.state;
		setdelay = tacodelay.set;
	}
	else
	{
		char *p_err;
		p_err = dev_error_str(tacoerror);
		ERROR_STREAM << "LinacRF::read_Delay: Unable to read delay." << p_err << endl;
		free(p_err);
		TangoSys_OMemStream o;
		o << "Taco device " << delay_name << ": " << dev_error_str(tacoerror) << ends;
		Tango::Except::throw_exception 
			((const char *)"UnableToReadDelay",
			o.str(),
			(const char *)"LinacRF::read_Delay()");
	}
	// update the current attribute set value
	Tango::MultiAttribute		*attr_list;
	attr_list = get_device_attr();
	Tango::WAttribute	&attr_delay = attr_list->get_w_attr_by_name ("Delay");
	attr_delay.set_write_value(setdelay);
#endif
	attr.set_value(attr_Delay_read);

	/*----- PROTECTED REGION END -----*/	//	LinacRF::read_Delay
}
//--------------------------------------------------------
/**
 *	Write attribute Delay related method
 *	Description: Delay
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LinacRF::write_Delay(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LinacRF::write_Delay(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LinacRF::write_Delay) ENABLED START -----*/
#ifndef WITH_TACO
	*attr_Delay_read = w_val;
#else
	if(tacoDelay_imported == false)
	{
		// Taco device not imported
		// try to import it
		cout << "delay device name = " << delay_name << endl;
		long error;
		int status = dev_import((char*) delay_name.c_str(),0,&shorttimingds,&error);
		if(status == 0)
		{
			tacoDelay_imported = true;
			INFO_STREAM << "delay taco device " << delay_name << " successfully imported" << endl;
		}
		else
		{
			tacoDelay_imported = false;
			char *p_err = dev_error_str(error);
			cerr << "delay taco device " << delay_name <<" import failure: " << p_err << endl;
			ERROR_STREAM <<p_err << endl;
			free(p_err);
			TangoSys_OMemStream o;
			o << "Taco device " << delay_name << ": " << dev_error_str(error) << ends;
			Tango::Except::throw_exception 
			((const char *)"UnableToWriteDelay",
			o.str(),
			(const char *)"LinacRF::write_Delay()");
		}
	}
	DevFloat setdelay = w_val;
	long tacostatus;
	long tacoerror;
	tacostatus=dev_putget(shorttimingds,DevSetValue,&setdelay,D_FLOAT_TYPE,NULL,D_VOID_TYPE,&tacoerror);
	if(tacostatus != DS_OK)
	{
		char *p_err;
		p_err = dev_error_str(tacoerror);
		ERROR_STREAM << "LinacRF::write_Delay: Unable to set delay." << p_err << endl;
		free(p_err);
		TangoSys_OMemStream o;
		o << "Taco device " << delay_name << ": " << dev_error_str(tacoerror) << ends;
		Tango::Except::throw_exception 
			((const char *)"UnableToSetDelay",
			o.str(),
			(const char *)"LinacRF::write_Delay()");
	}
#endif

	/*----- PROTECTED REGION END -----*/	//	LinacRF::write_Delay
}
//--------------------------------------------------------
/**
 *	Read attribute PBunchPhase related method
 *	Description: PreBuncher Phase
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LinacRF::read_PBunchPhase(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LinacRF::read_PBunchPhase(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LinacRF::read_PBunchPhase) ENABLED START -----*/
	#ifndef SIMU
	Tango::DevVarDoubleArray * phase;
	try
	{
		Tango::DeviceAttribute phaseval = pbunchphaseds->read_attribute("Value");
		phaseval >> phase;
		*attr_PBunchPhase_read = (*phase)[0];
		attr_PBunchPhase_write = (*phase)[1];
		delete phase;
	}
	catch(Tango::DevFailed &e)
	{
		ERROR_STREAM << "LinacRF::read_PBunchPhase: an Exception occured!" << endl;
		Tango::Except::print_exception(e);
		throw;
	}
	// change set value according to pbunchphase device value set point
	Tango::MultiAttribute		*attr_list;
	attr_list = get_device_attr();
	Tango::WAttribute	&attr_pbunchphase = attr_list->get_w_attr_by_name ("PBunchPhase");
	try
	{
		attr_pbunchphase.set_write_value(attr_PBunchPhase_write);
	}
	catch(Tango::DevFailed &e)
	{
		Tango::Except::print_exception(e);
		throw;
	}
#endif
	attr.set_value(attr_PBunchPhase_read);

	/*----- PROTECTED REGION END -----*/	//	LinacRF::read_PBunchPhase
}
//--------------------------------------------------------
/**
 *	Write attribute PBunchPhase related method
 *	Description: PreBuncher Phase
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LinacRF::write_PBunchPhase(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LinacRF::write_PBunchPhase(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LinacRF::write_PBunchPhase) ENABLED START -----*/
#ifdef SIMU
	*attr_PBunchPhase_read = w_val;
#else
	Tango::DevDouble phase = w_val;
	Tango::DeviceAttribute phase_attr("Value",phase);
	try
	{
		pbunchphaseds->write_attribute(phase_attr);
	}
	catch (Tango::DevFailed &e)
	{
		Tango::Except::print_exception(e);
		throw;
	}

#endif

	/*----- PROTECTED REGION END -----*/	//	LinacRF::write_PBunchPhase
}
//--------------------------------------------------------
/**
 *	Read attribute PBunchAttenu related method
 *	Description: PreBuncher Attenuation
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LinacRF::read_PBunchAttenu(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LinacRF::read_PBunchAttenu(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LinacRF::read_PBunchAttenu) ENABLED START -----*/
	#ifndef SIMU
	/* read value attribute on the Tango device */
	Tango::DevDouble attenu;
	try
	{
		Tango::DeviceAttribute attval = pbunchattadcds->read_attribute("Value");
		attval >> attenu;
		*attr_PBunchAttenu_read = attenu;
	}
	catch(Tango::DevFailed &e)
	{
		ERROR_STREAM << "LinacRF::read_PBunchAttenu: an Exception occured!" << endl;
		Tango::Except::print_exception(e);
		throw;
	}
#endif
	attr.set_value(attr_PBunchAttenu_read);
#ifndef SIMU
	// read set value on the dac device
	Tango::DevVarDoubleArray * setattenu;
	try
	{
		Tango::DeviceAttribute attval = pbunchattdacds->read_attribute("Value");
		attval >> setattenu;
		attr_PBunchAttenu_write = (*setattenu)[1];
		delete setattenu;
	}
	catch(Tango::DevFailed &e)
	{
		Tango::Except::print_exception(e);
		return;
	}
	// change set value according to pbunchatt device value set point
	Tango::MultiAttribute		*attr_list;
	attr_list = get_device_attr();
	Tango::WAttribute	&attr_attenu = attr_list->get_w_attr_by_name ("PBunchAttenu");
	try
	{
		attr_attenu.set_write_value(attr_PBunchAttenu_write);
	}
	catch(Tango::DevFailed &e)
	{
		Tango::Except::print_exception(e);
	}
#endif

	/*----- PROTECTED REGION END -----*/	//	LinacRF::read_PBunchAttenu
}
//--------------------------------------------------------
/**
 *	Write attribute PBunchAttenu related method
 *	Description: PreBuncher Attenuation
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LinacRF::write_PBunchAttenu(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LinacRF::write_PBunchAttenu(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LinacRF::write_PBunchAttenu) ENABLED START -----*/
#ifdef SIMU
	*attr_PBunchAttenu_read = w_val;
#else
	Tango::DevDouble attenu = w_val;
	Tango::DeviceAttribute attenu_attr("Value",attenu);
	try
	{
		pbunchattdacds->write_attribute(attenu_attr);
	}
	catch (Tango::DevFailed &e)
	{
		Tango::Except::print_exception(e);
		throw;
	}
#endif

	/*----- PROTECTED REGION END -----*/	//	LinacRF::write_PBunchAttenu
}
//--------------------------------------------------------
/**
 *	Read attribute BunchPhase related method
 *	Description: Buncher Phase
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LinacRF::read_BunchPhase(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LinacRF::read_BunchPhase(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LinacRF::read_BunchPhase) ENABLED START -----*/
	#ifndef SIMU
#ifdef VPAPPHASE
	Tango::DevDouble phase;
	try
	{
		Tango::DeviceAttribute phaseval = bunchphaseadcds->read_attribute("Value");
		phaseval >> phase;
		*attr_BunchPhase_read = phase;
	}
	catch(Tango::DevFailed &e)
	{
		ERROR_STREAM << "LinacRF::read_BunchPhase: an Exception occured!" << endl;
		Tango::Except::print_exception(e);
		throw;
	}
#else
	Tango::DevVarDoubleArray * phase;
	try
	{
		Tango::DeviceAttribute phaseval = bunchphaseds->read_attribute("Position");
		phaseval >> phase;
		*attr_BunchPhase_read = (*phase)[0];
		attr_BunchPhase_write = (*phase)[1];
		delete phase;
	}
	catch(Tango::DevFailed &e)
	{
		ERROR_STREAM << "LinacRF::read_BunchPhase: an Exception occured!" << endl;
		Tango::Except::print_exception(e);
		throw;
	}
	// change set value according to bunchphase device position set point
	Tango::MultiAttribute		*attr_list;
	attr_list = get_device_attr();
	Tango::WAttribute	&attr_bunchphase = attr_list->get_w_attr_by_name ("BunchPhase");
	try
	{
		attr_bunchphase.set_write_value(attr_BunchPhase_write);
	}
	catch(Tango::DevFailed &e)
	{
		Tango::Except::print_exception(e);
		throw;
	}
#endif
#endif
	attr.set_value(attr_BunchPhase_read);

	/*----- PROTECTED REGION END -----*/	//	LinacRF::read_BunchPhase
}
//--------------------------------------------------------
/**
 *	Write attribute BunchPhase related method
 *	Description: Buncher Phase
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LinacRF::write_BunchPhase(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LinacRF::write_BunchPhase(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LinacRF::write_BunchPhase) ENABLED START -----*/
#ifdef SIMU
	*attr_BunchPhase_read = w_val;
#else
#ifdef VPAPPHASE
	if(tacoPhase_imported == false)
	{
		// Taco device not imported
		// try to import it
		cout << "vpapphase device name = " << bunchphase << endl;
		long error;
		int status = dev_import((char*) bunchphase.c_str(),0,&bunchphaseds,&error);
		if(status == 0)
		{
			tacoPhase_imported = true;
			INFO_STREAM << "vpapphase taco device " << bunchphase << " successfully imported" << endl;
		}
		else
		{
			tacoPhase_imported = false;
			char *p_err = dev_error_str(error);
			cerr << "vpapphase taco device " << bunchphase <<" import failure: " << p_err << endl;
			ERROR_STREAM <<p_err << endl;
			free(p_err);
			TangoSys_OMemStream o;
			o << "Taco device " << bunchphase << ": " << dev_error_str(error) << ends;
			Tango::Except::throw_exception 
			((const char *)"TacoDeviceNotImported",
			o.str(),
			(const char *)"LinacRF::write_BunchPhase()");
		}
	}
	DevFloat setphase = w_val;
	long tacostatus;
	long tacoerror;
	tacostatus=dev_putget(bunchphaseds,DevSetValue,&setphase,D_FLOAT_TYPE,NULL,D_VOID_TYPE,&tacoerror);
	if(tacostatus != DS_OK)
	{
		char *p_err;
		p_err = dev_error_str(tacoerror);
		ERROR_STREAM << "LinacRF::write_BunchPhase: Unable to write buncher phase." << p_err << endl;
		free(p_err);
		TangoSys_OMemStream o;
		o << "Taco device " << bunchphase << ": " << dev_error_str(tacoerror) << ends;
		Tango::Except::throw_exception 
			((const char *)"UnableToWriteBunchPhase",
			o.str(),
			(const char *)"LinacRF::write_BunchPhase()");
	}
#else
	Tango::DevDouble phase = w_val;
	Tango::DeviceAttribute phase_attr("Position",phase);
	try
	{
		bunchphaseds->write_attribute(phase_attr);
	}
	catch (Tango::DevFailed &e)
	{
		Tango::Except::print_exception(e);
		throw;
	}
#endif
#endif

	/*----- PROTECTED REGION END -----*/	//	LinacRF::write_BunchPhase
}
//--------------------------------------------------------
/**
 *	Read attribute Sect2Phase related method
 *	Description: Section 2 Phase.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LinacRF::read_Sect2Phase(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LinacRF::read_Sect2Phase(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LinacRF::read_Sect2Phase) ENABLED START -----*/
    #ifndef SIMU
	Tango::DevVarDoubleArray * phase;
	try
	{
		Tango::DeviceAttribute phaseval = secphasedacds->read_attribute("Value");
		phaseval >> phase;
		*attr_Sect2Phase_read = (*phase)[0];
		attr_Sect2Phase_write = (*phase)[1];
		delete phase;
	}
	catch(Tango::DevFailed &e)
	{
		ERROR_STREAM << "LinacRF::read_Sect2Phase: an Exception occured!" << endl;
		Tango::Except::print_exception(e);
		throw;
	}
	// change set value according to sectphase device value set point
	Tango::MultiAttribute		*attr_list;
	attr_list = get_device_attr();
	Tango::WAttribute	&attr_sect2phase = attr_list->get_w_attr_by_name ("Sect2Phase");
	try
	{
		attr_sect2phase.set_write_value(attr_Sect2Phase_write);
	}
	catch(Tango::DevFailed &e)
	{
		Tango::Except::print_exception(e);
		throw;
	}
#endif
	attr.set_value(attr_Sect2Phase_read);

	/*----- PROTECTED REGION END -----*/	//	LinacRF::read_Sect2Phase
}
//--------------------------------------------------------
/**
 *	Write attribute Sect2Phase related method
 *	Description: Section 2 Phase.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LinacRF::write_Sect2Phase(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LinacRF::write_Sect2Phase(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LinacRF::write_Sect2Phase) ENABLED START -----*/
#ifdef SIMU
	*attr_Sect2Phase_read = w_val;
#else
	Tango::DevDouble phase = w_val;
	Tango::DeviceAttribute phase_attr("Value",phase);
	try
	{
		secphasedacds->write_attribute(phase_attr);
	}
	catch (Tango::DevFailed &e)
	{
		Tango::Except::print_exception(e);
		throw;
	}
#endif

	/*----- PROTECTED REGION END -----*/	//	LinacRF::write_Sect2Phase
}
//--------------------------------------------------------
/**
 *	Read attribute AtPermit related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LinacRF::read_AtPermit(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LinacRF::read_AtPermit(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LinacRF::read_AtPermit) ENABLED START -----*/
	// First read state:
#ifndef SIMU
	Tango::DeviceData data;
	Tango::DevState relay_state;
	
	data = WagoRelayAtPermitDS->command_inout("State");
	data >> relay_state;

	switch(relay_state)
	{	
		case Tango::OPEN :
		case Tango::CLOSE :
			*attr_AtPermit_read = (relay_state==Tango::OPEN) ? false : true;
		break;

		default:
			// The state can be MOVING too. For other state ->  set no writable.
			*attr_AtPermit_read = false;
			attr.set_quality(Tango::ATTR_INVALID);
		break;	
	}
#endif
	attr.set_value(attr_AtPermit_read);

	/*----- PROTECTED REGION END -----*/	//	LinacRF::read_AtPermit
}
//--------------------------------------------------------
/**
 *	Write attribute AtPermit related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LinacRF::write_AtPermit(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LinacRF::write_AtPermit(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LinacRF::write_AtPermit) ENABLED START -----*/

	try
	{
		if (w_val)
		{
			WagoRelayAtPermitDS->command_inout("Close");
		}
		else
		{
			WagoRelayAtPermitDS->command_inout("Open");
		}
	}
	catch(...)
	{
		if (w_val){
                    ERROR_STREAM << "LinacRF::write_AtPermit():Error executing 'open' command on " << atPermitDeviceName.c_str() <<  endl;
		} else {
                    ERROR_STREAM << "LinacRF::write_AtPermit():Error executing 'close' command on " << atPermitDeviceName.c_str() <<  endl;
                }
		throw;
	}

	/*----- PROTECTED REGION END -----*/	//	LinacRF::write_AtPermit
}
//--------------------------------------------------------
/**
 *	Read attribute PhPermit related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LinacRF::read_PhPermit(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LinacRF::read_PhPermit(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LinacRF::read_PhPermit) ENABLED START -----*/
#ifndef SIMU
	// First read state:
	Tango::DeviceData data;
	Tango::DevState relay_state;
	
	data = WagoRelayPhPermitDS->command_inout("State");
	data >> relay_state;

	switch(relay_state)
	{	
		case Tango::OPEN :
		case Tango::CLOSE :
			*attr_PhPermit_read = (relay_state==Tango::OPEN) ? false : true;
		break;

		default:
			// The state can be MOVING too. For other state ->  set no writable.
			*attr_PhPermit_read = false;
			attr.set_quality(Tango::ATTR_INVALID);
		break;	
	}
#endif
	attr.set_value(attr_PhPermit_read);

	/*----- PROTECTED REGION END -----*/	//	LinacRF::read_PhPermit
}
//--------------------------------------------------------
/**
 *	Write attribute PhPermit related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LinacRF::write_PhPermit(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LinacRF::write_PhPermit(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LinacRF::write_PhPermit) ENABLED START -----*/

	try
	{
		if (w_val)
		{
			WagoRelayPhPermitDS->command_inout("Close");
		}
		else
		{
			WagoRelayPhPermitDS->command_inout("Open");
		}
	}
	catch(...)
	{
		if (w_val) {
                    ERROR_STREAM << "LinacRF::write_PhPermit():Error executing 'open' command on " << phPermitDeviceName.c_str() <<  endl;
		} else {
                    ERROR_STREAM << "LinacRF::write_PhPermit():Error executing 'close' command on " << phPermitDeviceName.c_str() <<  endl;
                }
		throw;
	}

	/*----- PROTECTED REGION END -----*/	//	LinacRF::write_PhPermit
}

//--------------------------------------------------------
/**
 *	Method      : LinacRF::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void LinacRF::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(LinacRF::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
	/*----- PROTECTED REGION END -----*/	//	LinacRF::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command State related method
 *	Description: This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
 *
 *	@returns State Code
 */
//--------------------------------------------------------
Tango::DevState LinacRF::dev_state()
{
	DEBUG_STREAM << "LinacRF::State()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacRF::dev_state) ENABLED START -----*/
	
	Tango::DevState	argout = Tango::UNKNOWN; // replace by your own algorithm
	//	Add your own code
	evalue_state();
        argout = DeviceImpl::dev_state();

	/*----- PROTECTED REGION END -----*/	//	LinacRF::dev_state
	set_state(argout);    // Give the state to Tango.
	if (argout!=Tango::ALARM)
		DeviceImpl::dev_state();
	return get_state();  // Return it after Tango management.
}
//--------------------------------------------------------
/**
 *	Command Status related method
 *	Description: This command gets the device status (stored in its <i>device_status</i> data member) and returns it to the caller.
 *
 *	@returns Status description
 */
//--------------------------------------------------------
Tango::ConstDevString LinacRF::dev_status()
{
	DEBUG_STREAM << "LinacRF::Status()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacRF::dev_status) ENABLED START -----*/
	
	string	status = "Device is OK";
	//	Add your own code
	dev_state();
#ifndef SIMU
	switch(thestate)
	{
	case Tango::UNKNOWN:
		thestatus = "Interlock status not readable !";
		break;
	case Tango::OFF:
		thestatus = intlk_desc[0];
		break;
	case Tango::ON:
		thestatus = "ON";
		break;
	case Tango::DISABLE:
		thestatus = "Can' t be switch on while : \n";
		for(int i=1; i<intlk_states.size() ; i++)
		{
			if(intlk_states[i] == 0)
			{
				thestatus += intlk_desc[i];
				thestatus += "\n";
			}
		}
		break;
	case Tango::FAULT:
		thestatus = "";
		for(int i=2; i<intlk_states.size() ; i++)
		{
			cout << "i = " << i << endl;
			if(intlk_states[i] == 0)
			{
				thestatus += intlk_desc[i];
				thestatus += "\n";
			}
		}
		break;
	default:
		break;
	}
	set_status(thestatus.c_str());
#endif

	/*----- PROTECTED REGION END -----*/	//	LinacRF::dev_status
	set_status(status);               // Give the status to Tango.
	return DeviceImpl::dev_status();  // Return it.
}
//--------------------------------------------------------
/**
 *	Command On related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void LinacRF::on()
{
	DEBUG_STREAM << "LinacRF::On()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacRF::on) ENABLED START -----*/
	
	//	Add your own code
	struct timespec waittime;
	struct timespec remtime;

	DEBUG_STREAM << "LinacRF::on(): entering... !" << endl;

	//	Add your own code to control device here
#ifdef SIMU
	set_state(Tango::ON);
	thestate = Tango::ON;
#else
	try{	dev_state(); }
	catch(Tango::DevFailed &e){Tango::Except::print_exception(e);}
	if(get_state() == Tango::DISABLE)
	{
		if(intlk_states[1] == 0)
		{
			TangoSys_OMemStream o;
			o << "Can' t be switch on while " << intlk_desc[1] << ends;
			Tango::Except::throw_exception(
			(const char *) "CommandNotAllowed",
			o.str(),
			(const char *) "LinacRF::on()");
		}
	}
	try
	{
		OnRelayds->command_inout("close");
	}
	catch(...)
	{
		ERROR_STREAM << "LinacRF::on():Error activating the pulsed relay (close command)" << onrelay.c_str() <<  endl;
		throw;
	}
	waittime = pulsewaittime;
	while ((nanosleep(&waittime,&remtime) == -1) && (errno == EINTR))
				waittime = remtime;
	try
	{
		OnRelayds->command_inout("open");
	}
	catch(...)
	{
		ERROR_STREAM << "LinacRF::on():Error activating the pulsed relay (open command)" << onrelay.c_str() <<  endl;
		throw;
	}
	n_state = Tango::ON;
#endif

	/*----- PROTECTED REGION END -----*/	//	LinacRF::on
}
//--------------------------------------------------------
/**
 *	Command Off related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void LinacRF::off()
{
	DEBUG_STREAM << "LinacRF::Off()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacRF::off) ENABLED START -----*/
	
	//	Add your own code
	struct timespec waittime;
	struct timespec remtime;

	DEBUG_STREAM << "LinacRF::off(): entering... !" << endl;

	//	Add your own code to control device here
#ifdef SIMU
	set_state(Tango::OFF);
	thestate = Tango::OFF;
#else
	try
	{
		OffRelayds->command_inout("open");
	}
	catch(...)
	{
		ERROR_STREAM << "LinacRF::off():Error activating the pulsed relay (open command)" << offrelay.c_str() <<  endl;
		throw;
	}
	waittime = pulsewaittime;
	while ((nanosleep(&waittime,&remtime) == -1) && (errno == EINTR))
				waittime = remtime;
	try
	{
		OffRelayds->command_inout("close");
	}
	catch(...)
	{
		ERROR_STREAM << "LinacRF::off():Error activating the pulsed relay (close command)" << offrelay.c_str() <<  endl;
		throw;
	}
	n_state = Tango::OFF;
#endif

	/*----- PROTECTED REGION END -----*/	//	LinacRF::off
}
//--------------------------------------------------------
/**
 *	Command Reset related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void LinacRF::reset()
{
	DEBUG_STREAM << "LinacRF::Reset()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacRF::reset) ENABLED START -----*/
	
	//	Add your own code
	#ifdef SIMU_STATE
	switch(get_state())
	{
		case Tango::FAULT:
			set_state(Tango::ON);
			thestate = Tango::ON;
			break;
		case Tango::ON:
			set_state(Tango::OFF);
			thestate = Tango::OFF;
			break;
		case Tango::OFF:
			set_state(Tango::DISABLE);
			thestate = Tango::DISABLE;
			break;
		case Tango::DISABLE:
			set_state(Tango::FAULT);
			thestate = Tango::FAULT;
			break;
		default:
			set_state(Tango::ON);
			thestate = Tango::ON;
	}
#else
	// reset the Modulator which will make a pulse on the modulator reset relay
	// and will reset the Daresbury
	try
	{
		Modulatords->command_inout("Reset");
	}
	catch(Tango::DevFailed &e)
	{
		Tango::Except::print_exception(e);
		throw;
	}
	n_state = Tango::OFF;
#endif

	/*----- PROTECTED REGION END -----*/	//	LinacRF::reset
}
//--------------------------------------------------------
/**
 *	Command TimingOn related method
 *	Description: This command will switch on the timing.
 *               (will issue a DevOn on the shorttiming device).
 *
 */
//--------------------------------------------------------
void LinacRF::timing_on()
{
	DEBUG_STREAM << "LinacRF::TimingOn()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacRF::timing_on) ENABLED START -----*/
	
	//	Add your own code
	// this routine does nothing
	// it is here only to be compatible with old versions of the LinacSequencer server

	/*----- PROTECTED REGION END -----*/	//	LinacRF::timing_on
}
//--------------------------------------------------------
/**
 *	Method      : LinacRF::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void LinacRF::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(LinacRF::add_dynamic_commands) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic commands if any
	
	/*----- PROTECTED REGION END -----*/	//	LinacRF::add_dynamic_commands
}

/*----- PROTECTED REGION ID(LinacRF::namespace_ending) ENABLED START -----*/

//	Additional Methods
/*
 * This function import all TACO devices needed by LinacRF server. Note that with
 * TACO the connexion is stateless. This mean, that almost all connexion are
 * ok, except when device is not declared in TACO resource database. Errors,
 * occurs on dev_putget() command.
 */
void  LinacRF::importTacoDevices()
{
	DEBUG_STREAM << "LinacRF::importTacoDevices(): entering... !" << endl;
	
	cout << "delay device name = " << delay_name << endl;
#ifdef WITH_TACO
	long error;
	int status = dev_import((char*) delay_name.c_str(),0,&shorttimingds,&error);
	if(status == 0)
	{
		tacoDelay_imported = true;
		INFO_STREAM << "delay taco device " << delay_name << " successfully imported" << endl;
	}
	else
	{
		tacoDelay_imported = false;
		char *p_err = dev_error_str(error);
		cerr << "delay taco device " << delay_name <<" import failure: " << p_err << endl;
		ERROR_STREAM <<p_err << endl;
		free(p_err);
	}
#ifdef VPAPPHASE
	cout << "vpapphase device name = " << bunchphase << endl;
	status = dev_import((char*) bunchphase.c_str(),0,&bunchphaseds,&error);
	if(status == 0)
	{
		tacoPhase_imported = true;
		INFO_STREAM << "vpapphase taco device " << bunchphase << " successfully imported" << endl;
	}
	else
	{
		tacoPhase_imported = false;
		char *p_err = dev_error_str(error);
		cerr << "vpapphase taco device " << bunchphase <<" import failure: " << p_err << endl;
		ERROR_STREAM <<p_err << endl;
		free(p_err);
	}
#endif	
#endif
}
/*
 * This function free all TACO devices needed by LinacRF server. Note that with
 * TACO the connexion is stateless. This mean, that almost all connexion are
 * ok, except when device is not declared in TACO resource database. Errors,
 * occurs on dev_putget() command.
 */
void  LinacRF::freeTacoDevices()
{
	DEBUG_STREAM << "LinacRF::freeTacoDevices(): entering... !" << endl;

#ifdef WITH_TACO
	if(tacoDelay_imported == true)
	{
		long error;
		long status = dev_free(shorttimingds,&error);
		if(status == 0)
		{
			DEBUG_STREAM << "delay taco device " << delay_name << " successfully freed" << endl;
		}
		else
		{
			char *p_err = dev_error_str(error);
			cerr << "delay taco device " << delay_name <<" free failure: " << p_err << endl;
			ERROR_STREAM <<p_err << endl;
			free(p_err);
		}
	}
#ifdef VPAPPHASE
if(tacoPhase_imported == true)
	{
		long error;
		long status = dev_free(bunchphaseds,&error);
		if(status == 0)
		{
			DEBUG_STREAM << "vpapphase taco device " << bunchphase << " successfully freed" << endl;
		}
		else
		{
			char *p_err = dev_error_str(error);
			cerr << "vpapphase taco device " << bunchphase <<" free failure: " << p_err << endl;
			ERROR_STREAM <<p_err << endl;
			free(p_err);
		}
	}
#endif
#endif
}
/*
 * This function will read the interlocks attribute from the Daresbury device server
 * Description:evaluate the state of the device by reading the state of the
 * corresponding  Daresbury relay.
 * the state of the object is directly updated.
 */
void LinacRF::evalue_state()
{
	DEBUG_STREAM << "LinacRF::evalue_state(): entering... !" << endl;
#ifndef SIMU
	Tango::DeviceData argin;
	try
	{
		argin << interlocks;
		Tango::DeviceData ans = daresburyds->command_inout("GetInterlockState",argin);
		ans >> intlk_states;
	}
	catch(Tango::DevFailed &e)
	{
		set_state(Tango::UNKNOWN);
		thestate = Tango::UNKNOWN;
		Tango::Except::print_exception(e);
		return;
	}
	for(int i=0;i<intlk_states.size();i++)
		DEBUG_STREAM << "intlk_states[" << i << "] = " << intlk_states[i] << endl;

	if(intlk_states[0] == 1)
	{
		set_state(Tango::ON);
		thestate = Tango::ON;
		n_state = Tango::ON;
		return;
	}
	if(intlk_states[1] == 0)
	{
		set_state(Tango::DISABLE);
		thestate = Tango::DISABLE;
		n_state = Tango::OFF;
		return;
	}
	for(int i=2;i<intlk_states.size();i++)
	{
		if(intlk_states[i] == 0)
		{
			if(n_state == Tango::ON)
			{
				set_state(Tango::FAULT);
				thestate = Tango::FAULT;
			}
			else
			{
				set_state(Tango::DISABLE);
				thestate = Tango::DISABLE;
			}
			return;
		}
	}
	set_state(Tango::OFF);
	thestate = Tango::OFF;
	return;

#endif
}


/*----- PROTECTED REGION END -----*/	//	LinacRF::namespace_ending
} //	namespace
