/*----- PROTECTED REGION ID(LinacGunHVPS.h) ENABLED START -----*/
//=============================================================================
//
// file :        LinacGunHVPS.h
//
// description : Include file for the LinacGunHVPS class
//
// project :     Linac Gun High Voltage Power Supply
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef LinacGunHVPS_H
#define LinacGunHVPS_H

#include <tango.h>





/*----- PROTECTED REGION END -----*/	//	LinacGunHVPS.h

/**
 *  LinacGunHVPS class description:
 *    The high voltage power supply will provide high voltage to the gun of the linac.
 */

namespace LinacGunHVPS_ns
{
/*----- PROTECTED REGION ID(LinacGunHVPS::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations

/*----- PROTECTED REGION END -----*/	//	LinacGunHVPS::Additional Class Declarations

class LinacGunHVPS : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(LinacGunHVPS::Data Members) ENABLED START -----*/

//	Add your own data members
public:
        Tango::DevDouble attr_HighVoltage_write;


/*----- PROTECTED REGION END -----*/	//	LinacGunHVPS::Data Members

//	Device property data members
public:
	//	Daresbury:	Name of the daresbury device.
	string	daresbury;
	//	HighVoltage_adc:	ADC device to get the High Voltage.
	string	highVoltage_adc;
	//	HighVoltage_dac:	DAC device to set the High Voltage.
	string	highVoltage_dac;
	//	Interlocks_list:	list of interlocks.
	vector<Tango::DevDouble>	interlocks_list;
	//	Offrelay:	Name of the relay used to switch off the HVPS.
	string	offrelay;
	//	Onrelay:	Name of the relay used to switch on the HVPS.
	string	onrelay;
	//	Pulsetime:	Duration in milliseconds of the pulse to do on the pulsed relays.
	Tango::DevLong	pulsetime;
	//	Stateonnum:	number of the interlock relay used to determine whether the device
	//  is on or not.
	Tango::DevDouble	stateonnum;
	//	Statepermnum:	Daresbury relay number which indicates if the device is allowed
	//  to be switched On.
	Tango::DevDouble	statepermnum;
	//	Current_adc:	Adc device to get the HV current.
	string	current_adc;

//	Attribute data members
public:
	Tango::DevDouble	*attr_HighVoltage_read;
	Tango::DevDouble	*attr_Current_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	LinacGunHVPS(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	LinacGunHVPS(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	LinacGunHVPS(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~LinacGunHVPS() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();


//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : LinacGunHVPS::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);
	//--------------------------------------------------------
	/*
	 *	Method      : LinacGunHVPS::write_attr_hardware()
	 *	Description : Hardware writing for attributes.
	 */
	//--------------------------------------------------------
	virtual void write_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute HighVoltage related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_HighVoltage(Tango::Attribute &attr);
	virtual void write_HighVoltage(Tango::WAttribute &attr);
	virtual bool is_HighVoltage_allowed(Tango::AttReqType type);
/**
 *	Attribute Current related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_Current(Tango::Attribute &attr);
	virtual bool is_Current_allowed(Tango::AttReqType type);


	//--------------------------------------------------------
	/**
	 *	Method      : LinacGunHVPS::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:
	/**
	 *	Command State related method
	 *	Description: This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
	 *
	 *	@returns State Code
	 */
	virtual Tango::DevState dev_state();
	/**
	 *	Command Status related method
	 *	Description: This command gets the device status (stored in its <i>device_status</i> data member) and returns it to the caller.
	 *
	 *	@returns Status description
	 */
	virtual Tango::ConstDevString dev_status();
	/**
	 *	Command On related method
	 *	Description: 
	 *
	 */
	virtual void on();
	virtual bool is_On_allowed(const CORBA::Any &any);
	/**
	 *	Command Off related method
	 *	Description: 
	 *
	 */
	virtual void off();
	virtual bool is_Off_allowed(const CORBA::Any &any);
	/**
	 *	Command Reset related method
	 *	Description: 
	 *
	 */
	virtual void reset();
	virtual bool is_Reset_allowed(const CORBA::Any &any);


	//--------------------------------------------------------
	/**
	 *	Method      : LinacGunHVPS::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(LinacGunHVPS::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes
protected :	
	Tango::DeviceProxy * daresburyds;
	Tango::DeviceProxy * OffRelayds;
	Tango::DeviceProxy * OnRelayds;
	Tango::DeviceProxy * HVadcds;
	Tango::DeviceProxy * HVdacds;
	Tango::DeviceProxy * Currentadcds;
	vector<Tango::DevLong> interlocks;
	vector<unsigned char> intlk_states;
	vector<string> intlk_desc;
	string thestatus;
	struct timespec pulsewaittime;
	Tango::DevState n_state;
	Tango::DevState thestate;
	void evalue_state();

/*----- PROTECTED REGION END -----*/	//	LinacGunHVPS::Additional Method prototypes
};

/*----- PROTECTED REGION ID(LinacGunHVPS::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions

/*----- PROTECTED REGION END -----*/	//	LinacGunHVPS::Additional Classes Definitions

}	//	End of namespace

#endif   //	LinacGunHVPS_H
