/*----- PROTECTED REGION ID(Linac.h) ENABLED START -----*/
//=============================================================================
//
// file :        Linac.h
//
// description : Include file for the Linac class
//
// project :     Linac
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef Linac_H
#define Linac_H

#include <tango.h>
#ifndef SIMU
#       include <API.h>
#       undef DevState
#endif


#define NO_CMD				0
#define ON_CMD				1
#define OFF_CMD			2
#define LOW_HEATING_CMD	3
#define STANDBY_CMD		4
#define LOAD_FILE_CMD	5
#define SAVE_FILE_CMD	6
#define FORCE_SAVE_CMD	7

#ifdef WIN32
#define strcasecmp(s1,s2) stricmp((s1), (s2))
#define usleep(t) Sleep((t)/1000)
#define sleep(t) Sleep((t)*1000)
#endif


/*----- PROTECTED REGION END -----*/	//	Linac.h

/**
 *  Linac class description:
 *    This class will manage the high level object controlling the linac.
 *    This object will allow the executions of sequences to put the linac in ON,OFF,
 *    STANDBY or LOW HEATING STATE.
 */

namespace Linac_ns
{
/*----- PROTECTED REGION ID(Linac::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations
class MyCallBack:public Tango::CallBack
{
public:
	MyCallBack(){readState = Tango::UNKNOWN;};
	virtual void attr_read(Tango::AttrReadEvent *);
	Tango::DevState readState;
};

double get_ticks();

/*----- PROTECTED REGION END -----*/	//	Linac::Additional Class Declarations

class Linac : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(Linac::Data Members) ENABLED START -----*/

//	Add your own data members
public:
	
		/////// device names ///////
	string gun_aux_name;
	string gun_name;
	string gun_HV_name;
	string rf_run_name;
	string cooling_name;		
	string mod1_aux_name;		
	string mod2_aux_name;
	string mod1_HV_name;	
	string mod2_HV_name;	
	string mod1_name;	
	string mod2_name;	
	string focus_klystron1_name;
	string focus_klystron2_name;
	string focus_beam1_name;
	string focus_beam2_name;
	string focus_steer_name;

	// New Gun addition.
	string gun_focus_b1b4_tdk_name;
	string gun_steerer_tdk_name;
	string prebuncher_steerer_tdk_name;
	
	// shared variables
	Tango::DevState thestate;
	Tango::DevState	SequencerState;
	string unknown_status;
	string alarm_status;
	string fault_status;
	bool killthread;
	bool quit;
	bool linac_permit;
	bool killbeamstopthread;
	bool pctselectedshared;  // true => PCT is used to read the current 
				// false => ICT is used to read the current 
	bool pct_has_changed;
	bool ict_has_changed;
	bool BeamStopProblem;
	string BeamStopStatus;
	Tango::DevDouble	CT_limit;
        Tango::DevDouble attr_SRCT_Limit_write;


/*----- PROTECTED REGION END -----*/	//	Linac::Data Members

//	Device property data members
public:
	//	Dirname:	The operation files for the linac will be load and saved in that directory
	//  and its subfolders.
	string	dirname;
	//	Startfile:	Name of the config file to be loaded at startup.
	string	startfile;
	//	ICT_device:	ICT device on which we could read the current used for beamstop functionality.
	string	iCT_device;
	//	PCT_device:	PCT device on which we could read the current used for
	//  beamstop functionality only if we can`t read the taco resource
	//  sr/d-ct/1/name during the init.
	//  If we can read this taco resource, we will use this resource as the PCT
	//  device to be read.
	string	pCT_device;
	//	Sequencer:	Sequencer device name.
	string	sequencer;
	//	ICT_limit:	Value used at startup as SRCT limit when ct_device = ICT.
	Tango::DevDouble	iCT_limit;
	//	PCT_limit:	Value used at startup as SRCT limit when ct_device = PCT.
	Tango::DevDouble	pCT_limit;
	//	Daresbury:	Name of the daresbury device.
	string	daresbury;
	//	Pss_interlocks_list:	list of pss interlocks.
	vector<Tango::DevDouble>	pss_interlocks_list;
	//	Reset_devices_list:	List of devices to be reset when the command reset is called
	vector<string>	reset_devices_list;

//	Attribute data members
public:
	Tango::DevString	*attr_File_read;
	Tango::DevDouble	*attr_SRCT_Limit_read;
	Tango::DevString	*attr_CT_device_read;
	Tango::DevDouble	*attr_CT_Current_read;
	Tango::DevString	*attr_ShortStatus_read;
	Tango::DevString	*attr_PCT_device_read;
	Tango::DevString	*attr_ICT_device_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	Linac(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	Linac(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	Linac(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~Linac() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();


//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : Linac::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);
	//--------------------------------------------------------
	/*
	 *	Method      : Linac::write_attr_hardware()
	 *	Description : Hardware writing for attributes.
	 */
	//--------------------------------------------------------
	virtual void write_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute File related methods
 *	Description: Configuration file
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_File(Tango::Attribute &attr);
	virtual bool is_File_allowed(Tango::AttReqType type);
/**
 *	Attribute SRCT_Limit related methods
 *	Description: The set value of this attribute corresponds to the maximum\nallowed threshold for the current in the SR.\nIf the SR current is greater than the set value of this attribute,\nthe linac is put in Standby state and cannot be switched ON.\n\nThe read value of this attribute is the present SR current value.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_SRCT_Limit(Tango::Attribute &attr);
	virtual void write_SRCT_Limit(Tango::WAttribute &attr);
	virtual bool is_SRCT_Limit_allowed(Tango::AttReqType type);
/**
 *	Attribute CT_device related methods
 *	Description: Current Transformer on which we read the current used \nfor the beam_stop functionality.\nPossible values are PCT or ICT.
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_CT_device(Tango::Attribute &attr);
	virtual void write_CT_device(Tango::WAttribute &attr);
	virtual bool is_CT_device_allowed(Tango::AttReqType type);
/**
 *	Attribute CT_Current related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_CT_Current(Tango::Attribute &attr);
	virtual bool is_CT_Current_allowed(Tango::AttReqType type);
/**
 *	Attribute ShortStatus related methods
 *	Description: A short description of the status of the linac.
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_ShortStatus(Tango::Attribute &attr);
	virtual bool is_ShortStatus_allowed(Tango::AttReqType type);
/**
 *	Attribute PCT_device related methods
 *	Description: Name of the PCT device read via the \nproperty sr/d-ct/1/CurrentDeviceName
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_PCT_device(Tango::Attribute &attr);
	virtual bool is_PCT_device_allowed(Tango::AttReqType type);
/**
 *	Attribute ICT_device related methods
 *	Description: Name of the PCT device read via the \nproperty sr/d-ct/2/CurrentDeviceName
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_ICT_device(Tango::Attribute &attr);
	virtual bool is_ICT_device_allowed(Tango::AttReqType type);


	//--------------------------------------------------------
	/**
	 *	Method      : Linac::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:
	/**
	 *	Command State related method
	 *	Description: This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
	 *
	 *	@returns State Code
	 */
	virtual Tango::DevState dev_state();
	/**
	 *	Command Status related method
	 *	Description: This command gets the device status (stored in its <i>device_status</i> data member) and returns it to the caller.
	 *
	 *	@returns Status description
	 */
	virtual Tango::ConstDevString dev_status();
	/**
	 *	Command On related method
	 *	Description: 
	 *
	 */
	virtual void on();
	virtual bool is_On_allowed(const CORBA::Any &any);
	/**
	 *	Command Off related method
	 *	Description: 
	 *
	 */
	virtual void off();
	virtual bool is_Off_allowed(const CORBA::Any &any);
	/**
	 *	Command Standby related method
	 *	Description: 
	 *
	 */
	virtual void standby();
	virtual bool is_Standby_allowed(const CORBA::Any &any);
	/**
	 *	Command LowHeating related method
	 *	Description: 
	 *
	 */
	virtual void low_heating();
	virtual bool is_LowHeating_allowed(const CORBA::Any &any);
	/**
	 *	Command Abort related method
	 *	Description: 
	 *
	 */
	virtual void abort();
	virtual bool is_Abort_allowed(const CORBA::Any &any);
	/**
	 *	Command Reset related method
	 *	Description: 
	 *
	 */
	virtual void reset();
	virtual bool is_Reset_allowed(const CORBA::Any &any);
	/**
	 *	Command ReadDirName related method
	 *	Description: Command to retrieve the name of the directory under which the Linac configuration files
	 *               are load and saved.
	 *
	 *	@returns The name of the directory under which the files are load and saved.
	 */
	virtual Tango::DevString read_dir_name();
	virtual bool is_ReadDirName_allowed(const CORBA::Any &any);
	/**
	 *	Command LoadFile related method
	 *	Description: Load the configuration file given in argument.
	 *
	 *	@param argin File to load
	 */
	virtual void load_file(Tango::DevString argin);
	virtual bool is_LoadFile_allowed(const CORBA::Any &any);
	/**
	 *	Command SaveFile related method
	 *	Description: This command will save all the present settings in a file.
	 *               The argin is the name of the file. It's a relative pathname.
	 *               For example, if 'test/16bunch' is given in argin, the file will be saved in dirname/test/16bunch.
	 *               dirname is the dirname property of the server.
	 *               You can use the command readDirName to know the value of dirname.
	 *               These settings will be applied by the server from now.
	 *
	 *	@param argin Name of the file (relative to dirname property)
	 */
	virtual void save_file(Tango::DevString argin);
	virtual bool is_SaveFile_allowed(const CORBA::Any &any);
	/**
	 *	Command ForceSave related method
	 *	Description: This command will force the save of all the present settings in a file
	 *               even if there was a problem when getting all the current set points.
	 *               If a set point could not be read, the set point given in the last loaded or saved file will be used.
	 *               The argin is the name of the file. It's a relative pathname.
	 *               For example, if 'test/16bunch' is given in argin, the file will be saved in dirname/test/16bunch.
	 *               dirname is the dirname property of the server.
	 *               You can use the command readDirName to know the value of dirname.
	 *               These settings will be applied by the server from now.
	 *
	 *	@param argin Name of the file (relative to dirname property)
	 */
	virtual void force_save(Tango::DevString argin);
	virtual bool is_ForceSave_allowed(const CORBA::Any &any);
	/**
	 *	Command GetPCTDeviceName related method
	 *	Description: This command will return the name of the PCT device to be read.
	 *               This name is obtained through the Tango database by reading the property sr/d-ct/1/CurrentDeviceName.
	 *               After the call to this function, the PCT device used in the Linac server will be the one given by this property.
	 *
	 *	@returns PCT device name
	 */
	virtual Tango::DevString get_pctdevice_name();
	virtual bool is_GetPCTDeviceName_allowed(const CORBA::Any &any);
	/**
	 *	Command GetICTDeviceName related method
	 *	Description: This command will return the name of the ICT device to be read.
	 *               This name is obtained through the Tango database by reading the property sr/d-ct/2/CurrentDeviceName.
	 *               After the call to this function, the ICT device used in the Linac server will be the one given by this property.
	 *
	 *	@returns PCT device name
	 */
	virtual Tango::DevString get_ictdevice_name();
	virtual bool is_GetICTDeviceName_allowed(const CORBA::Any &any);


	//--------------------------------------------------------
	/**
	 *	Method      : Linac::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(Linac::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes
protected :	
	string 	thestatus;
	string 	shortstatus;
	string	filename;
	
	Tango::DeviceProxy * 	PCTds;
	Tango::DeviceProxy * 	ICTds;
	Tango::DeviceProxy * 	myself;
	Tango::DeviceProxy *	Daresburyds;
	Tango::Group *	reset_devices;

	////////////
	Tango::DeviceProxy *	Sequencerds;
	Tango::DevDouble	CTread;
	bool			in_init;
	// thread relative variables
	omni_thread		*state_thread;
	omni_mutex		mutex;
	omni_thread		*beamstop_thread;
	omni_mutex		beamstop_mutex;
	// Misc variables
	bool			overcurrent;
	int 			last_cmd;
	Tango::DevState 	StateGivenByThread;
	bool pctselected;  // true => PCT is used to read the current 
				// false => ICT is used to read the current

/*----- PROTECTED REGION END -----*/	//	Linac::Additional Method prototypes
};

/*----- PROTECTED REGION ID(Linac::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions

/*----- PROTECTED REGION END -----*/	//	Linac::Additional Classes Definitions

}	//	End of namespace

#endif   //	Linac_H
