/*----- PROTECTED REGION ID(LinacHVPSStateMachine.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        LinacHVPSStateMachine.cpp
//
// description : State machine file for the LinacHVPS class
//
// project :     Linac High Voltage Power Supply
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================

#include <LinacHVPS.h>

/*----- PROTECTED REGION END -----*/	//	LinacHVPS::LinacHVPSStateMachine.cpp

//================================================================
//  States   |  Description
//================================================================
//  ON       |  *
//  OFF      |  *
//  DISABLE  |  *
//  FAULT    |  


namespace LinacHVPS_ns
{
//=================================================
//		Attributes Allowed Methods
//=================================================

//--------------------------------------------------------
/**
 *	Method      : LinacHVPS::is_HighVoltage_allowed()
 *	Description : Execution allowed for HighVoltage attribute
 */
//--------------------------------------------------------
bool LinacHVPS::is_HighVoltage_allowed(TANGO_UNUSED(Tango::AttReqType type))
{
	//	Not any excluded states for HighVoltage attribute in Write access.
	/*----- PROTECTED REGION ID(LinacHVPS::HighVoltageStateAllowed_WRITE) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	LinacHVPS::HighVoltageStateAllowed_WRITE

	//	Not any excluded states for HighVoltage attribute in read access.
	/*----- PROTECTED REGION ID(LinacHVPS::HighVoltageStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	LinacHVPS::HighVoltageStateAllowed_READ
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LinacHVPS::is_HVDac_allowed()
 *	Description : Execution allowed for HVDac attribute
 */
//--------------------------------------------------------
bool LinacHVPS::is_HVDac_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

	//	Not any excluded states for HVDac attribute in read access.
	/*----- PROTECTED REGION ID(LinacHVPS::HVDacStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	LinacHVPS::HVDacStateAllowed_READ
	return true;
}


//=================================================
//		Commands Allowed Methods
//=================================================

//--------------------------------------------------------
/**
 *	Method      : LinacHVPS::is_On_allowed()
 *	Description : Execution allowed for On attribute
 */
//--------------------------------------------------------
bool LinacHVPS::is_On_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for On command.
	/*----- PROTECTED REGION ID(LinacHVPS::OnStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	LinacHVPS::OnStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LinacHVPS::is_Off_allowed()
 *	Description : Execution allowed for Off attribute
 */
//--------------------------------------------------------
bool LinacHVPS::is_Off_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for Off command.
	/*----- PROTECTED REGION ID(LinacHVPS::OffStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	LinacHVPS::OffStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LinacHVPS::is_Reset_allowed()
 *	Description : Execution allowed for Reset attribute
 */
//--------------------------------------------------------
bool LinacHVPS::is_Reset_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for Reset command.
	/*----- PROTECTED REGION ID(LinacHVPS::ResetStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	LinacHVPS::ResetStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LinacHVPS::is_HVZero_allowed()
 *	Description : Execution allowed for HVZero attribute
 */
//--------------------------------------------------------
bool LinacHVPS::is_HVZero_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for HVZero command.
	/*----- PROTECTED REGION ID(LinacHVPS::HVZeroStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	LinacHVPS::HVZeroStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LinacHVPS::is_SetHV_allowed()
 *	Description : Execution allowed for SetHV attribute
 */
//--------------------------------------------------------
bool LinacHVPS::is_SetHV_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetHV command.
	/*----- PROTECTED REGION ID(LinacHVPS::SetHVStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	LinacHVPS::SetHVStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LinacHVPS::is_SoftReset_allowed()
 *	Description : Execution allowed for SoftReset attribute
 */
//--------------------------------------------------------
bool LinacHVPS::is_SoftReset_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SoftReset command.
	/*----- PROTECTED REGION ID(LinacHVPS::SoftResetStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	LinacHVPS::SoftResetStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LinacHVPS::is_SoftOn_allowed()
 *	Description : Execution allowed for SoftOn attribute
 */
//--------------------------------------------------------
bool LinacHVPS::is_SoftOn_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SoftOn command.
	/*----- PROTECTED REGION ID(LinacHVPS::SoftOnStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	LinacHVPS::SoftOnStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LinacHVPS::is_SoftOff_allowed()
 *	Description : Execution allowed for SoftOff attribute
 */
//--------------------------------------------------------
bool LinacHVPS::is_SoftOff_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SoftOff command.
	/*----- PROTECTED REGION ID(LinacHVPS::SoftOffStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	LinacHVPS::SoftOffStateAllowed
	return true;
}


/*----- PROTECTED REGION ID(LinacHVPS::LinacHVPSStateAllowed.AdditionalMethods) ENABLED START -----*/

//	Additional Methods

/*----- PROTECTED REGION END -----*/	//	LinacHVPS::LinacHVPSStateAllowed.AdditionalMethods

}	//	End of namespace
