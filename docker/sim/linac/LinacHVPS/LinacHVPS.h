/*----- PROTECTED REGION ID(LinacHVPS.h) ENABLED START -----*/
//=============================================================================
//
// file :        LinacHVPS.h
//
// description : Include file for the LinacHVPS class
//
// project :     Linac High Voltage Power Supply
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef LinacHVPS_H
#define LinacHVPS_H


#include <tango.h>

/*----- PROTECTED REGION END -----*/	//	LinacHVPS.h

/**
 *  LinacHVPS class description:
 *    The high voltage power supply will provide high voltage
 *    to the modulators and to the the gun modulator of the linac.
 */

namespace LinacHVPS_ns
{
/*----- PROTECTED REGION ID(LinacHVPS::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations

/*----- PROTECTED REGION END -----*/	//	LinacHVPS::Additional Class Declarations

class LinacHVPS : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(LinacHVPS::Data Members) ENABLED START -----*/

//	Add your own data members
public:
        Tango::DevDouble attr_HighVoltage_write;


/*----- PROTECTED REGION END -----*/	//	LinacHVPS::Data Members

//	Device property data members
public:
	//	Daresbury:	Name of the daresbury device.
	string	daresbury;
	//	HighVoltage_adc:	ADC device to get the High Voltage.
	string	highVoltage_adc;
	//	HighVoltage_dac:	DAC device to set the High Voltage.
	string	highVoltage_dac;
	//	Interlocks_list:	list of interlocks.
	vector<Tango::DevDouble>	interlocks_list;
	//	Offrelay:	Name of the relay used to switch off the HVPS.
	string	offrelay;
	//	Onrelay:	Name of the relay used to switch on the HVPS.
	string	onrelay;
	//	Pulsetime:	Duration in milliseconds of the pulse to do on the pulsed relays.
	Tango::DevLong	pulsetime;
	//	Stateonnum:	number of the interlock relay used to determine whether the device
	//  is on or not.
	Tango::DevDouble	stateonnum;
	//	Statepermnum:	Daresbury relay number which indicates if the device is allowed
	//  to be switched On.
	Tango::DevDouble	statepermnum;

//	Attribute data members
public:
	Tango::DevDouble	*attr_HighVoltage_read;
	Tango::DevDouble	*attr_HVDac_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	LinacHVPS(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	LinacHVPS(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	LinacHVPS(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~LinacHVPS() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();


//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : LinacHVPS::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);
	//--------------------------------------------------------
	/*
	 *	Method      : LinacHVPS::write_attr_hardware()
	 *	Description : Hardware writing for attributes.
	 */
	//--------------------------------------------------------
	virtual void write_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute HighVoltage related methods
 *	Description: High Voltage read on the ADC.\nThe set point corresponds to the value which will be set \non the DAC during the ON sequence of the Linac.\nIf the Power Supply is already on, this set point will be \napplied directly on the DAC.\n
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_HighVoltage(Tango::Attribute &attr);
	virtual void write_HighVoltage(Tango::WAttribute &attr);
	virtual bool is_HighVoltage_allowed(Tango::AttReqType type);
/**
 *	Attribute HVDac related methods
 *	Description: High Voltage value set on the DAC.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_HVDac(Tango::Attribute &attr);
	virtual bool is_HVDac_allowed(Tango::AttReqType type);


	//--------------------------------------------------------
	/**
	 *	Method      : LinacHVPS::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:
	/**
	 *	Command State related method
	 *	Description: This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
	 *
	 *	@returns State Code
	 */
	virtual Tango::DevState dev_state();
	/**
	 *	Command Status related method
	 *	Description: This command gets the device status (stored in its <i>device_status</i> data member) and returns it to the caller.
	 *
	 *	@returns Status description
	 */
	virtual Tango::ConstDevString dev_status();
	/**
	 *	Command On related method
	 *	Description: 
	 *
	 */
	virtual void on();
	virtual bool is_On_allowed(const CORBA::Any &any);
	/**
	 *	Command Off related method
	 *	Description: 
	 *
	 */
	virtual void off();
	virtual bool is_Off_allowed(const CORBA::Any &any);
	/**
	 *	Command Reset related method
	 *	Description: 
	 *
	 */
	virtual void reset();
	virtual bool is_Reset_allowed(const CORBA::Any &any);
	/**
	 *	Command HVZero related method
	 *	Description: This command will set the High Voltage to 0 without losing the set point of
	 *               the HighVoltage Attribute.
	 *
	 */
	virtual void hvzero();
	virtual bool is_HVZero_allowed(const CORBA::Any &any);
	/**
	 *	Command SetHV related method
	 *	Description: This command will apply the setpoint of the HighVoltage Attribute on the HV DAC channel.
	 *
	 */
	virtual void set_hv();
	virtual bool is_SetHV_allowed(const CORBA::Any &any);
	/**
	 *	Command SoftReset related method
	 *	Description: Reset without reset of the Daresbury.
	 *
	 */
	virtual void soft_reset();
	virtual bool is_SoftReset_allowed(const CORBA::Any &any);
	/**
	 *	Command SoftOn related method
	 *	Description: Specify that we would like to reach On state.
	 *               Do not execute Pulse command on the OnRelay.
	 *
	 */
	virtual void soft_on();
	virtual bool is_SoftOn_allowed(const CORBA::Any &any);
	/**
	 *	Command SoftOff related method
	 *	Description: Specify that we would like to reach OFF state.
	 *               do not execute Pulse command on the OffRelay.
	 *
	 */
	virtual void soft_off();
	virtual bool is_SoftOff_allowed(const CORBA::Any &any);


	//--------------------------------------------------------
	/**
	 *	Method      : LinacHVPS::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(LinacHVPS::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes
protected :	
	Tango::DeviceProxy * daresburyds;
	Tango::DeviceProxy * OffRelayds;
	Tango::DeviceProxy * OnRelayds;
	Tango::DeviceProxy * HVadcds;
	Tango::DeviceProxy * HVdacds;
	vector<Tango::DevLong> interlocks;
	vector<unsigned char> intlk_states;
	vector<string> intlk_desc;
	string thestatus;
	Tango::DevState n_state;
	Tango::DevState thestate;
	struct timespec pulsewaittime;
	void evalue_state();

/*----- PROTECTED REGION END -----*/	//	LinacHVPS::Additional Method prototypes
};

/*----- PROTECTED REGION ID(LinacHVPS::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions

/*----- PROTECTED REGION END -----*/	//	LinacHVPS::Additional Classes Definitions

}	//	End of namespace

#endif   //	LinacHVPS_H
