/*----- PROTECTED REGION ID(TangoMultiChannelDynAttrUtils.cpp) ENABLED START -----*/
static const char *RcsId = "$Id: TangoMultiChannelDynAttrUtils.cpp,v 1.2 2013-08-08 11:58:04 tappret Exp $";
//=============================================================================
//
// file :        TangoMultiChannel.cpp
//
// description : C++ source to manage dynamic attributes for TangoMultiChannelclass.
//
// project :     TangoMultiChannel.
//
// $Author: tappret $
//
// $Revision: 1.2 $
// $Date: 2013-08-08 11:58:04 $
//
// SVN only:
// $HeadURL:  $
//
// CVS only:
// $Source: /segfs/tango/cvsroot/cppserver/machine/GenericMultiChannel/TangoMultiChannelDynAttrUtils.cpp,v $
// $Log: TangoMultiChannelDynAttrUtils.cpp,v $
// Revision 1.2  2013-08-08 11:58:04  tappret
// first commit.
//
// Revision 1.1.1.1  2013-08-08 11:48:34  tappret
// GenericMultiChannel
//
// Revision 1.1.1.1  2012/03/13 08:28:22  vedder
// Initial import.
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <TangoMultiChannel.h>
#include <TangoMultiChannelClass.h>

/*----- PROTECTED REGION END -----*/

//	Dynamic attribute managed is:
//     - DoubleSpectrum



namespace TangoMultiChannel_ns
{
//=============================================================
//	Adding dynamic attribute methods
//=============================================================
	
//--------------------------------------------------------
/**
 *	Add a DoubleSpectrum dynamic attribute.
 *
 *  parameter attname: attribute name to be cretated and added.
 *  parameter ptr:     memory buffer used to set attribute value.
 *                     If NULL or not specified, buffer will be allocated.
 */
//--------------------------------------------------------
void TangoMultiChannel::add_DoubleSpectrum_dynamic_attribute(string attname, Tango::DevDouble *ptr)
{
	//	Create and add dynamic attribute
	if (ptr==NULL)
		ptr = new double[512];
	DoubleSpectrumAttrib *doublespectrum = new DoubleSpectrumAttrib(attname);
	Tango::UserDefaultAttrProp	doublespectrum_prop;
	doublespectrum_prop.set_description("This attribute will contains values of collected attributes.");
	//	label	not set for	DoubleSpectrum
	//	unit	not set for	DoubleSpectrum
	//	standard_unit	not set for	DoubleSpectrum
	//	display_unit	not set for	DoubleSpectrum
	//	format	not set for	DoubleSpectrum
	//	max_value	not set for	DoubleSpectrum
	//	min_value	not set for	DoubleSpectrum
	//	max_alarm	not set for	DoubleSpectrum
	//	min_alarm	not set for	DoubleSpectrum
	//	max_warning	not set for	DoubleSpectrum
	//	min_warning	not set for	DoubleSpectrum
	//	delta_t	not set for	DoubleSpectrum
	//	delta_val	not set for	DoubleSpectrum
	
	//	Not Polled
	doublespectrum->set_disp_level(Tango::OPERATOR);
	//	Not memorized

	//	DoubleSpectrum does not fire change event
	//	DoubleSpectrum does not fire archive event
	//	DoubleSpectrum does not fire data_ready event

	/*----- PROTECTED REGION ID(TangoMultiChannel::att_DoubleSpectrum_dynamic_attribute) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	TangoMultiChannel::att_DoubleSpectrum_dynamic_attribute

	doublespectrum->set_default_properties(doublespectrum_prop);
	DoubleSpectrum_data.insert(make_pair(attname, ptr));
    add_attribute(doublespectrum);
}
//--------------------------------------------------------
/**
 *	remove a DoubleSpectrum dynamic attribute.
 *
 *  parameter attname: attribute name to be removed.
 *  parameter free_it: memory buffer will be freed if true or not specified.
 */
//--------------------------------------------------------
void TangoMultiChannel::remove_DoubleSpectrum_dynamic_attribute(string attname, bool free_it)
{
	remove_attribute(attname, true);
    map<string,Tango::DevDouble*>::iterator ite;
    if ((ite=DoubleSpectrum_data.find(attname))!=DoubleSpectrum_data.end())
    {
		if (free_it)
			delete ite->second;
		DoubleSpectrum_data.erase(ite);
	}
}


//============================================================
//	Tool methods to get pointer on attribute data buffer 
//============================================================
//--------------------------------------------------------
/**
 *	Return a pointer on DoubleSpectrum data.
 *
 *  parameter attname: the specified attribute name.
 */
//--------------------------------------------------------
Tango::DevDouble *TangoMultiChannel::get_DoubleSpectrum_data_ptr(string &name)
{
    map<string,Tango::DevDouble*>::iterator ite;
    if ((ite=DoubleSpectrum_data.find(name))==DoubleSpectrum_data.end())
    {
		TangoSys_OMemStream	tms;
		tms << "Dynamic attribute " << name << " has not been created";
		Tango::Except::throw_exception(
					(const char *)"ATTRIBUTE_NOT_FOUND",
					tms.str().c_str(),
					(const char *)"TangoMultiChannel::get_DoubleSpectrum_data_ptr()");
    }
	return  ite->second;
}


} //	namespace
