/*----- PROTECTED REGION ID(LinacModAux.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        LinacModAux.cpp
//
// description : C++ source for the LinacModAux class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               LinacModAux are implemented in this file.
//
// project :     Linac Modulator Auxiliary
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <tango.h>
#include <LinacModAux.h>
#include <LinacModAuxClass.h>
#ifdef WIN32
#include <timeval.h>
#include <sys/time.h>
#endif

/*----- PROTECTED REGION END -----*/	//	LinacModAux.cpp

/**
 *  LinacModAux class description:
 *    This class will manage the modulator auxiliaries of the Linac.
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  dev_state
//  Status        |  dev_status
//  On            |  on
//  Off           |  off
//  Reset         |  reset
//  Standby       |  standby
//  LowHeating    |  low_heating
//  SoftOff       |  soft_off
//  SoftOn        |  soft_on
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  HeatI           |  Tango::DevDouble	Scalar
//  HeatV           |  Tango::DevDouble	Scalar
//  Temporization   |  Tango::DevShort	Scalar
//  ThyratronHeatV  |  Tango::DevDouble	Scalar
//  Economy         |  Tango::DevBoolean	Scalar
//================================================================

namespace LinacModAux_ns
{
/*----- PROTECTED REGION ID(LinacModAux::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	LinacModAux::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : LinacModAux::LinacModAux()
 *	Description : Constructors for a Tango device
 *                implementing the classLinacModAux
 */
//--------------------------------------------------------
LinacModAux::LinacModAux(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(LinacModAux::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	LinacModAux::constructor_1
}
//--------------------------------------------------------
LinacModAux::LinacModAux(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(LinacModAux::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	LinacModAux::constructor_2
}
//--------------------------------------------------------
LinacModAux::LinacModAux(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(LinacModAux::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	LinacModAux::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : LinacModAux::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void LinacModAux::delete_device()
{
	DEBUG_STREAM << "LinacModAux::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacModAux::delete_device) ENABLED START -----*/
	
	//	Delete device allocated objects
	//	Delete device's allocated object
	delete attr_HeatI_read;
	delete attr_HeatV_read;
	delete attr_Temporization_read;
	delete attr_ThyratronHeatV_read;
	delete attr_Economy_read;
#ifndef SIMU
	delete daresburyds;
	delete OnRelayds;
	delete OffRelayds;
	delete HeaterPSds;
	delete ThyratronHeatVadcds;
#endif

	/*----- PROTECTED REGION END -----*/	//	LinacModAux::delete_device
}

//--------------------------------------------------------
/**
 *	Method      : LinacModAux::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void LinacModAux::init_device()
{
	DEBUG_STREAM << "LinacModAux::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacModAux::init_device_before) ENABLED START -----*/
	
	//	Initialization before get_device_property() call
	

	/*----- PROTECTED REGION END -----*/	//	LinacModAux::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	
	/*----- PROTECTED REGION ID(LinacModAux::init_device) ENABLED START -----*/
	
	//	Initialize device
	pulsewaittime.tv_sec = pulsetime / 1000;
	pulsewaittime.tv_nsec = (pulsetime%1000) * 1000000;
	attr_HeatI_read = new Tango::DevDouble;
	attr_HeatV_read = new Tango::DevDouble;
	attr_Temporization_read = new Tango::DevShort;
	attr_ThyratronHeatV_read = new Tango::DevDouble;
	attr_Economy_read = new Tango::DevBoolean;
	HeaterPSState = Tango::UNKNOWN;
	DaresburyState = Tango::UNKNOWN;
	// Initialise OnDate variable ...
	n_state = Tango::ON;
	struct timeval time_now;
#ifdef WIN32
	gettimeofday(&time_now, NULL);
#else
	struct timezone tzp;
	gettimeofday(&time_now, &tzp);
#endif
	OnDate = time_now.tv_sec;
#ifdef SIMU
	*attr_HeatI_read = 20.75;
	*attr_HeatV_read = 23.27;
	*attr_Temporization_read = 420;
	*attr_ThyratronHeatV_read = 6.15;
	*attr_Economy_read = false;
	set_state(Tango::ON);
	thestate = Tango::ON;
#else
	thestate = Tango::UNKNOWN;
                
	if(heaterPS_device == "NOT YET INITIALISED")
	{
		Tango::Except::throw_exception
		(
		(const char *) "HeaterPS_devicePropertyNotSet",
		(const char *) "HeaterPS_device property must be set",
		(const char *) "LinacModAux::init_device()"

		);
	}
	if(thyratronHeatV_adc == "NOT YET INITIALISED")
	{
		Tango::Except::throw_exception
		(
		(const char *) "thyratronHeatV_adcPropertyNotSet",
		(const char *) "thyratronHeatV_adc property must be set",
		(const char *) "LinacModAux::init_device()"
		);
	}
	if(interlocks_list.size() == 0)
	{
		Tango::Except::throw_exception
		(
		(const char *) "interlocks_listPropertyNotSet",
		(const char *) "interlocks_list property must be set",
		(const char *) "LinacModAux::init_device()"
		);
	}

	daresburyds 	= new Tango::DeviceProxy(daresbury.c_str());
	EcoRelayds	= new Tango::DeviceProxy(economyrelay.c_str());
	OnRelayds	= new Tango::DeviceProxy(onrelay.c_str());
	OffRelayds	= new Tango::DeviceProxy(offrelay.c_str());
	HeaterPSds	= new Tango::DeviceProxy(heaterPS_device.c_str());
	ThyratronHeatVadcds 	= new Tango::DeviceProxy(thyratronHeatV_adc.c_str());
	// set transparency reconnection to true
	try{daresburyds->set_transparency_reconnection(true);}
	catch(Tango::DevFailed &e){ Tango::Except::print_exception(e);}
	try{OnRelayds->set_transparency_reconnection(true);}
	catch(Tango::DevFailed &e){ Tango::Except::print_exception(e);}
	try{OffRelayds->set_transparency_reconnection(true);}
	catch(Tango::DevFailed &e){ Tango::Except::print_exception(e);}
	try{EcoRelayds->set_transparency_reconnection(true);}
	catch(Tango::DevFailed &e){ Tango::Except::print_exception(e);}
	try{HeaterPSds->set_transparency_reconnection(true);}
	catch(Tango::DevFailed &e){ Tango::Except::print_exception(e);}
	try{ThyratronHeatVadcds->set_transparency_reconnection(true);}
	catch(Tango::DevFailed &e){ Tango::Except::print_exception(e);}
	// initialise interlocks variable
	Tango::DevLong module,num;
	double numtmp;
	interlocks.clear();
	module = (Tango::DevLong) stateonnum;
	numtmp = stateonnum *10;
	num = (Tango::DevLong)numtmp % 10;
	module = module - 1;
	num = (num -1) * 2;
	interlocks.push_back(module);
	interlocks.push_back(num);
	module = (Tango::DevLong) stateheatnum;
	numtmp = stateheatnum *10;
	num = (Tango::DevLong)numtmp % 10;
	module = module - 1;
	num = (num -1) * 2;
	interlocks.push_back(module);
	interlocks.push_back(num);	
	for(unsigned int j=0;j<interlocks_list.size();j++)
	{
		module = (Tango::DevLong) interlocks_list[j];
		numtmp =  interlocks_list[j]*10;
		num = (Tango::DevLong)numtmp % 10;
		module = module - 1;
		num = (num -1) * 2;
		interlocks.push_back(module);
		interlocks.push_back(num);
	}
	// get interlocks descriptions
	Tango::DeviceData argin;
	try
	{
		argin << interlocks;
		Tango::DeviceData ans = daresburyds->command_inout("GetInterlockDescription",argin);
		ans >> intlk_desc;
		for(unsigned int i=0;i<intlk_desc.size();i++)
			DEBUG_STREAM << "intlk_desc[" << i << "] = " << intlk_desc[i] << endl;
	}
	catch(Tango::DevFailed &e)
	{
		ERROR_STREAM << "Could not get Interlocks Description. Is the Daresbury server well running?" << endl;
		throw;
	}
#endif

	/*----- PROTECTED REGION END -----*/	//	LinacModAux::init_device
}

//--------------------------------------------------------
/**
 *	Method      : LinacModAux::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void LinacModAux::get_device_property()
{
	/*----- PROTECTED REGION ID(LinacModAux::get_device_property_before) ENABLED START -----*/
	
	//	Initialize property data members
	daresbury	= "ELIN/INTLK/0";
	heat_time	= 900; // 15 minutes
	interlocks_list.clear();
	offrelay		= "ELIN/R-MOD/HEATOFF";
	onrelay		= "ELIN/R-MOD/HEATON";
	pulsetime	= 2000;
	stateheatnum= 4.1;
	stateonnum	= 4.3;
	heaterPS_device	= "NOT YET INITIALISED";
	thyratronHeatV_adc = "NOT YET INITIALISED";

	/*----- PROTECTED REGION END -----*/	//	LinacModAux::get_device_property_before


	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("Daresbury"));
	dev_prop.push_back(Tango::DbDatum("Heat_time"));
	dev_prop.push_back(Tango::DbDatum("Interlocks_list"));
	dev_prop.push_back(Tango::DbDatum("Offrelay"));
	dev_prop.push_back(Tango::DbDatum("Onrelay"));
	dev_prop.push_back(Tango::DbDatum("Pulsetime"));
	dev_prop.push_back(Tango::DbDatum("Stateheatnum"));
	dev_prop.push_back(Tango::DbDatum("Stateonnum"));
	dev_prop.push_back(Tango::DbDatum("ThyratronHeatV_adc"));
	dev_prop.push_back(Tango::DbDatum("HeaterPS_device"));
	dev_prop.push_back(Tango::DbDatum("Economyrelay"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on LinacModAuxClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		LinacModAuxClass	*ds_class =
			(static_cast<LinacModAuxClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize Daresbury from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  daresbury;
		else {
			//	Try to initialize Daresbury from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  daresbury;
		}
		//	And try to extract Daresbury value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  daresbury;

		//	Try to initialize Heat_time from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  heat_time;
		else {
			//	Try to initialize Heat_time from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  heat_time;
		}
		//	And try to extract Heat_time value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  heat_time;

		//	Try to initialize Interlocks_list from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  interlocks_list;
		else {
			//	Try to initialize Interlocks_list from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  interlocks_list;
		}
		//	And try to extract Interlocks_list value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  interlocks_list;

		//	Try to initialize Offrelay from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  offrelay;
		else {
			//	Try to initialize Offrelay from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  offrelay;
		}
		//	And try to extract Offrelay value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  offrelay;

		//	Try to initialize Onrelay from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  onrelay;
		else {
			//	Try to initialize Onrelay from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  onrelay;
		}
		//	And try to extract Onrelay value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  onrelay;

		//	Try to initialize Pulsetime from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  pulsetime;
		else {
			//	Try to initialize Pulsetime from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  pulsetime;
		}
		//	And try to extract Pulsetime value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  pulsetime;

		//	Try to initialize Stateheatnum from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  stateheatnum;
		else {
			//	Try to initialize Stateheatnum from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  stateheatnum;
		}
		//	And try to extract Stateheatnum value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  stateheatnum;

		//	Try to initialize Stateonnum from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  stateonnum;
		else {
			//	Try to initialize Stateonnum from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  stateonnum;
		}
		//	And try to extract Stateonnum value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  stateonnum;

		//	Try to initialize ThyratronHeatV_adc from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  thyratronHeatV_adc;
		else {
			//	Try to initialize ThyratronHeatV_adc from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  thyratronHeatV_adc;
		}
		//	And try to extract ThyratronHeatV_adc value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  thyratronHeatV_adc;

		//	Try to initialize HeaterPS_device from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  heaterPS_device;
		else {
			//	Try to initialize HeaterPS_device from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  heaterPS_device;
		}
		//	And try to extract HeaterPS_device value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  heaterPS_device;

		//	Try to initialize Economyrelay from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  economyrelay;
		else {
			//	Try to initialize Economyrelay from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  economyrelay;
		}
		//	And try to extract Economyrelay value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  economyrelay;

	}

	/*----- PROTECTED REGION ID(LinacModAux::get_device_property_after) ENABLED START -----*/
	
	//	Check device property data members init
	TangoSys_OMemStream o;
	for(unsigned int j=0 ; j<interlocks_list.size() ; j++)
	{
		if(j != (interlocks_list.size()-1))
			o << interlocks_list[j] << ",";
		else
			o << interlocks_list[j];
	}
	
	INFO_STREAM << "Daresbury          = " << daresbury 		<< endl;
	INFO_STREAM << "Heating time       = " << heat_time		<< endl;
	INFO_STREAM << "HeaterPS device    = " << heaterPS_device	<< endl;
	INFO_STREAM << "ThyratronHeatV ADC = " << thyratronHeatV_adc << endl;
	INFO_STREAM << "Interlocks list    = " << o.str()			<< endl;
	INFO_STREAM << "Off Relay          = " << offrelay			<< endl;
	INFO_STREAM << "On  Relay          = " << onrelay			<< endl;
	INFO_STREAM << "Pulsetime          = " << pulsetime		<< endl;
	INFO_STREAM << "StateHeatNum       = " << stateheatnum	<< endl;
	INFO_STREAM << "StateOnNum         = " << stateonnum		<< endl;

	/*----- PROTECTED REGION END -----*/	//	LinacModAux::get_device_property_after
}

//--------------------------------------------------------
/**
 *	Method      : LinacModAux::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void LinacModAux::always_executed_hook()
{
	DEBUG_STREAM << "LinacModAux::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacModAux::always_executed_hook) ENABLED START -----*/
	
	//	code always executed before all requests
	

	/*----- PROTECTED REGION END -----*/	//	LinacModAux::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : LinacModAux::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void LinacModAux::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "LinacModAux::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(LinacModAux::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	//	Add your own code here

	/*----- PROTECTED REGION END -----*/	//	LinacModAux::read_attr_hardware
}
//--------------------------------------------------------
/**
 *	Method      : LinacModAux::write_attr_hardware()
 *	Description : Hardware writing for attributes
 */
//--------------------------------------------------------
void LinacModAux::write_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "LinacModAux::write_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(LinacModAux::write_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	LinacModAux::write_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute HeatI related method
 *	Description: Heating current
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LinacModAux::read_HeatI(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LinacModAux::read_HeatI(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LinacModAux::read_HeatI) ENABLED START -----*/
	#ifndef SIMU
	try
	{
		Tango::DeviceAttribute readattr = HeaterPSds->read_attribute("ACCurrent");
		readattr >> *attr_HeatI_read;
	}
	catch(Tango::DevFailed &e)
	{
		Tango::Except::print_exception(e);
		throw;
	}
#endif
	attr.set_value(attr_HeatI_read);

	/*----- PROTECTED REGION END -----*/	//	LinacModAux::read_HeatI
}
//--------------------------------------------------------
/**
 *	Read attribute HeatV related method
 *	Description: Heating Voltage
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LinacModAux::read_HeatV(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LinacModAux::read_HeatV(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LinacModAux::read_HeatV) ENABLED START -----*/
	#ifndef SIMU
	try
	{
		Tango::DeviceAttribute readattr = HeaterPSds->read_attribute("ACVoltage");
		readattr >> *attr_HeatV_read;
	}
	catch(Tango::DevFailed &e)
	{
		Tango::Except::print_exception(e);
		throw;
	}
#endif
	attr.set_value(attr_HeatV_read);

	/*----- PROTECTED REGION END -----*/	//	LinacModAux::read_HeatV
}
//--------------------------------------------------------
/**
 *	Read attribute Temporization related method
 *	Description: remaining time before the ON state.
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LinacModAux::read_Temporization(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LinacModAux::read_Temporization(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LinacModAux::read_Temporization) ENABLED START -----*/
	evalue_state();
	long remain_time;
	struct	timeval	time_now;
	struct	timezone tzp;
	switch(get_state())
	{
	case Tango::OFF:
		remain_time = heat_time;
		break;
	case Tango::INIT:
		gettimeofday(&time_now, &tzp);
		remain_time =  heat_time - (time_now.tv_sec - OnDate);
		if(remain_time < 420)
		{
			// if economy, then at least 7 minutes
			remain_time = 420;
		}
		break;
	case Tango::MOVING:
		gettimeofday(&time_now, &tzp);
		remain_time =  heat_time - (time_now.tv_sec - OnDate);
		break;
	default:
		remain_time = 0;
	}
	if(remain_time < 0)
		remain_time = 0;
	*attr_Temporization_read = remain_time;
	attr.set_value(attr_Temporization_read);

	/*----- PROTECTED REGION END -----*/	//	LinacModAux::read_Temporization
}
//--------------------------------------------------------
/**
 *	Read attribute ThyratronHeatV related method
 *	Description: Thyratron Heat Voltage.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LinacModAux::read_ThyratronHeatV(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LinacModAux::read_ThyratronHeatV(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LinacModAux::read_ThyratronHeatV) ENABLED START -----*/
	read_adc_val(ThyratronHeatVadcds,attr_ThyratronHeatV_read);
	attr.set_value(attr_ThyratronHeatV_read);

	/*----- PROTECTED REGION END -----*/	//	LinacModAux::read_ThyratronHeatV
}
//--------------------------------------------------------
/**
 *	Read attribute Economy related method
 *	Description: Economy mode.\nTrue = economy relay closed.\nFalse = economy relay open.
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LinacModAux::read_Economy(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LinacModAux::read_Economy(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LinacModAux::read_Economy) ENABLED START -----*/
#ifndef SIMU
	// Economy is a boolean attribute of the device HeaterPS
	Tango::DevVarBooleanArray * attr_val;
	try
	{
		Tango::DeviceAttribute readattr = HeaterPSds->read_attribute("Economy");
		readattr >> attr_val;
		*attr_Economy_read = (*attr_val)[0];
		attr_Economy_write = (*attr_val)[1];
		delete attr_val;
	}
	catch(Tango::DevFailed &e)
	{
		Tango::Except::print_exception(e);
		throw;
	}
	Tango::MultiAttribute	*attr_list;
	attr_list = get_device_attr();
	Tango::WAttribute & attr_economy = attr_list->get_w_attr_by_name ("Economy");
	try
	{
		attr_economy.set_write_value(attr_Economy_write);
	}
	catch(Tango::DevFailed &e)
	{
		Tango::Except::print_exception(e);
	}
#endif
	attr.set_value(attr_Economy_read);

	/*----- PROTECTED REGION END -----*/	//	LinacModAux::read_Economy
}
//--------------------------------------------------------
/**
 *	Write attribute Economy related method
 *	Description: Economy mode.\nTrue = economy relay closed.\nFalse = economy relay open.
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LinacModAux::write_Economy(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LinacModAux::write_Economy(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LinacModAux::write_Economy) ENABLED START -----*/

#ifndef SIMU
// set the state of the economy relay
	try
	{
		if(w_val == false)
			EcoRelayds->command_inout("Open");
		else
			EcoRelayds->command_inout("Close");
	}
	catch(Tango::DevFailed &e)
	{
		Tango::Except::print_exception(e);
		throw;
	}
// set the economy attribute of the Heater PS
	Tango::DeviceAttribute ecoattr("Economy",w_val);
	try
	{
			HeaterPSds->write_attribute(ecoattr);
	}
	catch(Tango::DevFailed &e)
	{
		Tango::Except::print_exception(e);
		throw;
	}
#endif
	*attr_Economy_read = w_val;
        
#ifdef SIMU        
        on();
#endif
        
        

	/*----- PROTECTED REGION END -----*/	//	LinacModAux::write_Economy
}

//--------------------------------------------------------
/**
 *	Method      : LinacModAux::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void LinacModAux::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(LinacModAux::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
	/*----- PROTECTED REGION END -----*/	//	LinacModAux::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command State related method
 *	Description: This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
 *
 *	@returns State Code
 */
//--------------------------------------------------------
Tango::DevState LinacModAux::dev_state()
{
	DEBUG_STREAM << "LinacModAux::State()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacModAux::dev_state) ENABLED START -----*/
	
	Tango::DevState	argout = Tango::UNKNOWN; // replace by your own algorithm
	//	Add your own code
	evalue_state();
	argout = DeviceImpl::dev_state();

	/*----- PROTECTED REGION END -----*/	//	LinacModAux::dev_state
	set_state(argout);    // Give the state to Tango.
	if (argout!=Tango::ALARM)
		DeviceImpl::dev_state();
	return get_state();  // Return it after Tango management.
}
//--------------------------------------------------------
/**
 *	Command Status related method
 *	Description: This command gets the device status (stored in its <i>device_status</i> data member) and returns it to the caller.
 *
 *	@returns Status description
 */
//--------------------------------------------------------
Tango::ConstDevString LinacModAux::dev_status()
{
	DEBUG_STREAM << "LinacModAux::Status()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacModAux::dev_status) ENABLED START -----*/
	
	string	status = "Device is OK";
	//	Add your own code
	dev_state();
#ifndef SIMU
	struct timezone tzp;
	struct timeval time_now;
	long remaining_time;
	TangoSys_OMemStream o;
	switch(thestate)
	{
	case Tango::ALARM:
		thestatus = "";
		if(HeaterPSState == Tango::ALARM)
		{
			thestatus = "ALARM: Heater Power Supply (";
			thestatus += heaterPS_device;
			thestatus += ") is in ALARM state\n";
		}
		else
		{
			thestatus = "ALARM";
		}
		break;
	case Tango::UNKNOWN:
		thestatus = "";
		if(HeaterPSState == Tango::UNKNOWN)
		{
			thestatus += "Heater Power Supply (";
			thestatus += heaterPS_device;
			thestatus += ") state not readable!\n";
		}
		if(DaresburyState == Tango::UNKNOWN)
		{
			thestatus += "Interlocks status not readable (";
			thestatus += daresbury;
			thestatus += ")!\n";
		}
		break;
	case Tango::OFF:
		thestatus = "";
		if(HeaterPSState == Tango::OFF)
		{
			thestatus += "Heater Power Supply (";
			thestatus += heaterPS_device;
			thestatus += ") is OFF\n";
		}
		if((intlk_states[0] != 1) && (intlk_states[1] != 1))
		{
			thestatus += intlk_desc[0];
		}
		break;
	case Tango::ON:
		thestatus = "ON";
		break;
	case Tango::INIT:
		thestatus = "Low Heating mode\n remains at least 7 minutes of heating";
		break;
	case Tango::MOVING:
		gettimeofday(&time_now, &tzp);
		remaining_time = (heat_time - (time_now.tv_sec - OnDate))/60;
		if(remaining_time < 0)
			remaining_time = 0;
		{
			TangoSys_OMemStream o;
			if(remaining_time>0)
				o << "Heating for less than " << remaining_time+1 << " minutes" << ends;
			else
				o << "Heating for less than 1 minute" << ends;
			thestatus = o.str();
		}
		break;
	case Tango::FAULT:
		thestatus = "";
		if(HeaterPSState == Tango::FAULT)
		{
			thestatus += "Heater Power Supply (";
			thestatus += heaterPS_device;
			thestatus += ") is in FAULT state";
		}
		for(unsigned int i=2; i<intlk_states.size() ; i++)
		{
			if(intlk_states[i] == 0)
			{
				thestatus += intlk_desc[i];
				thestatus += "\n";
			}
		}
		break;
	case Tango::DISABLE:
		thestatus = "DISABLE : \n";
		for(unsigned int i=2; i<intlk_states.size() ; i++)
		{
			if(intlk_states[i] == 0)
			{
				thestatus += intlk_desc[i];
				thestatus += "\n";
			}
		}
		break;
	default:
		break;
	}
	set_status(thestatus.c_str());
#endif

	/*----- PROTECTED REGION END -----*/	//	LinacModAux::dev_status
	set_status(status);               // Give the status to Tango.
	return DeviceImpl::dev_status();  // Return it.
}
//--------------------------------------------------------
/**
 *	Command On related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void LinacModAux::on()
{
	DEBUG_STREAM << "LinacModAux::On()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacModAux::on) ENABLED START -----*/
	
	//	Add your own code
	struct timespec waittime;
	struct timespec remtime;

	DEBUG_STREAM << "LinacModAux::on(): entering... !" << endl;

	//	Add your own code to control device here
#ifdef SIMU
        if(*attr_Economy_read){
            set_state(Tango::INIT);
            thestate = Tango::INIT;
        }else{
            set_state(Tango::ON);
            thestate = Tango::ON;
        }
	struct timeval time_now;
	struct timezone tzp;
	gettimeofday(&time_now, &tzp);
	OnDate=time_now.tv_sec;
#else
	Tango::DevFailed error_heaterps;
	bool error_heaterps_on = false;
	try
	{
		OnRelayds->command_inout("close");
	}
	catch(...)
	{
		ERROR_STREAM << "LinacModAux::on():Error activating the pulsed relay (close command)" << onrelay.c_str() <<  endl;
		throw;
	}
	waittime = pulsewaittime;
	while ((nanosleep(&waittime,&remtime) == -1) && (errno == EINTR))
				waittime = remtime;
	try
	{
		OnRelayds->command_inout("open");
	}
	catch(...)
	{
		ERROR_STREAM << "LinacModAux::on():Error activating the pulsed relay (open command)" << onrelay.c_str() <<  endl;
		throw;
	}
	
	// switch ON the heater power supply
	try
	{
		HeaterPSds->command_inout("On");
	}
	catch(Tango::DevFailed &e)
	{
		ERROR_STREAM << "LinacModAux::on():Error while switching ON the Heater Power supply " << heaterPS_device << endl;
		Tango::Except::print_exception(e);
		error_heaterps = e;
		error_heaterps_on = true;
	}
	
	n_state = Tango::ON;
	struct timeval time_now;
	struct timezone tzp;
	gettimeofday(&time_now, &tzp);
	if((lastState == Tango::OFF) || (lastState == Tango::FAULT) || (lastState == Tango::UNKNOWN))
	{
		OnDate=time_now.tv_sec;
	}
	if(error_heaterps_on)
	{
		throw error_heaterps;
	}
#endif

	/*----- PROTECTED REGION END -----*/	//	LinacModAux::on
}
//--------------------------------------------------------
/**
 *	Command Off related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void LinacModAux::off()
{
	DEBUG_STREAM << "LinacModAux::Off()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacModAux::off) ENABLED START -----*/
	
	//	Add your own code
	struct timespec waittime;
	struct timespec remtime;
	
	DEBUG_STREAM << "LinacModAux::off(): entering... !" << endl;

	//	Add your own code to control device here
#ifdef SIMU
	set_state(Tango::OFF);
	thestate = Tango::OFF;
#else
	// switch OFF the heater power supply
	try
	{
		HeaterPSds->command_inout("Off");
	}
	catch(...)
	{
		ERROR_STREAM << "LinacModAux::off():Error while stopping the Heater Power supply " << heaterPS_device << endl;
		throw;
	}
	try
	{
		OffRelayds->command_inout("open");
	}
	catch(...)
	{
		ERROR_STREAM << "LinacModAux::off():Error activating the pulsed relay (open command)" << offrelay.c_str() <<  endl;
		throw;
	}
	waittime = pulsewaittime;
	while ((nanosleep(&waittime,&remtime) == -1) && (errno == EINTR))
				waittime = remtime;
	try
	{
		OffRelayds->command_inout("close");
	}
	catch(...)
	{
		ERROR_STREAM << "LinacModAux::off():Error activating the pulsed relay (close command)" << offrelay.c_str() <<  endl;
		throw;
	}
	n_state = Tango::OFF;
	
#endif

	/*----- PROTECTED REGION END -----*/	//	LinacModAux::off
}
//--------------------------------------------------------
/**
 *	Command Reset related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void LinacModAux::reset()
{
	DEBUG_STREAM << "LinacModAux::Reset()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacModAux::reset) ENABLED START -----*/
	
	//	Add your own code
    #ifdef SIMU
	switch(get_state())
	{
		case Tango::FAULT :
			set_state(Tango::ON);
			thestate = Tango::ON;
			break;
		case Tango::ON :
			set_state(Tango::OFF);
			thestate = Tango::OFF;
			break;
		case Tango::OFF :
			set_state(Tango::INIT);
			thestate = Tango::INIT;
			break;
		case Tango::INIT :
                {
			set_state(Tango::MOVING);
			thestate = Tango::MOVING;

                        char buff[100];
                        time_t now = time(0);
                        strftime (buff, 100, "%Y-%m-%d %H:%M:%S.000", localtime (&now));
                        cout << buff << " : Moving state from reset() call" << endl;			

			break;
                }
		case Tango::MOVING :
			set_state(Tango::FAULT);
			thestate = Tango::FAULT;
			break;
		default :
			set_state(Tango::ON);
			thestate = Tango::ON;
	}
    #else
	bool error_daresbury = false;
	Tango::DevFailed DaresburyExcept;
	// reset the Daresbury
	try
	{
		daresburyds->command_inout("Reset");
	}
	catch(Tango::DevFailed &e)
	{
		DaresburyExcept = e;
		Tango::Except::print_exception(e);
		error_daresbury = true;
		ERROR_STREAM << "Error reseting the Daresbury" << endl;
	}
	// reset the HeaterPS
	try
	{
		HeaterPSds->command_inout("Reset");
	}
	catch(Tango::DevFailed &e)
	{
		Tango::Except::print_exception(e);
		throw;
	}
	if(error_daresbury == true)
	{
		TangoSys_OMemStream o;
		o << "Error while executing Reset Command on " << daresbury << " device" << ends;
		Tango::Except::re_throw_exception(DaresburyExcept,
		(const char *) "DaresburyResetFailed",
		o.str(),
		(const char *) "");
	}
	
	n_state = Tango::OFF;
#endif

	/*----- PROTECTED REGION END -----*/	//	LinacModAux::reset
}
//--------------------------------------------------------
/**
 *	Command Standby related method
 *	Description: Put the auxiliary in Standby State.
 *
 */
//--------------------------------------------------------
void LinacModAux::standby()
{
	DEBUG_STREAM << "LinacModAux::Standby()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacModAux::standby) ENABLED START -----*/
	
	//	Add your own code
	#ifdef SIMU
	*attr_Economy_read = false;
	if(get_state() == Tango::OFF)
	{
		// switch on the modulator auxiliaries
		on();
	}
#else
	// switch to normal mode
	attr_Economy_write = false;
	Tango::DeviceAttribute ecoattr("Economy",attr_Economy_write);
	try
	{
			HeaterPSds->write_attribute(ecoattr);
	}
	catch(Tango::DevFailed &e)
	{
		Tango::Except::print_exception(e);
	}
	// Open the economy relay
	try
	{
		EcoRelayds->command_inout("Open");
	}
	catch(Tango::DevFailed &e)
	{
		Tango::Except::print_exception(e);
	}
	
	evalue_state();
	if(get_state() == Tango::OFF)
	{
		// switch on the modulator auxiliaries
		on();
	}
#endif

	/*----- PROTECTED REGION END -----*/	//	LinacModAux::standby
}
//--------------------------------------------------------
/**
 *	Command LowHeating related method
 *	Description: Put the auxiliary in low heating state.
 *
 */
//--------------------------------------------------------
void LinacModAux::low_heating()
{
	DEBUG_STREAM << "LinacModAux::LowHeating()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacModAux::low_heating) ENABLED START -----*/
	
	//	Add your own code
	#ifdef SIMU
	*attr_Economy_read = true;
	if(get_state() == Tango::OFF)
	{
		// switch on the modulator auxiliaries
		on();
	}
#else	
	// close the economy relay
	try
	{
		EcoRelayds->command_inout("Close");
	}
	catch(Tango::DevFailed &e)
	{
		Tango::Except::print_exception(e);
	}
	// switch to economy mode
	attr_Economy_write = true;
	Tango::DeviceAttribute ecoattr("Economy",attr_Economy_write);
	try
	{
			HeaterPSds->write_attribute(ecoattr);
	}
	catch(Tango::DevFailed &e)
	{
		Tango::Except::print_exception(e);
	}
	evalue_state();
	if(get_state() == Tango::OFF)
	{
		// switch on the modulator auxiliaries
		on();
	}


	/*if(get_state() == Tango::FAULT)
	{
		// the modulators are in fault
		Tango::Except::throw_exception
		(
		(const char *) "ModulatorsInFault",
		(const char *) "The modulator are in fault",
		(const char *) "LinacModAux::low_heating()"
		);
	}*/
#endif

	/*----- PROTECTED REGION END -----*/	//	LinacModAux::low_heating
}
//--------------------------------------------------------
/**
 *	Command SoftOff related method
 *	Description: Specify that we would like to reach Off state.
 *               Do not execute Pulse command on the OffRelay.
 *
 */
//--------------------------------------------------------
void LinacModAux::soft_off()
{
	DEBUG_STREAM << "LinacModAux::SoftOff()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacModAux::soft_off) ENABLED START -----*/
	
	//	Add your own code
    #ifdef SIMU
	set_state(Tango::OFF);
	thestate = Tango::OFF;
    #endif
	n_state = Tango::OFF;

	/*----- PROTECTED REGION END -----*/	//	LinacModAux::soft_off
}
//--------------------------------------------------------
/**
 *	Command SoftOn related method
 *	Description: Specify that we would like to reach On state.
 *               Do not execute Pulse command on the OnRelay.
 *
 */
//--------------------------------------------------------
void LinacModAux::soft_on()
{
	DEBUG_STREAM << "LinacModAux::SoftOn()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacModAux::soft_on) ENABLED START -----*/
	
	//	Add your own code
    #ifdef SIMU
        on();
    #endif
	n_state = Tango::ON;

	/*----- PROTECTED REGION END -----*/	//	LinacModAux::soft_on
}
//--------------------------------------------------------
/**
 *	Method      : LinacModAux::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void LinacModAux::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(LinacModAux::add_dynamic_commands) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic commands if any
	
	/*----- PROTECTED REGION END -----*/	//	LinacModAux::add_dynamic_commands
}

/*----- PROTECTED REGION ID(LinacModAux::namespace_ending) ENABLED START -----*/

//	Additional Methods
//+------------------------------------------------------------------
/**
 *	method:	LinacModAux::read_adc_val
 *
 *	description:	Get a value from ADC device
 *	This command reads the "Value" Attribute on the device adcds given in parameter
 *
 * readval will be set with the read value
 *
 * This method will throw an exception if it occurs
 *
 */
//+------------------------------------------------------------------
void LinacModAux::read_adc_val(Tango::DeviceProxy * adcds, Tango::DevDouble *readval)
{
#ifndef SIMU
	try
	{
		Tango::DeviceAttribute readattr = adcds->read_attribute("Value");
		readattr >> *readval;
	}
	catch(Tango::DevFailed &e)
	{
		Tango::Except::print_exception(e);
		throw;
	}
#endif
}
//+------------------------------------------------------------------
/**
 *	method:	LinacModAux::evalue_state
 * This function will read the interlocks attribute from the Daresbury device server
 * Description:evaluate the state of the device by reading the state of the
 * corresponding  Daresbury relay.
 * the state of the object is directly updated.
 */
//+------------------------------------------------------------------
void LinacModAux::evalue_state()
{
	DEBUG_STREAM << "LinacModAux::evalue_state(): entering... !" << endl;
#ifndef SIMU
	Tango::DeviceData argin;
	try
	{
		argin << interlocks;
		Tango::DeviceData ans = daresburyds->command_inout("GetInterlockState",argin);
		ans >> intlk_states;
		DaresburyState = Tango::ON;
	}
	catch(Tango::DevFailed &e)
	{
		set_state(Tango::UNKNOWN);
		thestate = Tango::UNKNOWN;
		DaresburyState = Tango::UNKNOWN;
		Tango::Except::print_exception(e);
		return;
	}
	// read the state of the HeaterPS 
	try
	{
		Tango::DeviceAttribute AttrHeaterPSState = HeaterPSds->read_attribute("State");
		AttrHeaterPSState >> HeaterPSState;
	}
	catch(Tango::DevFailed &e)
	{
		HeaterPSState = Tango::UNKNOWN;
		Tango::Except::print_exception(e);
	}
	
	for(unsigned int i=2;i<intlk_states.size();i++)
	{
		if(intlk_states[i] == 0)
		{
			if(n_state == Tango::ON)
			{
				set_state(Tango::FAULT);
				thestate = Tango::FAULT;
			}
			else
			{
				if((HeaterPSState == Tango::FAULT) || 
				   (HeaterPSState == Tango::ALARM) || 
				   (HeaterPSState == Tango::UNKNOWN))
				{
					thestate = HeaterPSState;
					set_state(HeaterPSState);
					return;
				}
				else
				{
					set_state(Tango::DISABLE);
					thestate = Tango::DISABLE;
				}
			}
			return;
		}
	}
	
	if((HeaterPSState == Tango::FAULT) || (HeaterPSState == Tango::ALARM) || (HeaterPSState == Tango::UNKNOWN) || (HeaterPSState == Tango::OFF))
	{
		thestate = HeaterPSState;
		set_state(HeaterPSState);
		return;
	}
	
	if(intlk_states[0] == 1)
	{
		set_state(Tango::ON);
		thestate = Tango::ON;
		n_state = Tango::ON;
		lastState = Tango::ON;
		return;
	}
	
	
	
	if(intlk_states[1] == 1)
	{
		n_state = Tango::ON;
		if(lastState == Tango::OFF)
		{
			struct	timeval	time_now;
			struct	timezone tzp;
			gettimeofday(&time_now, &tzp);
			OnDate = time_now.tv_sec;
		}
		if(*attr_Economy_read == true)
		{
			set_state(Tango::INIT);
			thestate = Tango::INIT;
			lastState = Tango::INIT;
		}
		else
		{
			if(lastState == Tango::INIT)
			{
				struct	timeval	time_now;
				struct	timezone tzp;
				gettimeofday(&time_now, &tzp);
				long remain_time = heat_time - (time_now.tv_sec - OnDate);
				if(remain_time < 420)
				{
					// if economy, then at least 7 minutes
					OnDate = time_now.tv_sec - heat_time + 420;
				}
			}
			set_state(Tango::MOVING);
			thestate = Tango::MOVING;
			lastState = Tango::MOVING;

char buff[100];
time_t now = time (0);
strftime (buff, 100, "%Y-%m-%d %H:%M:%S.000", localtime (&now));
cout << buff << " : Moving state from Moving from evalue_state() call" << endl;				

			
		}
		return;
	}
	
	
	set_state(Tango::OFF);
	thestate = Tango::OFF;
	lastState = Tango::OFF;
	
	
	
	return;
#endif
}


/*----- PROTECTED REGION END -----*/	//	LinacModAux::namespace_ending
} //	namespace
