/*----- PROTECTED REGION ID(LinacSequencer.h) ENABLED START -----*/
//=============================================================================
//
// file :        LinacSequencer.h
//
// description : Include file for the LinacSequencer class
//
// project :     Sequencer Server for LINAC
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef LinacSequencer_H
#define LinacSequencer_H

#include <LinacStructure.h>
#include <tango.h>


 
#define NO_MACRO					0
#define MACRO_ON 					1
#define MACRO_OFF 				2
#define MACRO_LOWHEATING 		3
#define MACRO_STANDBY			4
#define MACRO_LOAD_SETTINGS	5
#define MACRO_SAVE_SETTINGS	6
#define MACRO_FORCE_SAVE		7


/*----- PROTECTED REGION END -----*/	//	LinacSequencer.h

/**
 *  LinacSequencer class description:
 *    Sequencer server to execute the necessary sequences to start and stop the LINAC.
 */

namespace LinacSequencer_ns
{
/*----- PROTECTED REGION ID(LinacSequencer::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations

/*----- PROTECTED REGION END -----*/	//	LinacSequencer::Additional Class Declarations

class LinacSequencer : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(LinacSequencer::Data Members) ENABLED START -----*/

//	Add your own data members
public:

	string filename;

	///// shared variables /////
	vector <string>  sequence_history;
	bool 	start;
	bool 	run;
	bool 	quit;
	bool 	error;
	short 	cmd;
	bool 	isFileLoaded;
	bool 	killthread;


/*----- PROTECTED REGION END -----*/	//	LinacSequencer::Data Members

//	Device property data members
public:
	//	Timeout:	Timeout associated with all the DeviceProxies used by the sequencer.
	Tango::DevLong	timeout;
	//	Gun_aux_name:	Device server name for gun_aux_name
	string	gun_aux_name;
	//	Gun_name:	Device server name for gun device
	string	gun_name;
	//	Gun_HV_name:	Device name for the gun_HV
	string	gun_HV_name;
	//	Rf_run_name:	Tango Device name for the rf_run
	string	rf_run_name;
	//	Cooling_name:	Tango Device name for the cooling
	string	cooling_name;
	//	Mod1_aux_name:	Tango Device name for the mod1_aux
	string	mod1_aux_name;
	//	Mod2_aux_name:	Tango Device name for the mod2_aux
	string	mod2_aux_name;
	//	Mod1_HV_name:	Tango Device name for the mod1_HV
	string	mod1_HV_name;
	//	Mod2_HV_name:	Tango Device name for the mod2_HV
	string	mod2_HV_name;
	//	Mod1_name:	Tango Device name for the mod1
	string	mod1_name;
	//	Mod2_name:	Tango Device name for the mod2
	string	mod2_name;
	//	Focus_klystron1_name:	Tango Device name for the focus_klystron1
	string	focus_klystron1_name;
	//	Focus_klystron2_name:	Tango Device name for the focus_klystron2
	string	focus_klystron2_name;
	//	Focus_beam1_name:	Tango Device name for the focus_beam1
	string	focus_beam1_name;
	//	Focus_beam2_name:	Tango Device name for the focus_beam2
	string	focus_beam2_name;
	//	Focus_steer_name:	Tango Device name for the focus_steer_name
	string	focus_steer_name;
	//	Gun_focus_b1b4_tdk_name:	MultiChannelPowerSupply for TDK-Lambda used for controlling
	//  B1, B2, B3 and B4 focusing coil of the gun.
	string	gun_focus_b1b4_tdk_name;
	//	Gun_steerer_tdk_name:	TDKLambda multichannel device name to handle g1 v1 to g3 h3 steerer.
	string	gun_steerer_tdk_name;
	//	Prebuncher_steerer_tdk_name:	This is the pre_buncher device name for the pre buncher steerer.
	string	prebuncher_steerer_tdk_name;
	//	Gun_gunaux_tdk_name:	This is the device name of the multi channel power supply used for
	//  linac gun and gun auxiliaries.
	string	gun_gunaux_tdk_name;

//	Attribute data members
public:
	Tango::DevBoolean	*attr_IsFileLoaded_read;
	Tango::DevString	*attr_SequenceHistory_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	LinacSequencer(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	LinacSequencer(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	LinacSequencer(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~LinacSequencer() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();


//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : LinacSequencer::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute IsFileLoaded related methods
 *	Description: true => Last loadFile command ended successfully.\nfalse => Last loadFile command ended with errors.
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_IsFileLoaded(Tango::Attribute &attr);
	virtual bool is_IsFileLoaded_allowed(Tango::AttReqType type);
/**
 *	Attribute SequenceHistory related methods
 *	Description: Description of what happened during the execution of the \nlast sequence.
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Spectrum max = 500
 */
	virtual void read_SequenceHistory(Tango::Attribute &attr);
	virtual bool is_SequenceHistory_allowed(Tango::AttReqType type);


	//--------------------------------------------------------
	/**
	 *	Method      : LinacSequencer::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:
	/**
	 *	Command State related method
	 *	Description: This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
	 *
	 *	@returns State Code
	 */
	virtual Tango::DevState dev_state();
	/**
	 *	Command Status related method
	 *	Description: This command gets the device status (stored in its <i>device_status</i> data member) and returns it to the caller.
	 *
	 *	@returns Status description
	 */
	virtual Tango::ConstDevString dev_status();
	/**
	 *	Command Abort related method
	 *	Description: Abort the running sequence.
	 *
	 */
	virtual void abort();
	virtual bool is_Abort_allowed(const CORBA::Any &any);
	/**
	 *	Command LoadFile related method
	 *	Description: Load the configuration file given in parameter.
	 *
	 *	@param argin Name of file to load
	 */
	virtual void load_file(Tango::DevString argin);
	virtual bool is_LoadFile_allowed(const CORBA::Any &any);
	/**
	 *	Command SaveFile related method
	 *	Description: The sequence will save all current settings to a file.
	 *
	 *	@param argin Name of the file to be saved
	 */
	virtual void save_file(Tango::DevString argin);
	virtual bool is_SaveFile_allowed(const CORBA::Any &any);
	/**
	 *	Command ForceSave related method
	 *	Description: This command will force the save of all the present settings in a file
	 *               even if there was a problem when getting all the current set points.
	 *               If a set point could not be read, the set point given in the last loaded or saved file will be used.
	 *               The argin is the name of the file.
	 *
	 *	@param argin Name of the file to be saved
	 */
	virtual void force_save(Tango::DevString argin);
	virtual bool is_ForceSave_allowed(const CORBA::Any &any);
	/**
	 *	Command On related method
	 *	Description: Execute the sequence to bring the LINAC to ON state.
	 *
	 */
	virtual void on();
	virtual bool is_On_allowed(const CORBA::Any &any);
	/**
	 *	Command Off related method
	 *	Description: Execute the sequence to bring the LINAC to OFF state.
	 *
	 */
	virtual void off();
	virtual bool is_Off_allowed(const CORBA::Any &any);
	/**
	 *	Command LowHeating related method
	 *	Description: Execute the sequence to bring the LINAC to Low Heating (Tango::INIT) state.
	 *
	 */
	virtual void low_heating();
	virtual bool is_LowHeating_allowed(const CORBA::Any &any);
	/**
	 *	Command Standby related method
	 *	Description: Execute the sequence to bring the LINAC to STANDBY state.
	 *
	 */
	virtual void standby();
	virtual bool is_Standby_allowed(const CORBA::Any &any);
	/**
	 *	Command Reset related method
	 *	Description: 
	 *
	 */
	virtual void reset();
	virtual bool is_Reset_allowed(const CORBA::Any &any);


	//--------------------------------------------------------
	/**
	 *	Method      : LinacSequencer::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(LinacSequencer::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes
//
 	//	state and status methods
 	//
	
 	 void get_sequence_state();


protected :	
	Tango::DevVarStringArray	history;
	omni_mutex						mutex;
	omni_thread						*sequence_thread;

/*----- PROTECTED REGION END -----*/	//	LinacSequencer::Additional Method prototypes
};

/*----- PROTECTED REGION ID(LinacSequencer::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions

/*----- PROTECTED REGION END -----*/	//	LinacSequencer::Additional Classes Definitions

}	//	End of namespace

#endif   //	LinacSequencer_H
