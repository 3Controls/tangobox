/*----- PROTECTED REGION ID(LinacRF.h) ENABLED START -----*/
//=============================================================================
//
// file :        LinacRF.h
//
// description : Include file for the LinacRF class
//
// project :     Linac Radio Frequency
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef LinacRF_H
#define LinacRF_H


#include <tango.h>
#ifndef SIMU
#include <API.h>
#undef DevState
#endif





/*----- PROTECTED REGION END -----*/	//	LinacRF.h

/**
 *  LinacRF class description:
 *    This class will manage the Linac RadioFrequency.
 *    The three structures of the linac (buncher - section 1 - section 2) consist of
 *    coupled wave guide cavities, through which a high frequency electromagnetic wave
 *    passes at the same speed than the electrons.
 *    The electrons are adjusted to the peak of the RF wave,
 *    they are then subjected to the maximum electrical field.
 *    The phase of the section1 is the reference;
 *    phases of the RF in buncher and section 2 are matched to get the electrons
 *    adjusted to the peak of the RF wave.
 */

namespace LinacRF_ns
{
/*----- PROTECTED REGION ID(LinacRF::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations

/*----- PROTECTED REGION END -----*/	//	LinacRF::Additional Class Declarations

class LinacRF : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(LinacRF::Data Members) ENABLED START -----*/

//	Add your own data members
public:



/*----- PROTECTED REGION END -----*/	//	LinacRF::Data Members

//	Device property data members
public:
	//	Bunchphase:	Name of the buncher phase device.
	string	bunchphase;
	//	Daresbury:	Name of the daresbury device.
	string	daresbury;
	//	Delay_name:	Name of the device used to get and set the Delay attribute.
	string	delay_name;
	//	Interlocks_list:	list of interlocks.
	vector<Tango::DevDouble>	interlocks_list;
	//	Mastersource:	Name of the Tango Mastersource device.
	string	mastersource;
	//	Pbunchatt_adc:	Name of the prebuncher attenuation ADC device.
	string	pbunchatt_adc;
	//	Pbunchatt_dac:	Name of the prebuncher attenuation DAC device.
	string	pbunchatt_dac;
	//	Pbunchphase:	Name of the pbuncher phase device.
	string	pbunchphase;
	//	Secphase_dac:	Name of the section 2 phase DAC device.
	string	secphase_dac;
	//	Stateonnum:	number of the interlock relay used to determine whether the RF
	//  is on or not
	Tango::DevDouble	stateonnum;
	//	Statepermnum:	Daresbury relay number which indicates if the device is allowed
	//  to be switched On.
	Tango::DevDouble	statepermnum;
	//	Bunchphase_adc:	Name of the Buncher Phase Adc device.
	//  This property is not used if the phase is controlled by a Paragon.
	//  It is used only with the vpap controller.
	string	bunchphase_adc;
	//	Offrelay:	Name of the relay used to switch off RF.
	string	offrelay;
	//	Onrelay:	Name of the relay used to switch on RF.
	string	onrelay;
	//	Pulsetime:	Duration in milliseconds of the pulse to do on the pulsed relays.
	Tango::DevLong	pulsetime;
	//	Modulator:	Name of the Modulator device used in the reset command.
	//  Reset command will call the Reset command of the modulator.
	string	modulator;
	//	AtPermitDeviceName:	Device where to get the commands/attributes to map the AtPermit
	//  attribute.
	string	atPermitDeviceName;
	//	PhPermitDeviceName:	Device where to get the commands/attributes to map the PhPermit
	//  attribute.
	string	phPermitDeviceName;

//	Attribute data members
public:
	Tango::DevDouble	*attr_Frequency_read;
	Tango::DevDouble	*attr_Delay_read;
	Tango::DevDouble	*attr_PBunchPhase_read;
	Tango::DevDouble	*attr_PBunchAttenu_read;
	Tango::DevDouble	*attr_BunchPhase_read;
	Tango::DevDouble	*attr_Sect2Phase_read;
	Tango::DevBoolean	*attr_AtPermit_read;
	Tango::DevBoolean	*attr_PhPermit_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	LinacRF(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	LinacRF(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	LinacRF(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~LinacRF() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();


//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : LinacRF::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);
	//--------------------------------------------------------
	/*
	 *	Method      : LinacRF::write_attr_hardware()
	 *	Description : Hardware writing for attributes.
	 */
	//--------------------------------------------------------
	virtual void write_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute Frequency related methods
 *	Description: Frequency
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_Frequency(Tango::Attribute &attr);
	virtual void write_Frequency(Tango::WAttribute &attr);
	virtual bool is_Frequency_allowed(Tango::AttReqType type);
/**
 *	Attribute Delay related methods
 *	Description: Delay
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_Delay(Tango::Attribute &attr);
	virtual void write_Delay(Tango::WAttribute &attr);
	virtual bool is_Delay_allowed(Tango::AttReqType type);
/**
 *	Attribute PBunchPhase related methods
 *	Description: PreBuncher Phase
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_PBunchPhase(Tango::Attribute &attr);
	virtual void write_PBunchPhase(Tango::WAttribute &attr);
	virtual bool is_PBunchPhase_allowed(Tango::AttReqType type);
/**
 *	Attribute PBunchAttenu related methods
 *	Description: PreBuncher Attenuation
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_PBunchAttenu(Tango::Attribute &attr);
	virtual void write_PBunchAttenu(Tango::WAttribute &attr);
	virtual bool is_PBunchAttenu_allowed(Tango::AttReqType type);
/**
 *	Attribute BunchPhase related methods
 *	Description: Buncher Phase
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_BunchPhase(Tango::Attribute &attr);
	virtual void write_BunchPhase(Tango::WAttribute &attr);
	virtual bool is_BunchPhase_allowed(Tango::AttReqType type);
/**
 *	Attribute Sect2Phase related methods
 *	Description: Section 2 Phase.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_Sect2Phase(Tango::Attribute &attr);
	virtual void write_Sect2Phase(Tango::WAttribute &attr);
	virtual bool is_Sect2Phase_allowed(Tango::AttReqType type);
/**
 *	Attribute AtPermit related methods
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_AtPermit(Tango::Attribute &attr);
	virtual void write_AtPermit(Tango::WAttribute &attr);
	virtual bool is_AtPermit_allowed(Tango::AttReqType type);
/**
 *	Attribute PhPermit related methods
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_PhPermit(Tango::Attribute &attr);
	virtual void write_PhPermit(Tango::WAttribute &attr);
	virtual bool is_PhPermit_allowed(Tango::AttReqType type);


	//--------------------------------------------------------
	/**
	 *	Method      : LinacRF::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:
	/**
	 *	Command State related method
	 *	Description: This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
	 *
	 *	@returns State Code
	 */
	virtual Tango::DevState dev_state();
	/**
	 *	Command Status related method
	 *	Description: This command gets the device status (stored in its <i>device_status</i> data member) and returns it to the caller.
	 *
	 *	@returns Status description
	 */
	virtual Tango::ConstDevString dev_status();
	/**
	 *	Command On related method
	 *	Description: 
	 *
	 */
	virtual void on();
	virtual bool is_On_allowed(const CORBA::Any &any);
	/**
	 *	Command Off related method
	 *	Description: 
	 *
	 */
	virtual void off();
	virtual bool is_Off_allowed(const CORBA::Any &any);
	/**
	 *	Command Reset related method
	 *	Description: 
	 *
	 */
	virtual void reset();
	virtual bool is_Reset_allowed(const CORBA::Any &any);
	/**
	 *	Command TimingOn related method
	 *	Description: This command will switch on the timing.
	 *               (will issue a DevOn on the shorttiming device).
	 *
	 */
	virtual void timing_on();
	virtual bool is_TimingOn_allowed(const CORBA::Any &any);


	//--------------------------------------------------------
	/**
	 *	Method      : LinacRF::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(LinacRF::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes
protected :	
#ifndef SIMU
	devserver shorttimingds;
#endif
#ifdef VPAPPHASE
	devserver bunchphaseds;
	bool tacoPhase_imported;
	Tango::DeviceProxy * bunchphaseadcds;
#else
	Tango::DeviceProxy * bunchphaseds;
#endif
	Tango::DeviceProxy * mastersourceds;
	Tango::DeviceProxy * daresburyds;
	Tango::DeviceProxy * pbunchphaseds;
	Tango::DeviceProxy * secphasedacds;
	Tango::DeviceProxy * pbunchattdacds;
	Tango::DeviceProxy * pbunchattadcds;
	Tango::DeviceProxy * OnRelayds;
	Tango::DeviceProxy * OffRelayds;
	Tango::DeviceProxy * Modulatords;

	Tango::DeviceProxy * WagoRelayAtPermitDS;
	Tango::DeviceProxy * WagoRelayPhPermitDS;

#ifndef SIMU
	DevShort DelayState;
#endif
	vector<Tango::DevLong> interlocks;
	vector<unsigned char> intlk_states;
	vector<string> intlk_desc;
	string thestatus;
	Tango::DevState n_state;
	Tango::DevState thestate;
	struct timespec pulsewaittime;
	bool tacoDelay_imported;
	void importTacoDevices();
	void freeTacoDevices();
	void evalue_state();

/*----- PROTECTED REGION END -----*/	//	LinacRF::Additional Method prototypes
};

/*----- PROTECTED REGION ID(LinacRF::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions

/*----- PROTECTED REGION END -----*/	//	LinacRF::Additional Classes Definitions

}	//	End of namespace

#endif   //	LinacRF_H
