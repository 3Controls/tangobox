/*----- PROTECTED REGION ID(LinacCooling.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        LinacCooling.cpp
//
// description : C++ source for the LinacCooling class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               LinacCooling are implemented in this file.
//
// project :     Linac cooling
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <tango.h>
#include <LinacCooling.h>
#include <LinacCoolingClass.h>

/*----- PROTECTED REGION END -----*/	//	LinacCooling.cpp

/**
 *  LinacCooling class description:
 *    This class will manage the linac cooling.
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  dev_state
//  Status        |  dev_status
//  Reset         |  reset
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  WaterTemp     |  Tango::DevDouble	Scalar
//  PBuncherTemp  |  Tango::DevDouble	Scalar
//  BuncherTemp   |  Tango::DevDouble	Scalar
//  SectionTemp   |  Tango::DevDouble	Scalar
//================================================================

namespace LinacCooling_ns
{
/*----- PROTECTED REGION ID(LinacCooling::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	LinacCooling::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : LinacCooling::LinacCooling()
 *	Description : Constructors for a Tango device
 *                implementing the classLinacCooling
 */
//--------------------------------------------------------
LinacCooling::LinacCooling(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(LinacCooling::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	LinacCooling::constructor_1
}
//--------------------------------------------------------
LinacCooling::LinacCooling(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(LinacCooling::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	LinacCooling::constructor_2
}
//--------------------------------------------------------
LinacCooling::LinacCooling(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(LinacCooling::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	LinacCooling::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : LinacCooling::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void LinacCooling::delete_device()
{
	DEBUG_STREAM << "LinacCooling::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacCooling::delete_device) ENABLED START -----*/
	
	//	Delete device allocated objects
	//	Delete device's allocated object
	delete attr_WaterTemp_read;
	delete attr_PBuncherTemp_read;
	delete attr_BuncherTemp_read;
	delete attr_SectionTemp_read;
#ifndef SIMU
	delete daresburyds;
	delete WaterTempadcds;
	delete PBuncherTempadcds;
	delete BuncherTempadcds;
	delete SectionTempadcds;
#endif

	/*----- PROTECTED REGION END -----*/	//	LinacCooling::delete_device
}

//--------------------------------------------------------
/**
 *	Method      : LinacCooling::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void LinacCooling::init_device()
{
	DEBUG_STREAM << "LinacCooling::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacCooling::init_device_before) ENABLED START -----*/
	
	//	Initialization before get_device_property() call
	

	/*----- PROTECTED REGION END -----*/	//	LinacCooling::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	
	/*----- PROTECTED REGION ID(LinacCooling::init_device) ENABLED START -----*/
	
	//	Initialize device
	n_state = Tango::ON;
	// initialise interlocks variable
	Tango::DevLong module,num;
	double numtmp;
	interlocks.clear();
	module = ((Tango::DevLong) stateonnum);
	numtmp = stateonnum *10;
	num = (Tango::DevLong)numtmp % 10;
	module = module - 1;
	num = (num -1) * 2;
	interlocks.push_back(module);
	interlocks.push_back(num);
	for(unsigned int j=0;j<interlocks_list.size();j++)
	{
		module = (Tango::DevLong) interlocks_list[j];
		numtmp =  interlocks_list[j]*10;
		num = (Tango::DevLong)numtmp % 10;
		module = module - 1;
		num = (num -1) * 2;
		interlocks.push_back(module);
		interlocks.push_back(num);
	}
	//////////
	attr_WaterTemp_read = new Tango::DevDouble;
	attr_PBuncherTemp_read = new Tango::DevDouble;
	attr_BuncherTemp_read = new Tango::DevDouble;
	attr_SectionTemp_read = new Tango::DevDouble;
#ifdef SIMU
	*attr_WaterTemp_read = 25.1;
	*attr_PBuncherTemp_read = 26.1;
	*attr_BuncherTemp_read = 27.1;
	*attr_SectionTemp_read = 28.1;
	set_state(Tango::ON);
	thestate = Tango::ON;
#else
	thestate = Tango::UNKNOWN;
	daresburyds			= new Tango::DeviceProxy(daresbury.c_str());
	WaterTempadcds		= new Tango::DeviceProxy(waterTemp_adc.c_str());
	PBuncherTempadcds	= new Tango::DeviceProxy(pbuncherTemp_adc.c_str());
	BuncherTempadcds	= new Tango::DeviceProxy(buncherTemp_adc.c_str());
	SectionTempadcds	= new Tango::DeviceProxy(sectionTemp_adc.c_str());
	// set transparency reconnection to true
	try{daresburyds->set_transparency_reconnection(true);}
	catch(Tango::DevFailed &e){ Tango::Except::print_exception(e);}
	try{WaterTempadcds->set_transparency_reconnection(true);}
	catch(Tango::DevFailed &e){ Tango::Except::print_exception(e);}
	try{PBuncherTempadcds->set_transparency_reconnection(true);}
	catch(Tango::DevFailed &e){ Tango::Except::print_exception(e);}
	try{BuncherTempadcds->set_transparency_reconnection(true);}
	catch(Tango::DevFailed &e){ Tango::Except::print_exception(e);}
	try{SectionTempadcds->set_transparency_reconnection(true);}
	catch(Tango::DevFailed &e){ Tango::Except::print_exception(e);}
	
	// get interlocks descriptions
	Tango::DeviceData argin;
	try
	{
		argin << interlocks;
		Tango::DeviceData ans = daresburyds->command_inout("GetInterlockDescription",argin);
		ans >> intlk_desc;
		for(unsigned int i=0;i<intlk_desc.size();i++)
			DEBUG_STREAM << "intlk_desc[" << i << "] = " << intlk_desc[i] << endl;
	}
	catch(Tango::DevFailed &e)
	{
		ERROR_STREAM << "Could not get Interlocks Description. Is the Daresbury server well running?" << endl;
		throw;
	}
#endif

	/*----- PROTECTED REGION END -----*/	//	LinacCooling::init_device
}

//--------------------------------------------------------
/**
 *	Method      : LinacCooling::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void LinacCooling::get_device_property()
{
	/*----- PROTECTED REGION ID(LinacCooling::get_device_property_before) ENABLED START -----*/
	
	//	Initialize property data members
	buncherTemp_adc 	= "ELIN/COOL/BUN-TEMP-ADC";
	daresbury	 		= "ELIN/INTLK/0";
	interlocks_list.clear();
	interlocks_list.push_back(21.1);
	interlocks_list.push_back(21.2);
	pbuncherTemp_adc 	= "ELIN/COOL/PBUN-TEMP-ADC";
	pulsetime 			= 2000;
	sectionTemp_adc 	= "ELIN/COOL/SEC-TEMP-ADC";
	stateonnum 			= 21.1;
	waterTemp_adc 		= "ELIN/COOL/TEMP-ADC";

	/*----- PROTECTED REGION END -----*/	//	LinacCooling::get_device_property_before


	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("BuncherTemp_adc"));
	dev_prop.push_back(Tango::DbDatum("Daresbury"));
	dev_prop.push_back(Tango::DbDatum("Interlocks_list"));
	dev_prop.push_back(Tango::DbDatum("PbuncherTemp_adc"));
	dev_prop.push_back(Tango::DbDatum("Pulsetime"));
	dev_prop.push_back(Tango::DbDatum("SectionTemp_adc"));
	dev_prop.push_back(Tango::DbDatum("Stateonnum"));
	dev_prop.push_back(Tango::DbDatum("WaterTemp_adc"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on LinacCoolingClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		LinacCoolingClass	*ds_class =
			(static_cast<LinacCoolingClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize BuncherTemp_adc from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  buncherTemp_adc;
		else {
			//	Try to initialize BuncherTemp_adc from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  buncherTemp_adc;
		}
		//	And try to extract BuncherTemp_adc value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  buncherTemp_adc;

		//	Try to initialize Daresbury from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  daresbury;
		else {
			//	Try to initialize Daresbury from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  daresbury;
		}
		//	And try to extract Daresbury value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  daresbury;

		//	Try to initialize Interlocks_list from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  interlocks_list;
		else {
			//	Try to initialize Interlocks_list from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  interlocks_list;
		}
		//	And try to extract Interlocks_list value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  interlocks_list;

		//	Try to initialize PbuncherTemp_adc from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  pbuncherTemp_adc;
		else {
			//	Try to initialize PbuncherTemp_adc from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  pbuncherTemp_adc;
		}
		//	And try to extract PbuncherTemp_adc value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  pbuncherTemp_adc;

		//	Try to initialize Pulsetime from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  pulsetime;
		else {
			//	Try to initialize Pulsetime from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  pulsetime;
		}
		//	And try to extract Pulsetime value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  pulsetime;

		//	Try to initialize SectionTemp_adc from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  sectionTemp_adc;
		else {
			//	Try to initialize SectionTemp_adc from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  sectionTemp_adc;
		}
		//	And try to extract SectionTemp_adc value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  sectionTemp_adc;

		//	Try to initialize Stateonnum from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  stateonnum;
		else {
			//	Try to initialize Stateonnum from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  stateonnum;
		}
		//	And try to extract Stateonnum value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  stateonnum;

		//	Try to initialize WaterTemp_adc from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  waterTemp_adc;
		else {
			//	Try to initialize WaterTemp_adc from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  waterTemp_adc;
		}
		//	And try to extract WaterTemp_adc value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  waterTemp_adc;

	}

	/*----- PROTECTED REGION ID(LinacCooling::get_device_property_after) ENABLED START -----*/
	
	//	Check device property data members init
	TangoSys_OMemStream o;
	for(unsigned int j=0 ; j<interlocks_list.size() ; j++)
	{
		if(j != (interlocks_list.size()-1))
			o << interlocks_list[j] << ",";
		else
			o << interlocks_list[j];
	}
	INFO_STREAM << "pulsetime        = " << pulsetime 			<< endl;
	INFO_STREAM << "daresbury        = " << daresbury 			<< endl;
	INFO_STREAM << "WaterTemp ADC    = " << waterTemp_adc		<< endl;
	INFO_STREAM << "PBuncherTemp ADC = " << pbuncherTemp_adc	<< endl;
	INFO_STREAM << "BuncherTemp ADC  = " << buncherTemp_adc	<< endl;
	INFO_STREAM << "SectionTemp ADC  = " << sectionTemp_adc	<< endl;
	INFO_STREAM << "Interlocks list  = " << o.str()				<< endl;
	INFO_STREAM << "Stateonnum       = " << stateonnum			<< endl;

	/*----- PROTECTED REGION END -----*/	//	LinacCooling::get_device_property_after
}

//--------------------------------------------------------
/**
 *	Method      : LinacCooling::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void LinacCooling::always_executed_hook()
{
	DEBUG_STREAM << "LinacCooling::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacCooling::always_executed_hook) ENABLED START -----*/
	
	//	code always executed before all requests
	

	/*----- PROTECTED REGION END -----*/	//	LinacCooling::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : LinacCooling::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void LinacCooling::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "LinacCooling::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(LinacCooling::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	//	Add your own code here

	/*----- PROTECTED REGION END -----*/	//	LinacCooling::read_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute WaterTemp related method
 *	Description: Water Temperature
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LinacCooling::read_WaterTemp(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LinacCooling::read_WaterTemp(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LinacCooling::read_WaterTemp) ENABLED START -----*/
	#ifndef SIMU
	try
	{
		Tango::DeviceAttribute WaterTempAttr = WaterTempadcds->read_attribute("Value");
		WaterTempAttr >> *attr_WaterTemp_read;
	}
	catch(Tango::DevFailed &e)
	{
		Tango::Except::print_exception(e);
		throw;
	}
#endif	
	attr.set_value(attr_WaterTemp_read);

	/*----- PROTECTED REGION END -----*/	//	LinacCooling::read_WaterTemp
}
//--------------------------------------------------------
/**
 *	Read attribute PBuncherTemp related method
 *	Description: PreBuncher Temperature
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LinacCooling::read_PBuncherTemp(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LinacCooling::read_PBuncherTemp(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LinacCooling::read_PBuncherTemp) ENABLED START -----*/
	#ifndef SIMU
	try
	{
		Tango::DeviceAttribute PBuncherTempAttr = PBuncherTempadcds->read_attribute("Value");
		PBuncherTempAttr >> *attr_PBuncherTemp_read;
	}
	catch(Tango::DevFailed &e)
	{
		Tango::Except::print_exception(e);
		throw;
	}
#endif
	attr.set_value(attr_PBuncherTemp_read);

	/*----- PROTECTED REGION END -----*/	//	LinacCooling::read_PBuncherTemp
}
//--------------------------------------------------------
/**
 *	Read attribute BuncherTemp related method
 *	Description: Buncher Temperature
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LinacCooling::read_BuncherTemp(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LinacCooling::read_BuncherTemp(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LinacCooling::read_BuncherTemp) ENABLED START -----*/
	#ifndef SIMU
	try
	{
		Tango::DeviceAttribute BuncherTempAttr = BuncherTempadcds->read_attribute("Value");
		BuncherTempAttr >> *attr_BuncherTemp_read;
	}
	catch(Tango::DevFailed &e)
	{
		Tango::Except::print_exception(e);
		throw;
	}
#endif
	attr.set_value(attr_BuncherTemp_read);

	/*----- PROTECTED REGION END -----*/	//	LinacCooling::read_BuncherTemp
}
//--------------------------------------------------------
/**
 *	Read attribute SectionTemp related method
 *	Description: Section Temperature
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LinacCooling::read_SectionTemp(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LinacCooling::read_SectionTemp(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LinacCooling::read_SectionTemp) ENABLED START -----*/
	#ifndef SIMU
	try
	{
		Tango::DeviceAttribute SectionTempAttr = SectionTempadcds->read_attribute("Value");
		SectionTempAttr >> *attr_SectionTemp_read;
	}
	catch(Tango::DevFailed &e)
	{
		Tango::Except::print_exception(e);
		throw;
	}
#endif
	attr.set_value(attr_SectionTemp_read);

	/*----- PROTECTED REGION END -----*/	//	LinacCooling::read_SectionTemp
}

//--------------------------------------------------------
/**
 *	Method      : LinacCooling::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void LinacCooling::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(LinacCooling::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
	/*----- PROTECTED REGION END -----*/	//	LinacCooling::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command State related method
 *	Description: This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
 *
 *	@returns State Code
 */
//--------------------------------------------------------
Tango::DevState LinacCooling::dev_state()
{
	DEBUG_STREAM << "LinacCooling::State()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacCooling::dev_state) ENABLED START -----*/
	
	Tango::DevState	argout = Tango::UNKNOWN; // replace by your own algorithm
	//	Add your own code
	evalue_state();
	argout = DeviceImpl::dev_state();

	/*----- PROTECTED REGION END -----*/	//	LinacCooling::dev_state
	set_state(argout);    // Give the state to Tango.
	if (argout!=Tango::ALARM)
		DeviceImpl::dev_state();
	return get_state();  // Return it after Tango management.
}
//--------------------------------------------------------
/**
 *	Command Status related method
 *	Description: This command gets the device status (stored in its <i>device_status</i> data member) and returns it to the caller.
 *
 *	@returns Status description
 */
//--------------------------------------------------------
Tango::ConstDevString LinacCooling::dev_status()
{
	DEBUG_STREAM << "LinacCooling::Status()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacCooling::dev_status) ENABLED START -----*/
	
	string	status = "Device is OK";
	//	Add your own code
	#ifndef SIMU
	dev_state();
	switch (thestate)
	{
	case Tango::UNKNOWN:
		thestatus = "Interlock status not readable !";
	case Tango::OFF:
		thestatus = intlk_desc[0];
		break;
	case Tango::ON:
		thestatus = "ON";
		break;
	case Tango::FAULT:
		thestatus = "";
		for(unsigned int i=1; i<intlk_states.size() ; i++)
		{
			cout << "i = " << i << endl;
			if(intlk_states[i] == 0)
			{
				thestatus += intlk_desc[i];
				thestatus += "\n";
			}
		}
		break;
	default:
		break;
	}
	set_status(thestatus.c_str());
#endif

	/*----- PROTECTED REGION END -----*/	//	LinacCooling::dev_status
	set_status(status);               // Give the status to Tango.
	return DeviceImpl::dev_status();  // Return it.
}
//--------------------------------------------------------
/**
 *	Command Reset related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void LinacCooling::reset()
{
	DEBUG_STREAM << "LinacCooling::Reset()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacCooling::reset) ENABLED START -----*/
	
	//	Add your own code
	#ifdef SIMU
	if(get_state() == Tango::FAULT)
	{
		set_state(Tango::ON);
		thestate = Tango::ON;
	}
	else
	{
		set_state(Tango::FAULT);
		thestate = Tango::FAULT;
	}
#else
// reset the Daresbury
	try
	{
		daresburyds->command_inout("Reset");
	}
	catch(Tango::DevFailed &e)
	{
		Tango::Except::print_exception(e);
		throw;
	}
	n_state = Tango::OFF;
#endif

	/*----- PROTECTED REGION END -----*/	//	LinacCooling::reset
}
//--------------------------------------------------------
/**
 *	Method      : LinacCooling::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void LinacCooling::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(LinacCooling::add_dynamic_commands) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic commands if any
	
	/*----- PROTECTED REGION END -----*/	//	LinacCooling::add_dynamic_commands
}

/*----- PROTECTED REGION ID(LinacCooling::namespace_ending) ENABLED START -----*/

//	Additional Methods
//+------------------------------------------------------------------
/**
 *	method:	LinacCooling::evalue_state
 *
 *	description:	evaluate the state of the device by reading the state of the
 * 	corresponding  Daresbury relay
 *
 * @return	NONE
 *
 */
//+------------------------------------------------------------------
void LinacCooling::evalue_state()
{
#ifndef SIMU
	Tango::DeviceData argin;
	try
	{
		argin << interlocks;
		Tango::DeviceData ans = daresburyds->command_inout("GetInterlockState",argin);
		ans >> intlk_states;
	}
	catch(Tango::DevFailed &e)
	{
		set_state(Tango::UNKNOWN);
		thestate = Tango::UNKNOWN;
		Tango::Except::print_exception(e);
		return;
	}
	for(unsigned int i=0;i<intlk_states.size();i++)
		DEBUG_STREAM << "intlk_states[" << i << "] = " << intlk_states[i] << endl;

	if(intlk_states[0] == 1)
	{
		set_state(Tango::ON);
		thestate = Tango::ON;
		n_state = Tango::ON;
		return;
	}

	if(n_state == Tango::OFF)
	{
		set_state(Tango::OFF);
		thestate = Tango::OFF;
		return;
	}
	
	for(unsigned int i=1;i<intlk_states.size();i++)
	{
		if(intlk_states[i] == 0)
		{
			set_state(Tango::FAULT);
			thestate = Tango::FAULT;
			return;
		}
	}
	set_state(Tango::OFF);	
	thestate = Tango::OFF;
	return;

#endif

}


/*----- PROTECTED REGION END -----*/	//	LinacCooling::namespace_ending
} //	namespace
