/*----- PROTECTED REGION ID(LinacGunAux.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        LinacGunAux.cpp
//
// description : C++ source for the LinacGunAux class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               LinacGunAux are implemented in this file.
//
// project :     Linac Gun Auxiliary
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <tango.h>
#include <LinacGunAux.h>
#include <LinacGunAuxClass.h>
#ifdef _WIN32
#include <timeval.h>
#include <sys/time.h>
#endif

/*----- PROTECTED REGION END -----*/	//	LinacGunAux.cpp

/**
 *  LinacGunAux class description:
 *    This class will manage the gun auxiliary of the Linac.
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  dev_state
//  Status        |  dev_status
//  On            |  on
//  Off           |  off
//  Reset         |  reset
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  HeatI          |  Tango::DevDouble	Scalar
//  HeatV          |  Tango::DevDouble	Scalar
//  Temporization  |  Tango::DevShort	Scalar
//================================================================

namespace LinacGunAux_ns
{
/*----- PROTECTED REGION ID(LinacGunAux::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	LinacGunAux::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : LinacGunAux::LinacGunAux()
 *	Description : Constructors for a Tango device
 *                implementing the classLinacGunAux
 */
//--------------------------------------------------------
LinacGunAux::LinacGunAux(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(LinacGunAux::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	LinacGunAux::constructor_1
}
//--------------------------------------------------------
LinacGunAux::LinacGunAux(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(LinacGunAux::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	LinacGunAux::constructor_2
}
//--------------------------------------------------------
LinacGunAux::LinacGunAux(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(LinacGunAux::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	LinacGunAux::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : LinacGunAux::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void LinacGunAux::delete_device()
{
	DEBUG_STREAM << "LinacGunAux::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacGunAux::delete_device) ENABLED START -----*/
	
	//	Delete device allocated objects
	//	Delete device's allocated object
	delete attr_HeatI_read;
	delete attr_HeatV_read;
	delete attr_Temporization_read;
#ifndef SIMU
	delete daresburyds;
	delete OnRelayds;
	delete OffRelayds;
	delete TDKLambdaZup;
#endif

	/*----- PROTECTED REGION END -----*/	//	LinacGunAux::delete_device
}

//--------------------------------------------------------
/**
 *	Method      : LinacGunAux::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void LinacGunAux::init_device()
{
	DEBUG_STREAM << "LinacGunAux::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacGunAux::init_device_before) ENABLED START -----*/
	
	//	Initialization before get_device_property() call
	

	/*----- PROTECTED REGION END -----*/	//	LinacGunAux::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	
	/*----- PROTECTED REGION ID(LinacGunAux::init_device) ENABLED START -----*/
	
	//	Initialize device
	pulsewaittime.tv_sec = pulsetime / 1000;
	pulsewaittime.tv_nsec = (pulsetime%1000) * 1000000;
	n_state = Tango::ON;
	// Initialise OnDate variable ...
	struct timeval time_now;
#ifdef WIN32
	gettimeofday(&time_now, NULL);
#else
	struct timezone tzp;
	gettimeofday(&time_now, &tzp);
#endif

	OnDate = time_now.tv_sec;
	attr_HeatI_read = new Tango::DevDouble;
	attr_HeatV_read = new Tango::DevDouble;
	attr_Temporization_read = new Tango::DevShort;
#ifdef SIMU
	*attr_HeatI_read = 6.00;
	*attr_HeatV_read = 5.92;
	*attr_Temporization_read = 420;
	set_state(Tango::ON);
	thestate = Tango::ON;
#else
	thestate = Tango::UNKNOWN;
	daresburyds 	= new Tango::DeviceProxy(daresbury.c_str());
	OnRelayds		= new Tango::DeviceProxy(onrelay.c_str());
	OffRelayds		= new Tango::DeviceProxy(offrelay.c_str());
	TDKLambdaZup	= new Tango::DeviceProxy(powerSupplyDeviceName.c_str());

	// set transparency reconnection to true
	try{daresburyds->set_transparency_reconnection(true);}
	catch(Tango::DevFailed &e){ Tango::Except::print_exception(e);}
	try{OnRelayds->set_transparency_reconnection(true);}
	catch(Tango::DevFailed &e){ Tango::Except::print_exception(e);}
	try{OffRelayds->set_transparency_reconnection(true);}
	catch(Tango::DevFailed &e){ Tango::Except::print_exception(e);}
	try{TDKLambdaZup->set_transparency_reconnection(true);}
	catch(Tango::DevFailed &e){ Tango::Except::print_exception(e);}

	// initialise interlocks variable
	Tango::DevLong module,num;
	double numtmp;
	interlocks.clear();
	module = (Tango::DevLong) stateonnum;
	numtmp = stateonnum *10;
	num = (Tango::DevLong)numtmp % 10;
	module = module - 1;
	num = (num -1) * 2;
	interlocks.push_back(module);
	interlocks.push_back(num);
	module = (Tango::DevLong) stateheatnum;
	numtmp = stateheatnum *10;
	num = (Tango::DevLong)numtmp % 10;
	module = module - 1;
	num = (num -1) * 2;
	interlocks.push_back(module);
	interlocks.push_back(num);	
	for(unsigned int j=0;j<interlocks_list.size();j++)
	{
		module = (Tango::DevLong) interlocks_list[j];
		numtmp =  interlocks_list[j]*10;
		num = (Tango::DevLong)numtmp % 10;
		module = module - 1;
		num = (num -1) * 2;
		interlocks.push_back(module);
		interlocks.push_back(num);
	}
	// get interlocks descriptions
	Tango::DeviceData argin;
	try
	{
		argin << interlocks;
		Tango::DeviceData ans = daresburyds->command_inout("GetInterlockDescription",argin);
		ans >> intlk_desc;
		for(unsigned int i=0;i<intlk_desc.size();i++)
			DEBUG_STREAM << "intlk_desc[" << i << "] = " << intlk_desc[i] << endl;
	}
	catch(Tango::DevFailed &e)
	{
		ERROR_STREAM << "Could not get Interlocks Description. Is the Daresbury server well running?" << endl;
		throw;
	}
	
#endif

	/*----- PROTECTED REGION END -----*/	//	LinacGunAux::init_device
}

//--------------------------------------------------------
/**
 *	Method      : LinacGunAux::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void LinacGunAux::get_device_property()
{
	/*----- PROTECTED REGION ID(LinacGunAux::get_device_property_before) ENABLED START -----*/
	
	//	Initialize property data members
	daresbury	= "ELIN/INTLK/0";
	heat_time	= 900; // 15 minutes
	interlocks_list.clear();
	interlocks_list.push_back(16.1);
	interlocks_list.push_back(16.2);
	interlocks_list.push_back(16.3);
	interlocks_list.push_back(16.4);
	interlocks_list.push_back(17.1);
	interlocks_list.push_back(17.2);
	offrelay		= "ELIN/R-GUN/HEATOFF";
	onrelay		= "ELIN/R-GUN/HEATON";
	pulsetime	= 2000;
	stateheatnum= 18.1;
	stateonnum	= 18.3;
	powerSupplyDeviceName	= "UNINITIALISED !!!";

	/*----- PROTECTED REGION END -----*/	//	LinacGunAux::get_device_property_before


	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("Daresbury"));
	dev_prop.push_back(Tango::DbDatum("Heat_time"));
	dev_prop.push_back(Tango::DbDatum("HeatI_adc"));
	dev_prop.push_back(Tango::DbDatum("HeatV_adc"));
	dev_prop.push_back(Tango::DbDatum("HeatV_dac"));
	dev_prop.push_back(Tango::DbDatum("Interlocks_list"));
	dev_prop.push_back(Tango::DbDatum("Offrelay"));
	dev_prop.push_back(Tango::DbDatum("Onrelay"));
	dev_prop.push_back(Tango::DbDatum("Pulsetime"));
	dev_prop.push_back(Tango::DbDatum("Stateheatnum"));
	dev_prop.push_back(Tango::DbDatum("Stateonnum"));
	dev_prop.push_back(Tango::DbDatum("PowerSupplyDeviceName"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on LinacGunAuxClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		LinacGunAuxClass	*ds_class =
			(static_cast<LinacGunAuxClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize Daresbury from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  daresbury;
		else {
			//	Try to initialize Daresbury from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  daresbury;
		}
		//	And try to extract Daresbury value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  daresbury;

		//	Try to initialize Heat_time from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  heat_time;
		else {
			//	Try to initialize Heat_time from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  heat_time;
		}
		//	And try to extract Heat_time value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  heat_time;

		//	Try to initialize HeatI_adc from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  heatI_adc;
		else {
			//	Try to initialize HeatI_adc from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  heatI_adc;
		}
		//	And try to extract HeatI_adc value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  heatI_adc;

		//	Try to initialize HeatV_adc from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  heatV_adc;
		else {
			//	Try to initialize HeatV_adc from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  heatV_adc;
		}
		//	And try to extract HeatV_adc value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  heatV_adc;

		//	Try to initialize HeatV_dac from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  heatV_dac;
		else {
			//	Try to initialize HeatV_dac from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  heatV_dac;
		}
		//	And try to extract HeatV_dac value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  heatV_dac;

		//	Try to initialize Interlocks_list from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  interlocks_list;
		else {
			//	Try to initialize Interlocks_list from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  interlocks_list;
		}
		//	And try to extract Interlocks_list value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  interlocks_list;

		//	Try to initialize Offrelay from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  offrelay;
		else {
			//	Try to initialize Offrelay from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  offrelay;
		}
		//	And try to extract Offrelay value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  offrelay;

		//	Try to initialize Onrelay from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  onrelay;
		else {
			//	Try to initialize Onrelay from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  onrelay;
		}
		//	And try to extract Onrelay value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  onrelay;

		//	Try to initialize Pulsetime from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  pulsetime;
		else {
			//	Try to initialize Pulsetime from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  pulsetime;
		}
		//	And try to extract Pulsetime value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  pulsetime;

		//	Try to initialize Stateheatnum from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  stateheatnum;
		else {
			//	Try to initialize Stateheatnum from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  stateheatnum;
		}
		//	And try to extract Stateheatnum value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  stateheatnum;

		//	Try to initialize Stateonnum from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  stateonnum;
		else {
			//	Try to initialize Stateonnum from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  stateonnum;
		}
		//	And try to extract Stateonnum value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  stateonnum;

		//	Try to initialize PowerSupplyDeviceName from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  powerSupplyDeviceName;
		else {
			//	Try to initialize PowerSupplyDeviceName from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  powerSupplyDeviceName;
		}
		//	And try to extract PowerSupplyDeviceName value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  powerSupplyDeviceName;

	}

	/*----- PROTECTED REGION ID(LinacGunAux::get_device_property_after) ENABLED START -----*/
	
	//	Check device property data members init
	TangoSys_OMemStream o;
	for(unsigned int j=0 ; j<interlocks_list.size() ; j++)
	{
		if(j != (interlocks_list.size()-1))
			o << interlocks_list[j] << ",";
		else
			o << interlocks_list[j];
	}
	
	INFO_STREAM << "Daresbury       		= " << daresbury 		<< endl;
	INFO_STREAM << "Heating time    		= " << heat_time		<< endl;
	INFO_STREAM << "Interlocks list 		= " << o.str()			<< endl;
	INFO_STREAM << "Off Relay       		= " << offrelay			<< endl;
	INFO_STREAM << "On  Relay       		= " << onrelay			<< endl;
	INFO_STREAM << "Pulsetime       		= " << pulsetime		<< endl;
	INFO_STREAM << "StateHeatNum    		= " << stateheatnum	<< endl;
	INFO_STREAM << "StateOnNum      		= " << stateonnum		<< endl;
	INFO_STREAM << "PowerSupplyDeviceName	= " << powerSupplyDeviceName		<< endl;

	/*----- PROTECTED REGION END -----*/	//	LinacGunAux::get_device_property_after
}

//--------------------------------------------------------
/**
 *	Method      : LinacGunAux::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void LinacGunAux::always_executed_hook()
{
	DEBUG_STREAM << "LinacGunAux::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacGunAux::always_executed_hook) ENABLED START -----*/
	
	//	code always executed before all requests
	

	/*----- PROTECTED REGION END -----*/	//	LinacGunAux::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : LinacGunAux::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void LinacGunAux::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "LinacGunAux::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(LinacGunAux::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	//	Add your own code here

	/*----- PROTECTED REGION END -----*/	//	LinacGunAux::read_attr_hardware
}
//--------------------------------------------------------
/**
 *	Method      : LinacGunAux::write_attr_hardware()
 *	Description : Hardware writing for attributes
 */
//--------------------------------------------------------
void LinacGunAux::write_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "LinacGunAux::write_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(LinacGunAux::write_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	LinacGunAux::write_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute HeatI related method
 *	Description: Heating current
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LinacGunAux::read_HeatI(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LinacGunAux::read_HeatI(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LinacGunAux::read_HeatI) ENABLED START -----*/
#ifndef SIMU
//	read_adc_val(HeatIadcds,attr_HeatI_read);


	Tango::DeviceAttribute heatI;
	heatI = TDKLambdaZup->read_attribute("Current");
	heatI >> *attr_HeatI_read;
#endif
	attr.set_value(attr_HeatI_read);

	/*----- PROTECTED REGION END -----*/	//	LinacGunAux::read_HeatI
}
//--------------------------------------------------------
/**
 *	Read attribute HeatV related method
 *	Description: Heating Voltage
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LinacGunAux::read_HeatV(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LinacGunAux::read_HeatV(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LinacGunAux::read_HeatV) ENABLED START -----*/
#ifndef SIMU
	//read_adc_val(HeatVadcds,attr_HeatV_read);

	Tango::DeviceAttribute heatV;
	heatV = TDKLambdaZup->read_attribute("Voltage");
	heatV >> *attr_HeatV_read;
#endif
	attr.set_value(attr_HeatV_read);

#ifndef SIMU
	//update_setval(HeatVdacds,"HeatV",&attr_HeatV_write);
#endif

	/*----- PROTECTED REGION END -----*/	//	LinacGunAux::read_HeatV
}
//--------------------------------------------------------
/**
 *	Write attribute HeatV related method
 *	Description: Heating Voltage
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LinacGunAux::write_HeatV(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LinacGunAux::write_HeatV(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LinacGunAux::write_HeatV) ENABLED START -----*/
#ifdef SIMU
	*attr_HeatV_read = w_val;
#else
//	write_dac_val(HeatVdacds,w_val);
	Tango::DeviceAttribute heatV("Voltage", w_val);
	TDKLambdaZup->write_attribute(heatV);
#endif

	/*----- PROTECTED REGION END -----*/	//	LinacGunAux::write_HeatV
}
//--------------------------------------------------------
/**
 *	Read attribute Temporization related method
 *	Description: remaining time before the ON state.
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LinacGunAux::read_Temporization(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LinacGunAux::read_Temporization(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LinacGunAux::read_Temporization) ENABLED START -----*/
	evalue_state();
#ifndef WIN32
	struct timezone tzp;
#endif
	struct timeval time_now;
	switch(get_state())
	{
	case Tango::FAULT:
	case Tango::OFF:
		*attr_Temporization_read = heat_time;
		break;
	case Tango::MOVING:
#ifdef WIN32
		gettimeofday(&time_now, NULL);
#else
		gettimeofday(&time_now, &tzp);
#endif
		*attr_Temporization_read = heat_time - (time_now.tv_sec - OnDate);
		break;
	default: *attr_Temporization_read = 0;
	}
	if(*attr_Temporization_read < 0)
		*attr_Temporization_read = 0;
	attr.set_value(attr_Temporization_read);

	/*----- PROTECTED REGION END -----*/	//	LinacGunAux::read_Temporization
}

//--------------------------------------------------------
/**
 *	Method      : LinacGunAux::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void LinacGunAux::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(LinacGunAux::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
	/*----- PROTECTED REGION END -----*/	//	LinacGunAux::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command State related method
 *	Description: This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
 *
 *	@returns State Code
 */
//--------------------------------------------------------
Tango::DevState LinacGunAux::dev_state()
{
	DEBUG_STREAM << "LinacGunAux::State()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacGunAux::dev_state) ENABLED START -----*/
	
	Tango::DevState	argout = Tango::UNKNOWN; // replace by your own algorithm
	//	Add your own code
	evalue_state();
	argout = DeviceImpl::dev_state();

	/*----- PROTECTED REGION END -----*/	//	LinacGunAux::dev_state
	set_state(argout);    // Give the state to Tango.
	if (argout!=Tango::ALARM)
		DeviceImpl::dev_state();
	return get_state();  // Return it after Tango management.
}
//--------------------------------------------------------
/**
 *	Command Status related method
 *	Description: This command gets the device status (stored in its <i>device_status</i> data member) and returns it to the caller.
 *
 *	@returns Status description
 */
//--------------------------------------------------------
Tango::ConstDevString LinacGunAux::dev_status()
{
	DEBUG_STREAM << "LinacGunAux::Status()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacGunAux::dev_status) ENABLED START -----*/
	
	string	status = "Device is OK";
	//	Add your own code
	dev_state();
#ifndef SIMU
	struct timezone tzp;
	struct timeval time_now;
	long remaining_time;
	switch(thestate)
	{
	case Tango::UNKNOWN:
		thestatus = "Interlock status not readable !";
		break;
	case Tango::OFF:
		thestatus = intlk_desc[0];
		break;
	case Tango::ON:
		thestatus = "ON";
		break;
	case Tango::MOVING:
#ifdef WIN32
		gettimeofday(&time_now, NULL);
#else
		gettimeofday(&time_now, &tzp);
#endif
		remaining_time = (heat_time - (time_now.tv_sec - OnDate))/60;
		if(remaining_time < 0)
			remaining_time = 0;
		{
			TangoSys_OMemStream o;
			if(remaining_time>0)
				o << "Heating for less than " << remaining_time+1 << " minutes" << ends;
			else
				o << "Heating for less than 1 minute" << ends;
			thestatus = o.str();
		}
		break;
	case Tango::FAULT:
		thestatus = "";
		for(unsigned int i=2; i<intlk_states.size() ; i++)
		{
			if(intlk_states[i] == 0)
			{
				thestatus += intlk_desc[i];
				thestatus += "\n";
			}
		}
		break;
	case Tango::DISABLE:
		thestatus = "DISABLE : \n";
		for(unsigned int i=2; i<intlk_states.size() ; i++)
		{
			if(intlk_states[i] == 0)
			{
				thestatus += intlk_desc[i];
				thestatus += "\n";
			}
		}
		break;
	default:
		break;
	}
	set_status(thestatus.c_str());
#endif

	/*----- PROTECTED REGION END -----*/	//	LinacGunAux::dev_status
	set_status(status);               // Give the status to Tango.
	return DeviceImpl::dev_status();  // Return it.
}
//--------------------------------------------------------
/**
 *	Command On related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void LinacGunAux::on()
{
	DEBUG_STREAM << "LinacGunAux::On()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacGunAux::on) ENABLED START -----*/
	
	//	Add your own code
	struct timespec waittime;
	struct timespec remtime;
	
	DEBUG_STREAM << "LinacGunAux::on(): entering... !" << endl;

	//	Add your own code to control device here
#ifdef SIMU
	set_state(Tango::ON);
	thestate = Tango::ON;
	struct timeval time_now;
#ifdef WIN32
	gettimeofday(&time_now, NULL);
#else
	struct timezone tzp;
	gettimeofday(&time_now, &tzp);
#endif
	OnDate=time_now.tv_sec;
#else
	try
	{
		OnRelayds->command_inout("close");
	}
	catch(...)
	{
		ERROR_STREAM << "LinacGunAux::on():Error activating the pulsed relay (close command)" << onrelay.c_str() <<  endl;
		throw;
	}
	waittime = pulsewaittime;
	while ((nanosleep(&waittime,&remtime) == -1) && (errno == EINTR))
				waittime = remtime;
	try
	{
		OnRelayds->command_inout("open");
	}
	catch(...)
	{
		ERROR_STREAM << "LinacGunAux::on():Error activating the pulsed relay (open command)" << onrelay.c_str() <<  endl;
		throw;
	}
	n_state = Tango::ON;
	struct timeval time_now;
#ifdef WIN32
	gettimeofday(&time_now,NULL);
#else
	struct timezone tzp;
	gettimeofday(&time_now, &tzp);
#endif
	OnDate=time_now.tv_sec;
#endif

	/*----- PROTECTED REGION END -----*/	//	LinacGunAux::on
}
//--------------------------------------------------------
/**
 *	Command Off related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void LinacGunAux::off()
{
	DEBUG_STREAM << "LinacGunAux::Off()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacGunAux::off) ENABLED START -----*/
	
	//	Add your own code
	struct timespec waittime;
	struct timespec remtime;

	DEBUG_STREAM << "LinacGunAux::off(): entering... !" << endl;

	//	Add your own code to control device here
#ifdef SIMU
	set_state(Tango::OFF);
	thestate = Tango::OFF;
#else
	try
	{
		OffRelayds->command_inout("open");
	}
	catch(...)
	{
		ERROR_STREAM << "LinacGunAux::off():Error activating the pulsed relay (open command)" << offrelay.c_str() <<  endl;
		throw;
	}
	waittime = pulsewaittime;
	while ((nanosleep(&waittime,&remtime) == -1) && (errno == EINTR))
				waittime = remtime;
	try
	{
		OffRelayds->command_inout("close");
	}
	catch(...)
	{
		ERROR_STREAM << "LinacGunAux::off():Error activating the pulsed relay (close command)" << offrelay.c_str() <<  endl;
		throw;
	}
	n_state = Tango::OFF;
#endif

	/*----- PROTECTED REGION END -----*/	//	LinacGunAux::off
}
//--------------------------------------------------------
/**
 *	Command Reset related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void LinacGunAux::reset()
{
	DEBUG_STREAM << "LinacGunAux::Reset()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LinacGunAux::reset) ENABLED START -----*/
	
	//	Add your own code
	#ifdef SIMU
	switch(get_state())
	{
		case Tango::FAULT:
			set_state(Tango::ON);
			thestate = Tango::ON;
			break;
		case Tango::ON:
			set_state(Tango::OFF);
			thestate = Tango::OFF;
			break;
		case Tango::OFF:
			set_state(Tango::MOVING);
			thestate = Tango::MOVING;
			break;
		case Tango::MOVING:
			set_state(Tango::FAULT);
			thestate = Tango::FAULT;
			break;
		default:
			set_state(Tango::ON);
			thestate = Tango::ON;
	}
#else
	// reset the Daresbury
	try
	{
		daresburyds->command_inout("Reset");
	}
	catch(Tango::DevFailed &e)
	{
		Tango::Except::print_exception(e);
		throw;
	}
	n_state = Tango::OFF;
#endif

	/*----- PROTECTED REGION END -----*/	//	LinacGunAux::reset
}
//--------------------------------------------------------
/**
 *	Method      : LinacGunAux::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void LinacGunAux::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(LinacGunAux::add_dynamic_commands) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic commands if any
	
	/*----- PROTECTED REGION END -----*/	//	LinacGunAux::add_dynamic_commands
}

/*----- PROTECTED REGION ID(LinacGunAux::namespace_ending) ENABLED START -----*/

//	Additional Methods
/*
 * This function will read the interlocks attribute from the Daresbury device server
 * Description:evaluate the state of the device by reading the state of the
 * corresponding  Daresbury relay.
 * the state of the object is directly updated.
 */
void LinacGunAux::evalue_state()
{
	DEBUG_STREAM << "LinacGunAux::evalue_state(): entering... !" << endl;
#ifndef SIMU
	Tango::DeviceData argin;
	try
	{
		argin << interlocks;
	
		Tango::DeviceData ans = daresburyds->command_inout("GetInterlockState",argin);
		ans >> intlk_states;
	}
	catch(Tango::DevFailed &e)
	{
		set_state(Tango::UNKNOWN);
		thestate = Tango::UNKNOWN;
		Tango::Except::print_exception(e);
		return;
	}
	if(intlk_states[0] == 1)
	{
		set_state(Tango::ON);
		thestate = Tango::ON;
		n_state = Tango::ON;
		return;
	}
	if(intlk_states[1] == 1)
	{
		set_state(Tango::MOVING);
		thestate = Tango::MOVING;
		n_state = Tango::ON;
		return;
	}
	// if(n_state == Tango::OFF)
// 	{
// 		set_state(Tango::OFF);
//			thestate = Tango::OFF;
// 		return;
// 	}
	
	for(unsigned int i=2;i<intlk_states.size();i++)
	{
		if(intlk_states[i] == 0)
		{
			if(n_state == Tango::ON)
			{
				set_state(Tango::FAULT);
				thestate = Tango::FAULT;
			}
			else
			{
				set_state(Tango::DISABLE);
				thestate = Tango::DISABLE;
			}
			return;
		}
	}
	set_state(Tango::OFF);
	thestate = Tango::OFF;
	return;
#endif
}


/*----- PROTECTED REGION END -----*/	//	LinacGunAux::namespace_ending
} //	namespace
